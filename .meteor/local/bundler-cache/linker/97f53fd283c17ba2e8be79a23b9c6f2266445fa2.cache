[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar SimpleSchema = Package['aldeed:simple-schema'].SimpleSchema;\nvar MongoObject = Package['aldeed:simple-schema'].MongoObject;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar DDP = Package['ddp-client'].DDP;\nvar _ = Package.underscore._;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar Template = Package.templating.Template;\nvar Blaze = Package.blaze.Blaze;\nvar UI = Package.blaze.UI;\nvar Handlebars = Package.blaze.Handlebars;\nvar EJSON = Package.ejson.EJSON;\nvar ReactiveVar = Package['reactive-var'].ReactiveVar;\nvar moment = Package['momentjs:moment'].moment;\nvar Spacebars = Package.spacebars.Spacebars;\nvar HTML = Package.htmljs.HTML;\n\n/* Package-scope variables */\nvar Utility, FormPreserve, res, Hooks, FormData, ArrayTracker, defaultFormId, formPreserve, formData, templatesById, formValues, formDeps, inputTypeDefinitions, fd, arrayTracker, componentTypeList, Tracker, afDestroyUpdateForm, globalDefaultTemplate, defaultTypeTemplates, deps, validateFormDoc, _validateForm, _validateField, validateField, selectFirstInvalidField, getInputType, getFieldValue, getFormValues, getInputValue, getInputData, updateTrackedFieldValue, updateAllTrackedFieldValues, getAllFieldsInForm, AutoForm, hook;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////\n//                                                                   //\n// packages/aldeed_autoform/packages/aldeed_autoform.js              //\n//                                                                   //\n///////////////////////////////////////////////////////////////////////\n                                                                     //\n(function () {                                                       // 1\n                                                                     // 2\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/autoform-common.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// This is the only file that is run on the server, too                                                                // 1\n                                                                                                                       // 2\n// Extend the schema options allowed by SimpleSchema                                                                   // 3\nSimpleSchema.extendOptions({                                                                                           // 4\n  autoform: Match.Optional(Object)                                                                                     // 5\n});                                                                                                                    // 6\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 16\n}).call(this);                                                       // 17\n                                                                     // 18\n                                                                     // 19\n                                                                     // 20\n                                                                     // 21\n                                                                     // 22\n                                                                     // 23\n(function () {                                                       // 24\n                                                                     // 25\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/utility.js                                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nUtility = {                                                                                                            // 1\n  /**                                                                                                                  // 2\n   * @method Utility.cleanNulls                                                                                        // 3\n   * @private                                                                                                          // 4\n   * @param {Object} doc - Source object                                                                               // 5\n   * @returns {Object}                                                                                                 // 6\n   *                                                                                                                   // 7\n   * Returns an object in which all properties with null, undefined, or empty                                          // 8\n   * string values have been removed, recursively.                                                                     // 9\n   */                                                                                                                  // 10\n  cleanNulls: function cleanNulls(doc, isArray, keepEmptyStrings) {                                                    // 11\n    var newDoc = isArray ? [] : {};                                                                                    // 12\n    _.each(doc, function(val, key) {                                                                                   // 13\n      if (!_.isArray(val) && isBasicObject(val)) {                                                                     // 14\n        val = cleanNulls(val, false, keepEmptyStrings); //recurse into plain objects                                   // 15\n        if (!_.isEmpty(val)) {                                                                                         // 16\n          newDoc[key] = val;                                                                                           // 17\n        }                                                                                                              // 18\n      } else if (_.isArray(val)) {                                                                                     // 19\n        val = cleanNulls(val, true, keepEmptyStrings); //recurse into non-typed arrays                                 // 20\n        if (!_.isEmpty(val)) {                                                                                         // 21\n          newDoc[key] = val;                                                                                           // 22\n        }                                                                                                              // 23\n      } else if (!Utility.isNullUndefinedOrEmptyString(val)) {                                                         // 24\n        newDoc[key] = val;                                                                                             // 25\n      } else if (keepEmptyStrings && typeof val === \"string\" && val.length === 0) {                                    // 26\n        newDoc[key] = val;                                                                                             // 27\n      }                                                                                                                // 28\n    });                                                                                                                // 29\n    return newDoc;                                                                                                     // 30\n  },                                                                                                                   // 31\n  /**                                                                                                                  // 32\n   * @method Utility.reportNulls                                                                                       // 33\n   * @private                                                                                                          // 34\n   * @param {Object} flatDoc - An object with no properties that are also objects.                                     // 35\n   * @returns {Object} An object in which the keys represent the keys in the                                           // 36\n   * original object that were null, undefined, or empty strings, and the value                                        // 37\n   * of each key is \"\".                                                                                                // 38\n   */                                                                                                                  // 39\n  reportNulls: function reportNulls(flatDoc, keepEmptyStrings) {                                                       // 40\n    var nulls = {};                                                                                                    // 41\n    // Loop through the flat doc                                                                                       // 42\n    _.each(flatDoc, function(val, key) {                                                                               // 43\n      // If value is undefined, null, or an empty string, report this as null so it will be unset                      // 44\n      if (val === null) {                                                                                              // 45\n        nulls[key] = \"\";                                                                                               // 46\n      } else if (val === void 0) {                                                                                     // 47\n        nulls[key] = \"\";                                                                                               // 48\n      } else if (!keepEmptyStrings && typeof val === \"string\" && val.length === 0) {                                   // 49\n        nulls[key] = \"\";                                                                                               // 50\n      }                                                                                                                // 51\n      // If value is an array in which all the values recursively are undefined, null, or an empty string, report this as null so it will be unset\n      else if (_.isArray(val) && Utility.cleanNulls(val, true, keepEmptyStrings).length === 0) {                       // 53\n        nulls[key] = \"\";                                                                                               // 54\n      }                                                                                                                // 55\n    });                                                                                                                // 56\n    return nulls;                                                                                                      // 57\n  },                                                                                                                   // 58\n  /**                                                                                                                  // 59\n   * @method Utility.docToModifier                                                                                     // 60\n   * @private                                                                                                          // 61\n   * @param {Object} doc - An object to be converted into a MongoDB modifier                                           // 62\n   * @returns {Object} A MongoDB modifier.                                                                             // 63\n   *                                                                                                                   // 64\n   * Converts an object into a modifier by flattening it, putting keys with                                            // 65\n   * null, undefined, and empty string values into `modifier.$unset`, and                                              // 66\n   * putting the rest of the keys into `modifier.$set`.                                                                // 67\n   */                                                                                                                  // 68\n  docToModifier: function docToModifier(doc, keepEmptyStrings) {                                                       // 69\n    var modifier = {};                                                                                                 // 70\n                                                                                                                       // 71\n    // Flatten doc                                                                                                     // 72\n    var mDoc = new MongoObject(doc);                                                                                   // 73\n    var flatDoc = mDoc.getFlatObject({keepArrays: true});                                                              // 74\n    mDoc = null;                                                                                                       // 75\n    // Get a list of null, undefined, and empty string values so we can unset them instead                             // 76\n    var nulls = Utility.reportNulls(flatDoc, keepEmptyStrings);                                                        // 77\n    flatDoc = Utility.cleanNulls(flatDoc, false, keepEmptyStrings);                                                    // 78\n                                                                                                                       // 79\n    if (!_.isEmpty(flatDoc)) {                                                                                         // 80\n      modifier.$set = flatDoc;                                                                                         // 81\n    }                                                                                                                  // 82\n    if (!_.isEmpty(nulls)) {                                                                                           // 83\n      modifier.$unset = nulls;                                                                                         // 84\n    }                                                                                                                  // 85\n    return modifier;                                                                                                   // 86\n  },                                                                                                                   // 87\n  /**                                                                                                                  // 88\n   * @method Utility.getSelectValues                                                                                   // 89\n   * @private                                                                                                          // 90\n   * @param {Element} select - DOM Element from which to get current values                                            // 91\n   * @returns {string[]}                                                                                               // 92\n   *                                                                                                                   // 93\n   * Gets a string array of all the selected values in a given `select` DOM element.                                   // 94\n   */                                                                                                                  // 95\n  getSelectValues: function getSelectValues(select) {                                                                  // 96\n    var result = [];                                                                                                   // 97\n    var options = select && select.options || [];                                                                      // 98\n    var opt;                                                                                                           // 99\n                                                                                                                       // 100\n    for (var i = 0, ln = options.length; i < ln; i++) {                                                                // 101\n      opt = options[i];                                                                                                // 102\n                                                                                                                       // 103\n      if (opt.selected) {                                                                                              // 104\n        result.push(opt.value || opt.text);                                                                            // 105\n      }                                                                                                                // 106\n    }                                                                                                                  // 107\n    return result;                                                                                                     // 108\n  },                                                                                                                   // 109\n  /**                                                                                                                  // 110\n   * @method Utility.lookup                                                                                            // 111\n   * @private                                                                                                          // 112\n   * @param {Any} obj                                                                                                  // 113\n   * @returns {Any}                                                                                                    // 114\n   *                                                                                                                   // 115\n   * If `obj` is a string, returns the value of the property with that                                                 // 116\n   * name on the `window` object. Otherwise returns `obj`.                                                             // 117\n   */                                                                                                                  // 118\n  lookup: function lookup(obj) {                                                                                       // 119\n    var ref = window, arr;                                                                                             // 120\n    if (typeof obj === \"string\") {                                                                                     // 121\n      arr = obj.split(\".\");                                                                                            // 122\n      while(arr.length && (ref = ref[arr.shift()]));                                                                   // 123\n      if (!ref) {                                                                                                      // 124\n        throw new Error(obj + \" is not in the window scope\");                                                          // 125\n      }                                                                                                                // 126\n      return ref;                                                                                                      // 127\n    }                                                                                                                  // 128\n    return obj;                                                                                                        // 129\n  },                                                                                                                   // 130\n  /**                                                                                                                  // 131\n   * @method Utility.getDefs                                                                                           // 132\n   * @private                                                                                                          // 133\n   * @param {SimpleSchema} ss                                                                                          // 134\n   * @param {String} name                                                                                              // 135\n   * @return {Object} Schema definitions object                                                                        // 136\n   *                                                                                                                   // 137\n   * Returns the schema definitions object from a SimpleSchema instance. Equivalent to calling                         // 138\n   * `ss.schema(name)` but handles throwing errors if `name` is not a string or is not a valid                         // 139\n   * field name for this SimpleSchema instance.                                                                        // 140\n   */                                                                                                                  // 141\n  getDefs: function getDefs(ss, name) {                                                                                // 142\n    if (typeof name !== \"string\") {                                                                                    // 143\n      throw new Error(\"Invalid field name: (not a string)\");                                                           // 144\n    }                                                                                                                  // 145\n                                                                                                                       // 146\n    var defs = ss.schema(name);                                                                                        // 147\n    if (!defs)                                                                                                         // 148\n      throw new Error(\"Invalid field name: \" + name);                                                                  // 149\n    return defs;                                                                                                       // 150\n  },                                                                                                                   // 151\n  /**                                                                                                                  // 152\n   * @method Utility.objAffectsKey                                                                                     // 153\n   * @private                                                                                                          // 154\n   * @param  {Object} obj                                                                                              // 155\n   * @param  {String} key                                                                                              // 156\n   * @return {Boolean}                                                                                                 // 157\n   * @todo should make this a static method in MongoObject                                                             // 158\n   */                                                                                                                  // 159\n  objAffectsKey: function objAffectsKey(obj, key) {                                                                    // 160\n    var mDoc = new MongoObject(obj);                                                                                   // 161\n    return mDoc.affectsKey(key);                                                                                       // 162\n  },                                                                                                                   // 163\n  /**                                                                                                                  // 164\n   * @method Utility.expandObj                                                                                         // 165\n   * @private                                                                                                          // 166\n   * @param  {Object} doc                                                                                              // 167\n   * @return {Object}                                                                                                  // 168\n   *                                                                                                                   // 169\n   * Takes a flat object and returns an expanded version of it.                                                        // 170\n   */                                                                                                                  // 171\n  expandObj: function expandObj(doc) {                                                                                 // 172\n    var newDoc = {}, subkeys, subkey, subkeylen, nextPiece, current;                                                   // 173\n    _.each(doc, function(val, key) {                                                                                   // 174\n      subkeys = key.split(\".\");                                                                                        // 175\n      subkeylen = subkeys.length;                                                                                      // 176\n      current = newDoc;                                                                                                // 177\n      for (var i = 0; i < subkeylen; i++) {                                                                            // 178\n        subkey = subkeys[i];                                                                                           // 179\n        if (typeof current[subkey] !== \"undefined\" && !_.isObject(current[subkey])) {                                  // 180\n          break; //already set for some reason; leave it alone                                                         // 181\n        }                                                                                                              // 182\n        if (i === subkeylen - 1) {                                                                                     // 183\n          //last iteration; time to set the value                                                                      // 184\n          current[subkey] = val;                                                                                       // 185\n        } else {                                                                                                       // 186\n          //see if the next piece is a number                                                                          // 187\n          nextPiece = subkeys[i + 1];                                                                                  // 188\n          nextPiece = parseInt(nextPiece, 10);                                                                         // 189\n          if (isNaN(nextPiece) && !_.isObject(current[subkey])) {                                                      // 190\n            current[subkey] = {};                                                                                      // 191\n          } else if (!isNaN(nextPiece) && !_.isArray(current[subkey])) {                                               // 192\n            current[subkey] = [];                                                                                      // 193\n          }                                                                                                            // 194\n        }                                                                                                              // 195\n        current = current[subkey];                                                                                     // 196\n      }                                                                                                                // 197\n    });                                                                                                                // 198\n    return newDoc;                                                                                                     // 199\n  },                                                                                                                   // 200\n  /**                                                                                                                  // 201\n   * @method Utility.compactArrays                                                                                     // 202\n   * @private                                                                                                          // 203\n   * @param  {Object} obj                                                                                              // 204\n   * @return {undefined}                                                                                               // 205\n   *                                                                                                                   // 206\n   * Edits the object by reference, compacting any arrays at any level recursively.                                    // 207\n   */                                                                                                                  // 208\n  compactArrays: function compactArrays(obj) {                                                                         // 209\n    if (_.isObject(obj)) {                                                                                             // 210\n      _.each(obj, function (val, key) {                                                                                // 211\n        if (_.isArray(val)) {                                                                                          // 212\n          obj[key] = _.without(val, void 0, null);                                                                     // 213\n          _.each(obj[key], function (arrayItem) {                                                                      // 214\n            compactArrays(arrayItem);                                                                                  // 215\n          });                                                                                                          // 216\n        } else if (!(val instanceof Date) && _.isObject(val)) {                                                        // 217\n          //recurse into objects                                                                                       // 218\n          compactArrays(val);                                                                                          // 219\n        }                                                                                                              // 220\n      });                                                                                                              // 221\n    }                                                                                                                  // 222\n  },                                                                                                                   // 223\n  /**                                                                                                                  // 224\n   * @method Utility.bubbleEmpty                                                                                       // 225\n   * @private                                                                                                          // 226\n   * @param  {Object} obj                                                                                              // 227\n   * @return {undefined}                                                                                               // 228\n   *                                                                                                                   // 229\n   * Edits the object by reference.                                                                                    // 230\n   */                                                                                                                  // 231\n  bubbleEmpty: function bubbleEmpty(obj, keepEmptyStrings) {                                                           // 232\n    if (_.isObject(obj)) {                                                                                             // 233\n      _.each(obj, function (val, key) {                                                                                // 234\n        if (_.isArray(val)) {                                                                                          // 235\n          _.each(val, function (arrayItem) {                                                                           // 236\n            bubbleEmpty(arrayItem);                                                                                    // 237\n          });                                                                                                          // 238\n        } else if (isBasicObject(val)) {                                                                               // 239\n          var allEmpty = _.all(val, function (prop) {                                                                  // 240\n            return (prop === void 0 || prop === null || (!keepEmptyStrings && typeof prop === \"string\" && prop.length === 0));\n          });                                                                                                          // 242\n          if (_.isEmpty(val) || allEmpty) {                                                                            // 243\n            obj[key] = null;                                                                                           // 244\n          } else {                                                                                                     // 245\n            //recurse into objects                                                                                     // 246\n            bubbleEmpty(val);                                                                                          // 247\n          }                                                                                                            // 248\n        }                                                                                                              // 249\n      });                                                                                                              // 250\n    }                                                                                                                  // 251\n  },                                                                                                                   // 252\n  /**                                                                                                                  // 253\n   * @method Utility.getSimpleSchemaFromContext                                                                        // 254\n   * @private                                                                                                          // 255\n   * @param  {Object} context                                                                                          // 256\n   * @return {SimpleSchema}                                                                                            // 257\n   *                                                                                                                   // 258\n   * Given a context object that may or may not have schema and collection properties,                                 // 259\n   * returns a SimpleSchema instance or throws an error if one cannot be obtained.                                     // 260\n   */                                                                                                                  // 261\n  getSimpleSchemaFromContext: function getSimpleSchemaFromContext(context, formId) {                                   // 262\n    // If schema attribute, use that                                                                                   // 263\n    var ss = Utility.lookup(context.schema);                                                                           // 264\n    if (ss) {                                                                                                          // 265\n      if (ss instanceof SimpleSchema) {                                                                                // 266\n        return ss;                                                                                                     // 267\n      } else {                                                                                                         // 268\n        throw new Error('AutoForm: schema attribute for form with id \"' + formId + '\" is not a SimpleSchema instance');\n      }                                                                                                                // 270\n    }                                                                                                                  // 271\n    // If no schema attribute, use the schema attached to the collection                                               // 272\n    var collection = Utility.lookup(context.collection);                                                               // 273\n    if (collection) {                                                                                                  // 274\n      if (typeof collection.simpleSchema === 'function') {                                                             // 275\n        return collection.simpleSchema();                                                                              // 276\n      } else {                                                                                                         // 277\n        throw new Error('AutoForm: collection attribute for form with id \"' + formId + '\" refers to a collection that does not have a schema, or is not a collection. You might have forgotten to attach a schema to the collection or you might need to add the collection2 package to your app.');\n      }                                                                                                                // 279\n    }                                                                                                                  // 280\n    // If we got this far, we have no schema so throw an error                                                         // 281\n    throw new Error('AutoForm: form with id \"' + formId + '\" needs either \"schema\" or \"collection\" attribute');        // 282\n  },                                                                                                                   // 283\n  /**                                                                                                                  // 284\n   * @method Utility.isNullUndefinedOrEmptyString                                                                      // 285\n   * @private                                                                                                          // 286\n   * @param  {Any} val                                                                                                 // 287\n   * @return {Boolean}                                                                                                 // 288\n   *                                                                                                                   // 289\n   * Returns `true` if the value is null, undefined, or an empty string                                                // 290\n   */                                                                                                                  // 291\n  isNullUndefinedOrEmptyString: function isNullUndefinedOrEmptyString(val) {                                           // 292\n    return (val === void 0 || val === null || (typeof val === \"string\" && val.length === 0));                          // 293\n  },                                                                                                                   // 294\n  /**                                                                                                                  // 295\n   * @method Utility.isValidDateString                                                                                 // 296\n   * @private                                                                                                          // 297\n   * @param  {String}  dateString                                                                                      // 298\n   * @return {Boolean}                                                                                                 // 299\n   *                                                                                                                   // 300\n   * Returns `true` if dateString is a \"valid date string\"                                                             // 301\n   */                                                                                                                  // 302\n  isValidDateString: function isValidDateString(dateString) {                                                          // 303\n    var m = moment(dateString, 'YYYY-MM-DD', true);                                                                    // 304\n    return m && m.isValid();                                                                                           // 305\n  },                                                                                                                   // 306\n  /**                                                                                                                  // 307\n   * @method Utility.isValidTimeString                                                                                 // 308\n   * @private                                                                                                          // 309\n   * @param  {String}  timeString                                                                                      // 310\n   * @return {Boolean}                                                                                                 // 311\n   *                                                                                                                   // 312\n   * Returns `true` if timeString is a \"valid time string\"                                                             // 313\n   */                                                                                                                  // 314\n  isValidTimeString: function isValidTimeString(timeString) {                                                          // 315\n    if (typeof timeString !== \"string\")                                                                                // 316\n      return false;                                                                                                    // 317\n                                                                                                                       // 318\n    //this reg ex actually allows a few invalid hours/minutes/seconds, but                                             // 319\n    //we can catch that when parsing                                                                                   // 320\n    var regEx = /^[0-2][0-9]:[0-5][0-9](:[0-5][0-9](\\.[0-9]{1,3})?)?$/;                                                // 321\n    return regEx.test(timeString);                                                                                     // 322\n  },                                                                                                                   // 323\n  /**                                                                                                                  // 324\n   * @method  Utility.dateToDateString                                                                                 // 325\n   * @private                                                                                                          // 326\n   * @param  {Date} date                                                                                               // 327\n   * @return {String}                                                                                                  // 328\n   *                                                                                                                   // 329\n   * Returns a \"valid date string\" representing the local date.                                                        // 330\n   */                                                                                                                  // 331\n  dateToDateString: function dateToDateString(date) {                                                                  // 332\n    var m = (date.getMonth() + 1);                                                                                     // 333\n    if (m < 10) {                                                                                                      // 334\n      m = \"0\" + m;                                                                                                     // 335\n    }                                                                                                                  // 336\n    var d = date.getDate();                                                                                            // 337\n    if (d < 10) {                                                                                                      // 338\n      d = \"0\" + d;                                                                                                     // 339\n    }                                                                                                                  // 340\n    return date.getFullYear() + '-' + m + '-' + d;                                                                     // 341\n  },                                                                                                                   // 342\n  /**                                                                                                                  // 343\n   * @method  Utility.dateToDateStringUTC                                                                              // 344\n   * @private                                                                                                          // 345\n   * @param  {Date} date                                                                                               // 346\n   * @return {String}                                                                                                  // 347\n   *                                                                                                                   // 348\n   * Returns a \"valid date string\" representing the date converted to the UTC time zone.                               // 349\n   */                                                                                                                  // 350\n  dateToDateStringUTC: function dateToDateStringUTC(date) {                                                            // 351\n    var m = (date.getUTCMonth() + 1);                                                                                  // 352\n    if (m < 10) {                                                                                                      // 353\n      m = \"0\" + m;                                                                                                     // 354\n    }                                                                                                                  // 355\n    var d = date.getUTCDate();                                                                                         // 356\n    if (d < 10) {                                                                                                      // 357\n      d = \"0\" + d;                                                                                                     // 358\n    }                                                                                                                  // 359\n    return date.getUTCFullYear() + '-' + m + '-' + d;                                                                  // 360\n  },                                                                                                                   // 361\n  /**                                                                                                                  // 362\n   * @method  Utility.dateToNormalizedForcedUtcGlobalDateAndTimeString                                                 // 363\n   * @private                                                                                                          // 364\n   * @param  {Date} date                                                                                               // 365\n   * @return {String}                                                                                                  // 366\n   *                                                                                                                   // 367\n   * Returns a \"valid normalized forced-UTC global date and time string\" representing the time                         // 368\n   * converted to the UTC time zone and expressed as the shortest possible string for the given                        // 369\n   * time (e.g. omitting the seconds component entirely if the given time is zero seconds past the minute).            // 370\n   *                                                                                                                   // 371\n   * http://www.whatwg.org/specs/web-apps/current-work/multipage/states-of-the-type-attribute.html#date-and-time-state-(type=datetime)\n   * http://www.whatwg.org/specs/web-apps/current-work/multipage/common-microsyntaxes.html#valid-normalized-forced-utc-global-date-and-time-string\n   */                                                                                                                  // 374\n  dateToNormalizedForcedUtcGlobalDateAndTimeString: function dateToNormalizedForcedUtcGlobalDateAndTimeString(date) {  // 375\n    return moment(date).utc().format(\"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]\");                                                  // 376\n  },                                                                                                                   // 377\n  /**                                                                                                                  // 378\n   * @method  Utility.isValidNormalizedForcedUtcGlobalDateAndTimeString                                                // 379\n   * @private                                                                                                          // 380\n   * @param  {String} dateString                                                                                       // 381\n   * @return {Boolean}                                                                                                 // 382\n   *                                                                                                                   // 383\n   * Returns true if dateString is a \"valid normalized forced-UTC global date and time string\"                         // 384\n   */                                                                                                                  // 385\n  isValidNormalizedForcedUtcGlobalDateAndTimeString: function isValidNormalizedForcedUtcGlobalDateAndTimeString(dateString) {\n    if (typeof dateString !== \"string\")                                                                                // 387\n      return false;                                                                                                    // 388\n                                                                                                                       // 389\n    var datePart = dateString.substring(0, 10);                                                                        // 390\n    var tPart = dateString.substring(10, 11);                                                                          // 391\n    var timePart = dateString.substring(11, dateString.length - 1);                                                    // 392\n    var zPart = dateString.substring(dateString.length - 1);                                                           // 393\n    return Utility.isValidDateString(datePart) && tPart === \"T\" && Utility.isValidTimeString(timePart) && zPart === \"Z\";\n  },                                                                                                                   // 395\n  /**                                                                                                                  // 396\n   * @method Utility.dateToNormalizedLocalDateAndTimeString                                                            // 397\n   * @private                                                                                                          // 398\n   * @param {Date} date The Date object                                                                                // 399\n   * @param {String} [timezoneId] A valid timezoneId that moment-timezone understands, e.g., \"America/Los_Angeles\"     // 400\n   * @return {String}                                                                                                  // 401\n   *                                                                                                                   // 402\n   * Returns a \"valid normalized local date and time string\".                                                          // 403\n   */                                                                                                                  // 404\n  dateToNormalizedLocalDateAndTimeString: function dateToNormalizedLocalDateAndTimeString(date, timezoneId) {          // 405\n    var m = moment(date);                                                                                              // 406\n    // by default, we assume local timezone; add moment-timezone to app and pass timezoneId                            // 407\n    // to use a different timezone                                                                                     // 408\n    if (typeof timezoneId === \"string\") {                                                                              // 409\n      if (typeof m.tz !== \"function\") {                                                                                // 410\n        throw new Error(\"If you specify a timezoneId, make sure that you've added a moment-timezone package to your app\");\n      }                                                                                                                // 412\n      m.tz(timezoneId);                                                                                                // 413\n    }                                                                                                                  // 414\n    return m.format(\"YYYY-MM-DD[T]HH:mm:ss.SSS\");                                                                      // 415\n  },                                                                                                                   // 416\n  /**                                                                                                                  // 417\n   * @method  Utility.isValidNormalizedLocalDateAndTimeString                                                          // 418\n   * @private                                                                                                          // 419\n   * @param  {String} dtString                                                                                         // 420\n   * @return {Boolean}                                                                                                 // 421\n   *                                                                                                                   // 422\n   * Returns true if dtString is a \"valid normalized local date and time string\"                                       // 423\n   */                                                                                                                  // 424\n  isValidNormalizedLocalDateAndTimeString: function isValidNormalizedLocalDateAndTimeString(dtString) {                // 425\n    if (typeof dtString !== \"string\")                                                                                  // 426\n      return false;                                                                                                    // 427\n                                                                                                                       // 428\n    var datePart = dtString.substring(0, 10);                                                                          // 429\n    var tPart = dtString.substring(10, 11);                                                                            // 430\n    var timePart = dtString.substring(11, dtString.length);                                                            // 431\n    return Utility.isValidDateString(datePart) && tPart === \"T\" && Utility.isValidTimeString(timePart);                // 432\n  },                                                                                                                   // 433\n  /**                                                                                                                  // 434\n   * @method Utility.normalizeContext                                                                                  // 435\n   * @private                                                                                                          // 436\n   * @param  {Object} context A context object, potentially with an `atts` property.                                   // 437\n   * @param {String} name The name of the helper or component we're calling from.                                      // 438\n   * @return {Object} Normalized context object                                                                        // 439\n   *                                                                                                                   // 440\n   * Returns an object with `afc`, `af`, and `atts` properties, normalized from whatever object is passed in.          // 441\n   * This helps deal with the fact that we have to pass the ancestor autoform's context to different                   // 442\n   * helpers and components in different ways, but in all cases we want to get access to it and throw                  // 443\n   * an error if we can't find an autoform context.                                                                    // 444\n   */                                                                                                                  // 445\n  normalizeContext: function autoFormNormalizeContext(context, name) {                                                 // 446\n    var atts, autoform, defs, itemDefs, allowedValues, formComponentAttributes,                                        // 447\n      fieldAttributes, fieldAttributesForComponentType;                                                                // 448\n                                                                                                                       // 449\n    context = context || {};                                                                                           // 450\n    atts = context.atts ? _.clone(context.atts) : _.clone(context);                                                    // 451\n    autoform = AutoForm.find(name);                                                                                    // 452\n    defs = Utility.getDefs(autoform.ss, atts.name); //defs will not be undefined                                       // 453\n                                                                                                                       // 454\n    // For array fields, `allowedValues` is on the array item definition                                               // 455\n    if (defs.type === Array) {                                                                                         // 456\n      itemDefs = Utility.getDefs(autoform.ss, atts.name + \".$\");                                                       // 457\n      allowedValues = itemDefs.allowedValues;                                                                          // 458\n    } else {                                                                                                           // 459\n      allowedValues = defs.allowedValues;                                                                              // 460\n    }                                                                                                                  // 461\n                                                                                                                       // 462\n    // Look up the tree if we're in a helper, checking to see if any ancestor components                               // 463\n    // had a <componentType>-attribute specified.                                                                      // 464\n    formComponentAttributes = AutoForm.findAttributesWithPrefix(name + \"-\");                                           // 465\n                                                                                                                       // 466\n    // Get any field-specific attributes defined in the schema.                                                        // 467\n    // They can be in autoform.attrName or autoform.componentType.attrName, with                                       // 468\n    // the latter overriding the former.                                                                               // 469\n    fieldAttributes = _.clone(defs.autoform) || {};                                                                    // 470\n    fieldAttributesForComponentType = fieldAttributes[name] || {};                                                     // 471\n    fieldAttributes = _.omit(fieldAttributes, componentTypeList);                                                      // 472\n    fieldAttributes = _.extend({}, fieldAttributes, fieldAttributesForComponentType);                                  // 473\n                                                                                                                       // 474\n    // If options=\"auto\", we want to use defs.autoform.options                                                         // 475\n    // if specified and otherwise fall back to \"allowed\"                                                               // 476\n    if (fieldAttributes.options && atts.options === \"auto\")                                                            // 477\n      delete atts.options;                                                                                             // 478\n                                                                                                                       // 479\n    // \"autoform\" option in the schema provides default atts                                                           // 480\n    atts = _.extend({}, formComponentAttributes, fieldAttributes, atts);                                               // 481\n                                                                                                                       // 482\n    // If still set to \"auto\", then there were no options in defs, so we use \"allowed\"                                 // 483\n    if (atts.options === \"auto\") {                                                                                     // 484\n      if (allowedValues) {                                                                                             // 485\n        atts.options = \"allowed\";                                                                                      // 486\n      } else {                                                                                                         // 487\n        delete atts.options;                                                                                           // 488\n      }                                                                                                                // 489\n    }                                                                                                                  // 490\n                                                                                                                       // 491\n    return {                                                                                                           // 492\n      af: autoform,                                                                                                    // 493\n      atts: atts,                                                                                                      // 494\n      defs: defs                                                                                                       // 495\n    };                                                                                                                 // 496\n  },                                                                                                                   // 497\n  /**                                                                                                                  // 498\n   * @method Utility.stringToArray                                                                                     // 499\n   * @private                                                                                                          // 500\n   * @param {String|Array} s A variable that might be a string or an array.                                            // 501\n   * @param {String} errorMessage Error message to use if it's not a string or an array.                               // 502\n   * @return {Array} The array, building it from a comma-delimited string if necessary.                                // 503\n   */                                                                                                                  // 504\n  stringToArray: function stringToArray(s, errorMessage) {                                                             // 505\n    if (typeof s === \"string\") {                                                                                       // 506\n      return s.replace(/ /g, '').split(',');                                                                           // 507\n    } else if (!_.isArray(s)) {                                                                                        // 508\n      throw new Error(errorMessage);                                                                                   // 509\n    } else {                                                                                                           // 510\n      return s;                                                                                                        // 511\n    }                                                                                                                  // 512\n  },                                                                                                                   // 513\n  /**                                                                                                                  // 514\n   * @method Utility.stringToBool                                                                                      // 515\n   * @private                                                                                                          // 516\n   * @param {String} val A string or null or undefined.                                                                // 517\n   * @return {Boolean|String} The string converted to a Boolean.                                                       // 518\n   *                                                                                                                   // 519\n   * If the string is \"true\" or \"1\", returns `true`. If the string is \"false\" or \"0\", returns `false`. Otherwise returns the original string.\n   */                                                                                                                  // 521\n  stringToBool: function stringToBool(val) {                                                                           // 522\n    if (typeof val === \"string\" && val.length > 0) {                                                                   // 523\n      var lval = val.toLowerCase();                                                                                    // 524\n      if (lval === \"true\" || lval === \"1\") {                                                                           // 525\n        return true;                                                                                                   // 526\n      } else if (lval === \"false\" || lval === \"0\") {                                                                   // 527\n        return false;                                                                                                  // 528\n      }                                                                                                                // 529\n    }                                                                                                                  // 530\n    return val;                                                                                                        // 531\n  },                                                                                                                   // 532\n  /**                                                                                                                  // 533\n   * @method Utility.stringToNumber                                                                                    // 534\n   * @private                                                                                                          // 535\n   * @param {String} val A string or null or undefined.                                                                // 536\n   * @return {Number|String} The string converted to a Number or the original value.                                   // 537\n   *                                                                                                                   // 538\n   * Returns Number(val) unless the result is NaN.                                                                     // 539\n   */                                                                                                                  // 540\n  stringToNumber: function stringToNumber(val) {                                                                       // 541\n    if (typeof val === \"string\" && val.length > 0) {                                                                   // 542\n      var numVal = Number(val);                                                                                        // 543\n      if (!isNaN(numVal)) {                                                                                            // 544\n        return numVal;                                                                                                 // 545\n      }                                                                                                                // 546\n    }                                                                                                                  // 547\n    return val;                                                                                                        // 548\n  },                                                                                                                   // 549\n  /**                                                                                                                  // 550\n   * @method Utility.stringToDate                                                                                      // 551\n   * @private                                                                                                          // 552\n   * @param {String} val A string or null or undefined.                                                                // 553\n   * @return {Date|String} The string converted to a Date instance.                                                    // 554\n   *                                                                                                                   // 555\n   * Returns new Date(val) as long as val is a string with at least one character. Otherwise returns the original string.\n   */                                                                                                                  // 557\n  stringToDate: function stringToDate(val) {                                                                           // 558\n    if (typeof val === \"string\" && val.length > 0) {                                                                   // 559\n      return new Date(val);                                                                                            // 560\n    }                                                                                                                  // 561\n    return val;                                                                                                        // 562\n  },                                                                                                                   // 563\n  /**                                                                                                                  // 564\n   * @method Utility.addClass                                                                                          // 565\n   * @private                                                                                                          // 566\n   * @param {Object} atts An object that might have a \"class\" property                                                 // 567\n   * @param {String} klass The class string to add                                                                     // 568\n   * @return {Object} The object with klass added to the \"class\" property, creating the property if necessary          // 569\n   */                                                                                                                  // 570\n  addClass: function addClass(atts, klass) {                                                                           // 571\n    if (typeof atts[\"class\"] === \"string\") {                                                                           // 572\n      atts[\"class\"] += \" \" + klass;                                                                                    // 573\n    } else {                                                                                                           // 574\n      atts[\"class\"] = klass;                                                                                           // 575\n    }                                                                                                                  // 576\n    return atts;                                                                                                       // 577\n  }                                                                                                                    // 578\n};                                                                                                                     // 579\n                                                                                                                       // 580\n                                                                                                                       // 581\n// getPrototypeOf polyfill                                                                                             // 582\nif (typeof Object.getPrototypeOf !== \"function\") {                                                                     // 583\n  if (typeof \"\".__proto__ === \"object\") {                                                                              // 584\n    Object.getPrototypeOf = function(object) {                                                                         // 585\n      return object.__proto__;                                                                                         // 586\n    };                                                                                                                 // 587\n  } else {                                                                                                             // 588\n    Object.getPrototypeOf = function(object) {                                                                         // 589\n      // May break if the constructor has been tampered with                                                           // 590\n      return object.constructor.prototype;                                                                             // 591\n    };                                                                                                                 // 592\n  }                                                                                                                    // 593\n}                                                                                                                      // 594\n                                                                                                                       // 595\n/* Tests whether \"obj\" is an Object as opposed to                                                                      // 596\n * something that inherits from Object                                                                                 // 597\n *                                                                                                                     // 598\n * @param {any} obj                                                                                                    // 599\n * @returns {Boolean}                                                                                                  // 600\n */                                                                                                                    // 601\nvar isBasicObject = function(obj) {                                                                                    // 602\n  return _.isObject(obj) && Object.getPrototypeOf(obj) === Object.prototype;                                           // 603\n};                                                                                                                     // 604\n                                                                                                                       // 605\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 638\n}).call(this);                                                       // 639\n                                                                     // 640\n                                                                     // 641\n                                                                     // 642\n                                                                     // 643\n                                                                     // 644\n                                                                     // 645\n(function () {                                                       // 646\n                                                                     // 647\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/form-preserve.js                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * @constructor                                                                                                        // 2\n * @private                                                                                                            // 3\n * @param {String} migrationName                                                                                       // 4\n *                                                                                                                     // 5\n * Internal helper object to preserve form inputs across Hot Code Push                                                 // 6\n * and across \"pages\" navigation if the option is enabled.                                                             // 7\n */                                                                                                                    // 8\nFormPreserve = function formPreserveConstructor(migrationName) {                                                       // 9\n  var self = this;                                                                                                     // 10\n  if (! _.isString(migrationName))                                                                                     // 11\n    throw Error(\"You must define an unique migration name of type String\");                                            // 12\n  self.registeredForms = {};                                                                                           // 13\n  self.retrievedDocuments = {};                                                                                        // 14\n  if (Package.reload) {                                                                                                // 15\n    var Reload = Package.reload.Reload;                                                                                // 16\n    self.retrievedDocuments = Reload._migrationData(migrationName) || {};                                              // 17\n    Reload._onMigrate(migrationName, function () {                                                                     // 18\n      return [true, self._retrieveRegisteredDocuments()];                                                              // 19\n    });                                                                                                                // 20\n  }                                                                                                                    // 21\n};                                                                                                                     // 22\n                                                                                                                       // 23\nFormPreserve.prototype.getDocument = function (formId) {                                                               // 24\n  var self = this;                                                                                                     // 25\n  if (! _.has(self.retrievedDocuments, formId))                                                                        // 26\n    return false;                                                                                                      // 27\n  else                                                                                                                 // 28\n    return self.retrievedDocuments[formId];                                                                            // 29\n};                                                                                                                     // 30\n                                                                                                                       // 31\nFormPreserve.prototype.clearDocument = function (formId) {                                                             // 32\n  delete this.retrievedDocuments[formId];                                                                              // 33\n};                                                                                                                     // 34\n                                                                                                                       // 35\nFormPreserve.prototype.registerForm = function (formId, retrieveFunc) {                                                // 36\n  this.registeredForms[formId] = retrieveFunc;                                                                         // 37\n};                                                                                                                     // 38\n                                                                                                                       // 39\nFormPreserve.prototype.formIsRegistered = function (formId) {                                                          // 40\n  return !!this.registeredForms[formId];                                                                               // 41\n};                                                                                                                     // 42\n                                                                                                                       // 43\nFormPreserve.prototype.unregisterForm = function (formId) {                                                            // 44\n  delete this.registeredForms[formId];                                                                                 // 45\n  delete this.retrievedDocuments[formId];                                                                              // 46\n};                                                                                                                     // 47\n                                                                                                                       // 48\nFormPreserve.prototype.unregisterAllForms = function () {                                                              // 49\n  var self = this;                                                                                                     // 50\n  self.registeredForms = {};                                                                                           // 51\n  self.retrievedDocuments = {};                                                                                        // 52\n};                                                                                                                     // 53\n                                                                                                                       // 54\nFormPreserve.prototype._retrieveRegisteredDocuments = function () {                                                    // 55\n  var self = this;                                                                                                     // 56\n  res = {};                                                                                                            // 57\n  _.each(self.registeredForms, function (retrieveFunc, formId) {                                                       // 58\n    res[formId] = retrieveFunc();                                                                                      // 59\n  });                                                                                                                  // 60\n  return res;                                                                                                          // 61\n};                                                                                                                     // 62\n                                                                                                                       // 63\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 718\n}).call(this);                                                       // 719\n                                                                     // 720\n                                                                     // 721\n                                                                     // 722\n                                                                     // 723\n                                                                     // 724\n                                                                     // 725\n(function () {                                                       // 726\n                                                                     // 727\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/autoform-hooks.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// Manages all hooks, supporting append/replace, get                                                                   // 1\n                                                                                                                       // 2\nHooks = {                                                                                                              // 3\n  form: {},                                                                                                            // 4\n  global: {                                                                                                            // 5\n    before: {},                                                                                                        // 6\n    after: {},                                                                                                         // 7\n    formToDoc: [],                                                                                                     // 8\n    docToForm: [],                                                                                                     // 9\n    onSubmit: [],                                                                                                      // 10\n    onSuccess: [],                                                                                                     // 11\n    onError: [],                                                                                                       // 12\n    beginSubmit: [],                                                                                                   // 13\n    endSubmit: []                                                                                                      // 14\n  }                                                                                                                    // 15\n};                                                                                                                     // 16\n                                                                                                                       // 17\nHooks.addHooksToList = function addHooksToList(hooksList, hooks, replace) {                                            // 18\n  // Add before hooks                                                                                                  // 19\n  hooks.before && _.each(hooks.before, function autoFormBeforeHooksEach(func, type) {                                  // 20\n    if (typeof func !== \"function\") {                                                                                  // 21\n      throw new Error(\"AutoForm before hook must be a function, not \" + typeof func);                                  // 22\n    }                                                                                                                  // 23\n    hooksList.before[type] = (!replace && hooksList.before[type]) ? hooksList.before[type] : [];                       // 24\n    hooksList.before[type].push(func);                                                                                 // 25\n  });                                                                                                                  // 26\n                                                                                                                       // 27\n  // Add after hooks                                                                                                   // 28\n  hooks.after && _.each(hooks.after, function autoFormAfterHooksEach(func, type) {                                     // 29\n    if (typeof func !== \"function\") {                                                                                  // 30\n      throw new Error(\"AutoForm after hook must be a function, not \" + typeof func);                                   // 31\n    }                                                                                                                  // 32\n    hooksList.after[type] = (!replace && hooksList.after[type]) ? hooksList.after[type] : [];                          // 33\n    hooksList.after[type].push(func);                                                                                  // 34\n  });                                                                                                                  // 35\n                                                                                                                       // 36\n  // Add all other hooks                                                                                               // 37\n  _.each(['formToDoc', 'docToForm', 'onSubmit', 'onSuccess', 'onError', 'beginSubmit', 'endSubmit'], function autoFormHooksEach(name) {\n    if (hooks[name]) {                                                                                                 // 39\n      if (typeof hooks[name] !== \"function\") {                                                                         // 40\n        throw new Error(\"AutoForm \" + name + \" hook must be a function, not \" + typeof hooks[name]);                   // 41\n      }                                                                                                                // 42\n                                                                                                                       // 43\n      if(replace) {                                                                                                    // 44\n          hooksList[name] = [];                                                                                        // 45\n      }                                                                                                                // 46\n                                                                                                                       // 47\n      hooksList[name].push(hooks[name]);                                                                               // 48\n    }                                                                                                                  // 49\n  });                                                                                                                  // 50\n};                                                                                                                     // 51\n                                                                                                                       // 52\nHooks.getHooks = function getHooks(formId, type, subtype) {                                                            // 53\n  var f, g;                                                                                                            // 54\n  if (subtype) {                                                                                                       // 55\n    f = Hooks.form[formId] && Hooks.form[formId][type] && Hooks.form[formId][type][subtype] || [];                     // 56\n    g = Hooks.global[type] && Hooks.global[type][subtype] || [];                                                       // 57\n  } else {                                                                                                             // 58\n    f = Hooks.form[formId] && Hooks.form[formId][type] || [];                                                          // 59\n    g = Hooks.global[type] || [];                                                                                      // 60\n  }                                                                                                                    // 61\n  return f.concat(g);                                                                                                  // 62\n};                                                                                                                     // 63\n                                                                                                                       // 64\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 799\n}).call(this);                                                       // 800\n                                                                     // 801\n                                                                     // 802\n                                                                     // 803\n                                                                     // 804\n                                                                     // 805\n                                                                     // 806\n(function () {                                                       // 807\n                                                                     // 808\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/autoform-formdata.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// Tracks form data; particularly needed to track the number of items in arrays in the doc                             // 1\n                                                                                                                       // 2\nFormData = function afFormData() {                                                                                     // 3\n\tvar self = this;                                                                                                      // 4\n\tself.forms = {};                                                                                                      // 5\n};                                                                                                                     // 6\n                                                                                                                       // 7\nFormData.prototype.initForm = function fdInitForm(formId) {                                                            // 8\n\tvar self = this;                                                                                                      // 9\n                                                                                                                       // 10\n\tif (self.forms[formId])                                                                                               // 11\n\t\treturn;                                                                                                              // 12\n                                                                                                                       // 13\n\tself.forms[formId] = {                                                                                                // 14\n\t\tsourceDoc: null,                                                                                                     // 15\n\t\tdeps: {                                                                                                              // 16\n\t\t\tsourceDoc: new Tracker.Dependency()                                                                                 // 17\n\t\t}                                                                                                                    // 18\n\t};                                                                                                                    // 19\n};                                                                                                                     // 20\n                                                                                                                       // 21\nFormData.prototype.sourceDoc = function fdSourceDoc(formId, sourceDoc) {                                               // 22\n\tvar self = this;                                                                                                      // 23\n\tself.initForm(formId);                                                                                                // 24\n                                                                                                                       // 25\n\tif (sourceDoc) {                                                                                                      // 26\n\t\t//setter                                                                                                             // 27\n\t\tself.forms[formId].sourceDoc = sourceDoc;                                                                            // 28\n\t\tself.forms[formId].deps.sourceDoc.changed();                                                                         // 29\n\t} else {                                                                                                              // 30\n\t\t//getter                                                                                                             // 31\n\t\tself.forms[formId].deps.sourceDoc.depend();                                                                          // 32\n\t\treturn self.forms[formId].sourceDoc;                                                                                 // 33\n\t}                                                                                                                     // 34\n};                                                                                                                     // 35\n                                                                                                                       // 36\nFormData.prototype.getDocCountForField = function fdGetDocCountForField(formId, field) {                               // 37\n\tvar self = this;                                                                                                      // 38\n\tvar mDoc = self.sourceDoc(formId);                                                                                    // 39\n\tvar docCount;                                                                                                         // 40\n\tif (mDoc) {                                                                                                           // 41\n\t\tvar keyInfo = mDoc.getInfoForKey(field);                                                                             // 42\n\t\tif (keyInfo && _.isArray(keyInfo.value)) {                                                                           // 43\n\t\t\tdocCount = keyInfo.value.length                                                                                     // 44\n\t\t}                                                                                                                    // 45\n\t}                                                                                                                     // 46\n\treturn docCount;                                                                                                      // 47\n};                                                                                                                     // 48\n                                                                                                                       // 49\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 865\n}).call(this);                                                       // 866\n                                                                     // 867\n                                                                     // 868\n                                                                     // 869\n                                                                     // 870\n                                                                     // 871\n                                                                     // 872\n(function () {                                                       // 873\n                                                                     // 874\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/autoform-arrays.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// Track arrays; this allows us to add/remove fields or groups of fields for an array                                  // 1\n// but still easily respect minCount and maxCount, and properly add/remove the same                                    // 2\n// items from the database once the form is submitted.                                                                 // 3\n                                                                                                                       // 4\nArrayTracker = function afArrayTracker() {                                                                             // 5\n  var self = this;                                                                                                     // 6\n  self.info = {};                                                                                                      // 7\n};                                                                                                                     // 8\n                                                                                                                       // 9\nArrayTracker.prototype.getMinMax = function atGetMinMax(ss, field, overrideMinCount, overrideMaxCount) {               // 10\n  var defs = AutoForm.Utility.getDefs(ss, field);                                                                      // 11\n                                                                                                                       // 12\n  // minCount is set by the schema, but can be set higher on the field attribute                                       // 13\n  overrideMinCount = overrideMinCount || 0;                                                                            // 14\n  var minCount = defs.minCount || 0;                                                                                   // 15\n  minCount = Math.max(overrideMinCount, minCount);                                                                     // 16\n                                                                                                                       // 17\n  // maxCount is set by the schema, but can be set lower on the field attribute                                        // 18\n  overrideMaxCount = overrideMaxCount || Infinity;                                                                     // 19\n  var maxCount = defs.maxCount || Infinity;                                                                            // 20\n  maxCount = Math.min(overrideMaxCount, maxCount);                                                                     // 21\n                                                                                                                       // 22\n  return {minCount: minCount, maxCount: maxCount};                                                                     // 23\n};                                                                                                                     // 24\n                                                                                                                       // 25\nArrayTracker.prototype.initForm = function atInitForm(formId) {                                                        // 26\n\tvar self = this;                                                                                                      // 27\n                                                                                                                       // 28\n\tif (self.info[formId])                                                                                                // 29\n\t\treturn;                                                                                                              // 30\n                                                                                                                       // 31\n\tself.info[formId] = {};                                                                                               // 32\n};                                                                                                                     // 33\n                                                                                                                       // 34\nArrayTracker.prototype.getForm = function atInitForm(formId) {                                                         // 35\n\tvar self = this;                                                                                                      // 36\n\tself.initForm(formId);                                                                                                // 37\n\treturn self.info[formId];                                                                                             // 38\n};                                                                                                                     // 39\n                                                                                                                       // 40\nArrayTracker.prototype.ensureField = function atEnsureField(formId, field) {                                           // 41\n\tvar self = this;                                                                                                      // 42\n\tself.initForm(formId);                                                                                                // 43\n                                                                                                                       // 44\n\tif (!self.info[formId][field]) {                                                                                      // 45\n\t\tself.resetField(formId, field);                                                                                      // 46\n\t}                                                                                                                     // 47\n};                                                                                                                     // 48\n                                                                                                                       // 49\nArrayTracker.prototype.initField = function atInitField(formId, field, ss, docCount, overrideMinCount, overrideMaxCount) {\n\tvar self = this;                                                                                                      // 51\n\tself.ensureField(formId, field);                                                                                      // 52\n                                                                                                                       // 53\n\tif (self.info[formId][field].array != null)                                                                           // 54\n\t\treturn;                                                                                                              // 55\n                                                                                                                       // 56\n\t// If we have a doc: The count should be the maximum of docCount or schema minCount or field minCount or 1.           // 57\n\t// If we don't have a doc: The count should be the maximum of schema minCount or field minCount or 1.                 // 58\n\tvar range = self.getMinMax(ss, field, overrideMinCount, overrideMaxCount);                                            // 59\n\tvar arrayCount = Math.max(range.minCount, (docCount == null) ? 1 : docCount);                                         // 60\n                                                                                                                       // 61\n\t// If this is an array of objects, collect names of object props                                                      // 62\n\tvar childKeys = [];                                                                                                   // 63\n\tif (ss.schema(field + '.$').type === Object) {                                                                        // 64\n    childKeys = ss.objectKeys(SimpleSchema._makeGeneric(field) + '.$');                                                // 65\n\t}                                                                                                                     // 66\n                                                                                                                       // 67\n\tvar loopArray = [];                                                                                                   // 68\n\tfor (var i = 0; i < arrayCount; i++) {                                                                                // 69\n\t\tvar loopCtx = createLoopCtx(formId, field, i, childKeys, overrideMinCount, overrideMaxCount);                        // 70\n\t\tloopArray.push(loopCtx);                                                                                             // 71\n\t};                                                                                                                    // 72\n                                                                                                                       // 73\n\tself.info[formId][field].array = loopArray;                                                                           // 74\n\tvar count = loopArray.length;                                                                                         // 75\n\tself.info[formId][field].count = count;                                                                               // 76\n\tself.info[formId][field].visibleCount = count;                                                                        // 77\n\tself.info[formId][field].deps.changed();                                                                              // 78\n};                                                                                                                     // 79\n                                                                                                                       // 80\nArrayTracker.prototype.resetField = function atResetField(formId, field) {                                             // 81\n\tvar self = this;                                                                                                      // 82\n\tself.initForm(formId);                                                                                                // 83\n                                                                                                                       // 84\n\tif (!self.info[formId][field]) {                                                                                      // 85\n\t\tself.info[formId][field] = {                                                                                         // 86\n\t\t\tdeps: new Tracker.Dependency()                                                                                      // 87\n\t\t};                                                                                                                   // 88\n\t}                                                                                                                     // 89\n                                                                                                                       // 90\n\tself.info[formId][field].array = null;                                                                                // 91\n\tself.info[formId][field].count = 0;                                                                                   // 92\n\tself.info[formId][field].visibleCount = 0;                                                                            // 93\n\tself.info[formId][field].deps.changed();                                                                              // 94\n};                                                                                                                     // 95\n                                                                                                                       // 96\nArrayTracker.prototype.resetForm = function atResetForm(formId) {                                                      // 97\n\tvar self = this;                                                                                                      // 98\n\t_.each(self.info[formId], function (info, field) {                                                                    // 99\n\t\tself.resetField(formId, field);                                                                                      // 100\n\t});                                                                                                                   // 101\n};                                                                                                                     // 102\n                                                                                                                       // 103\nArrayTracker.prototype.untrackForm = function atUntrackForm(formId) {                                                  // 104\n\tvar self = this;                                                                                                      // 105\n\tself.info[formId] = {};                                                                                               // 106\n};                                                                                                                     // 107\n                                                                                                                       // 108\nArrayTracker.prototype.tracksField = function atTracksField(formId, field) {                                           // 109\n\tvar self = this;                                                                                                      // 110\n\tself.ensureField(formId, field);                                                                                      // 111\n\tself.info[formId][field].deps.depend();                                                                               // 112\n\treturn !!self.info[formId][field].array;                                                                              // 113\n};                                                                                                                     // 114\n                                                                                                                       // 115\nArrayTracker.prototype.getField = function atGetField(formId, field) {                                                 // 116\n\tvar self = this;                                                                                                      // 117\n\tself.ensureField(formId, field);                                                                                      // 118\n\tself.info[formId][field].deps.depend();                                                                               // 119\n\treturn self.info[formId][field].array;                                                                                // 120\n};                                                                                                                     // 121\n                                                                                                                       // 122\nArrayTracker.prototype.getCount = function atGetCount(formId, field) {                                                 // 123\n\tvar self = this;                                                                                                      // 124\n\tself.ensureField(formId, field);                                                                                      // 125\n\tself.info[formId][field].deps.depend();                                                                               // 126\n\treturn self.info[formId][field].count;                                                                                // 127\n};                                                                                                                     // 128\n                                                                                                                       // 129\nArrayTracker.prototype.getVisibleCount = function atGetVisibleCount(formId, field) {                                   // 130\n\tvar self = this;                                                                                                      // 131\n\tself.ensureField(formId, field);                                                                                      // 132\n\tself.info[formId][field].deps.depend();                                                                               // 133\n\treturn self.info[formId][field].visibleCount;                                                                         // 134\n};                                                                                                                     // 135\n                                                                                                                       // 136\nArrayTracker.prototype.isFirstFieldlVisible = function atIsFirstFieldlVisible(formId, field, currentIndex) {           // 137\n\tvar self = this;                                                                                                      // 138\n\tself.ensureField(formId, field);                                                                                      // 139\n\tself.info[formId][field].deps.depend();                                                                               // 140\n\tvar firstVisibleField = _.find(self.info[formId][field].array, function(currentField) {                               // 141\n\t\treturn !currentField.removed;                                                                                        // 142\n\t});                                                                                                                   // 143\n\treturn (firstVisibleField && firstVisibleField.index === currentIndex);                                               // 144\n};                                                                                                                     // 145\n                                                                                                                       // 146\nArrayTracker.prototype.isLastFieldlVisible = function atIsLastFieldlVisible(formId, field, currentIndex) {             // 147\n\tvar self = this;                                                                                                      // 148\n\tself.ensureField(formId, field);                                                                                      // 149\n\tself.info[formId][field].deps.depend();                                                                               // 150\n\tvar lastVisibleField = _.last(_.filter(self.info[formId][field].array, function(currentField) {                       // 151\n\t\treturn !currentField.removed;                                                                                        // 152\n\t}));                                                                                                                  // 153\n\treturn (lastVisibleField && lastVisibleField.index === currentIndex);                                                 // 154\n};                                                                                                                     // 155\n                                                                                                                       // 156\nArrayTracker.prototype.addOneToField = function atAddOneToField(formId, field, ss, overrideMinCount, overrideMaxCount) {\n  var self = this;                                                                                                     // 158\n  self.ensureField(formId, field);                                                                                     // 159\n                                                                                                                       // 160\n  if (!self.info[formId][field].array) {                                                                               // 161\n  \treturn;                                                                                                             // 162\n  }                                                                                                                    // 163\n                                                                                                                       // 164\n  var currentCount = self.info[formId][field].visibleCount                                                             // 165\n  var maxCount = self.getMinMax(ss, field, overrideMinCount, overrideMaxCount).maxCount;                               // 166\n                                                                                                                       // 167\n  if (currentCount < maxCount) {                                                                                       // 168\n\t  var i = self.info[formId][field].array.length;                                                                      // 169\n                                                                                                                       // 170\n\t  // If this is an array of objects, collect names of object props                                                    // 171\n\t  var childKeys = [];                                                                                                 // 172\n\t  if (ss.schema(field + '.$').type === Object) {                                                                      // 173\n      childKeys = ss.objectKeys(SimpleSchema._makeGeneric(field) + '.$');                                              // 174\n\t  }                                                                                                                   // 175\n                                                                                                                       // 176\n\t  var loopCtx = createLoopCtx(formId, field, i, childKeys, overrideMinCount, overrideMaxCount);                       // 177\n                                                                                                                       // 178\n\t  self.info[formId][field].array.push(loopCtx);                                                                       // 179\n\t  self.info[formId][field].count++;                                                                                   // 180\n\t  self.info[formId][field].visibleCount++;                                                                            // 181\n\t  self.info[formId][field].deps.changed();                                                                            // 182\n  }                                                                                                                    // 183\n};                                                                                                                     // 184\n                                                                                                                       // 185\nArrayTracker.prototype.removeFromFieldAtIndex = function atRemoveFromFieldAtIndex(formId, field, index, ss, overrideMinCount, overrideMaxCount) {\n  var self = this;                                                                                                     // 187\n  self.ensureField(formId, field);                                                                                     // 188\n                                                                                                                       // 189\n  if (!self.info[formId][field].array) {                                                                               // 190\n  \treturn;                                                                                                             // 191\n  }                                                                                                                    // 192\n                                                                                                                       // 193\n  var currentCount = self.info[formId][field].visibleCount;                                                            // 194\n  var minCount = self.getMinMax(ss, field, overrideMinCount, overrideMaxCount).minCount;                               // 195\n                                                                                                                       // 196\n  if (currentCount > minCount) {                                                                                       // 197\n    self.info[formId][field].array[index].removed = true;                                                              // 198\n    self.info[formId][field].count--;                                                                                  // 199\n    self.info[formId][field].visibleCount--;                                                                           // 200\n    self.info[formId][field].deps.changed();                                                                           // 201\n  }                                                                                                                    // 202\n}                                                                                                                      // 203\n                                                                                                                       // 204\n/*                                                                                                                     // 205\n * PRIVATE                                                                                                             // 206\n */                                                                                                                    // 207\nvar createLoopCtx = function(formId, field, index, childKeys, overrideMinCount, overrideMaxCount) {                    // 208\n  var loopCtx = {                                                                                                      // 209\n  \tformId:         formId,                                                                                             // 210\n  \tarrayFieldName: field,                                                                                              // 211\n  \tname:           field + '.' + index,                                                                                // 212\n  \tindex:          index,                                                                                              // 213\n  \tminCount:       overrideMinCount,                                                                                   // 214\n  \tmaxCount:       overrideMaxCount                                                                                    // 215\n  };                                                                                                                   // 216\n                                                                                                                       // 217\n  // If this is an array of objects, add child key names under loopCtx.current[childName] = fullKeyName                // 218\n  if (childKeys.length) {                                                                                              // 219\n    loopCtx.current = {};                                                                                              // 220\n\t_.each(childKeys, function (k) {                                                                                      // 221\n\t  loopCtx.current[k] = field + '.' + index + '.' + k;                                                                 // 222\n    });                                                                                                                // 223\n  }                                                                                                                    // 224\n                                                                                                                       // 225\n  return loopCtx;                                                                                                      // 226\n}                                                                                                                      // 227\n                                                                                                                       // 228\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 1110\n}).call(this);                                                       // 1111\n                                                                     // 1112\n                                                                     // 1113\n                                                                     // 1114\n                                                                     // 1115\n                                                                     // 1116\n                                                                     // 1117\n(function () {                                                       // 1118\n                                                                     // 1119\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/autoform.js                                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\ndefaultFormId = \"_afGenericID\";                                                                                        // 1\nformPreserve = new FormPreserve(\"autoforms\");                                                                          // 2\nformData = {}; //for looking up autoform data by form ID                                                               // 3\ntemplatesById = {}; //keep a reference of autoForm templates by form `id` for AutoForm.getFormValues                   // 4\nformValues = {}; //for reactive show/hide based on current value of a field                                            // 5\nformDeps = {}; //for invalidating the form inner context and causing rerender                                          // 6\ninputTypeDefinitions = {}; //for storing input type definitions added by AutoForm.addInputType                         // 7\nfd = new FormData();                                                                                                   // 8\narrayTracker = new ArrayTracker();                                                                                     // 9\ncomponentTypeList = ['afArrayField', 'afEachArrayItem', 'afFieldInput', 'afFormGroup', 'afObjectField', 'afQuickField', 'afQuickFields', 'autoForm', 'quickForm'];\n                                                                                                                       // 11\n// backwards compatibility                                                                                             // 12\nif (typeof Tracker === \"undefined\" && typeof Deps !== \"undefined\") {                                                   // 13\n  Tracker = Deps;                                                                                                      // 14\n}                                                                                                                      // 15\n                                                                                                                       // 16\nafDestroyUpdateForm = new ReactiveVar(false);                                                                          // 17\n                                                                                                                       // 18\n// reactive templates                                                                                                  // 19\nglobalDefaultTemplate = \"bootstrap3\"                                                                                   // 20\ndefaultTypeTemplates = {};                                                                                             // 21\ndeps = {                                                                                                               // 22\n  defaultTemplate: new Tracker.Dependency,                                                                             // 23\n  defaultTypeTemplates: {}                                                                                             // 24\n};                                                                                                                     // 25\n                                                                                                                       // 26\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 1153\n}).call(this);                                                       // 1154\n                                                                     // 1155\n                                                                     // 1156\n                                                                     // 1157\n                                                                     // 1158\n                                                                     // 1159\n                                                                     // 1160\n(function () {                                                       // 1161\n                                                                     // 1162\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/autoform-helpers.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// Global template helpers (exported)                                                                                  // 1\n                                                                                                                       // 2\nvar regHelper = Template.registerHelper;                                                                               // 3\nif (typeof regHelper !== \"function\") {                                                                                 // 4\n  regHelper = UI.registerHelper;                                                                                       // 5\n}                                                                                                                      // 6\n                                                                                                                       // 7\n/*                                                                                                                     // 8\n * afFieldMessage                                                                                                      // 9\n */                                                                                                                    // 10\nregHelper('afFieldMessage', function autoFormFieldMessage(options) {                                                   // 11\n  options = parseOptions(options, 'afFieldMessage');                                                                   // 12\n                                                                                                                       // 13\n  return options.ss.namedContext(options.formId).keyErrorMessage(options.name);                                        // 14\n});                                                                                                                    // 15\n                                                                                                                       // 16\n/*                                                                                                                     // 17\n * afFieldIsInvalid                                                                                                    // 18\n */                                                                                                                    // 19\nregHelper('afFieldIsInvalid', function autoFormFieldIsInvalid(options) {                                               // 20\n  options = parseOptions(options, 'afFieldIsInvalid');                                                                 // 21\n                                                                                                                       // 22\n  return options.ss.namedContext(options.formId).keyIsInvalid(options.name);                                           // 23\n});                                                                                                                    // 24\n                                                                                                                       // 25\n/*                                                                                                                     // 26\n * afArrayFieldHasMoreThanMinimum                                                                                      // 27\n */                                                                                                                    // 28\nregHelper('afArrayFieldHasMoreThanMinimum', function autoFormArrayFieldHasMoreThanMinimum(options) {                   // 29\n  options = parseOptions(options, 'afArrayFieldHasMoreThanMinimum');                                                   // 30\n                                                                                                                       // 31\n  var range = arrayTracker.getMinMax(options.ss, options.name, options.minCount, options.maxCount);                    // 32\n  var visibleCount = arrayTracker.getVisibleCount(options.formId, options.name);                                       // 33\n  return (visibleCount > range.minCount);                                                                              // 34\n});                                                                                                                    // 35\n                                                                                                                       // 36\n/*                                                                                                                     // 37\n * afArrayFieldHasLessThanMaximum                                                                                      // 38\n */                                                                                                                    // 39\nregHelper('afArrayFieldHasLessThanMaximum', function autoFormArrayFieldHasLessThanMaximum(options) {                   // 40\n  options = parseOptions(options, 'afArrayFieldHasLessThanMaximum');                                                   // 41\n                                                                                                                       // 42\n  var range = arrayTracker.getMinMax(options.ss, options.name, options.minCount, options.maxCount);                    // 43\n  var visibleCount = arrayTracker.getVisibleCount(options.formId, options.name);                                       // 44\n  return (visibleCount < range.maxCount);                                                                              // 45\n});                                                                                                                    // 46\n                                                                                                                       // 47\n/*                                                                                                                     // 48\n * afFieldValueIs                                                                                                      // 49\n */                                                                                                                    // 50\nregHelper('afFieldValueIs', function autoFormFieldValueIs(options) {                                                   // 51\n  options = parseOptions(options, 'afFieldValueIs');                                                                   // 52\n                                                                                                                       // 53\n  var currentValue = AutoForm.getFieldValue(options.formId, options.name);                                             // 54\n  return currentValue === options.value;                                                                               // 55\n});                                                                                                                    // 56\n                                                                                                                       // 57\n/*                                                                                                                     // 58\n * afArrayFieldIsFirstVisible                                                                                          // 59\n */                                                                                                                    // 60\nregHelper('afArrayFieldIsFirstVisible', function autoFormArrayFieldIsFirstVisible() {                                  // 61\n  var context = this;                                                                                                  // 62\n  return arrayTracker.isFirstFieldlVisible(context.formId, context.arrayFieldName, context.index);                     // 63\n});                                                                                                                    // 64\n                                                                                                                       // 65\n/*                                                                                                                     // 66\n * afArrayFieldIsLastVisible                                                                                           // 67\n */                                                                                                                    // 68\nregHelper('afArrayFieldIsLastVisible', function autoFormArrayFieldIsLastVisible() {                                    // 69\n  var context = this;                                                                                                  // 70\n  return arrayTracker.isLastFieldlVisible(context.formId, context.arrayFieldName, context.index);                      // 71\n});                                                                                                                    // 72\n                                                                                                                       // 73\n/*                                                                                                                     // 74\n * afFieldValueContains                                                                                                // 75\n */                                                                                                                    // 76\nregHelper('afFieldValueContains', function autoFormFieldValueContains(options) {                                       // 77\n  options = parseOptions(options, 'afFieldValueContains');                                                             // 78\n                                                                                                                       // 79\n  var currentValue = AutoForm.getFieldValue(options.formId, options.name);                                             // 80\n  return _.isArray(currentValue) && (_.contains(currentValue, options.value) || options.values && _.intersection(currentValue, options.values.split(\",\")));\n});                                                                                                                    // 82\n                                                                                                                       // 83\n/*                                                                                                                     // 84\n * afFieldLabelText                                                                                                    // 85\n */                                                                                                                    // 86\nregHelper('afFieldLabelText', function autoFormFieldLabelText(options) {                                               // 87\n  options = parseOptions(options, 'afFieldLabelText');                                                                 // 88\n                                                                                                                       // 89\n  if (SimpleSchema._makeGeneric(options.name).slice(-1) === \"$\") {                                                     // 90\n    // for array items we don't want to inflect the label because                                                      // 91\n    // we will end up with a number                                                                                    // 92\n    var label = options.ss.label(options.name);                                                                        // 93\n    if (!isNaN(parseInt(label, 10))) {                                                                                 // 94\n      return null;                                                                                                     // 95\n    } else {                                                                                                           // 96\n      return label;                                                                                                    // 97\n    }                                                                                                                  // 98\n  } else {                                                                                                             // 99\n    return options.ss.label(options.name);                                                                             // 100\n  }                                                                                                                    // 101\n});                                                                                                                    // 102\n                                                                                                                       // 103\n/*                                                                                                                     // 104\n * afFieldNames                                                                                                        // 105\n */                                                                                                                    // 106\nregHelper(\"afFieldNames\", function autoFormFieldNames(options) {                                                       // 107\n  options = parseOptions(options, 'afFieldNames');                                                                     // 108\n  var ss = options.ss, name = options.name, namePlusDot, genericName, genericNamePlusDot;                              // 109\n                                                                                                                       // 110\n  if (name) {                                                                                                          // 111\n    namePlusDot = name + \".\";                                                                                          // 112\n    genericName = SimpleSchema._makeGeneric(name);                                                                     // 113\n    genericNamePlusDot = genericName + \".\";                                                                            // 114\n  }                                                                                                                    // 115\n                                                                                                                       // 116\n  // Get the list of fields we want included                                                                           // 117\n  var fieldList = options.fields || AutoForm.findAttribute(\"fields\");                                                  // 118\n  if (fieldList) {                                                                                                     // 119\n    fieldList = AutoForm.Utility.stringToArray(fieldList, 'AutoForm: fields attribute must be an array or a string containing a comma-delimited list of fields');\n                                                                                                                       // 121\n    // Take only those fields in the fieldList that are descendants of the `name` field                                // 122\n    if (name) {                                                                                                        // 123\n      // Replace generic name with real name. We assume that field names                                               // 124\n      // with $ apply to all array items. Field list will not have the                                                 // 125\n      // correct array field item number instead of $.                                                                 // 126\n      if (genericName !== name) {                                                                                      // 127\n        fieldList = _.map(fieldList, function (field) {                                                                // 128\n          if (field.indexOf(genericNamePlusDot) === 0) {                                                               // 129\n            return namePlusDot + field.slice(genericNamePlusDot.length);                                               // 130\n          }                                                                                                            // 131\n          return field;                                                                                                // 132\n        });                                                                                                            // 133\n      }                                                                                                                // 134\n                                                                                                                       // 135\n      fieldList = _.filter(fieldList, function filterFieldsByName(field) {                                             // 136\n        return field.indexOf(namePlusDot) === 0;                                                                       // 137\n      });                                                                                                              // 138\n    }                                                                                                                  // 139\n                                                                                                                       // 140\n    // If top level fields, be sure to remove any with $ in them                                                       // 141\n    else {                                                                                                             // 142\n      fieldList = _.filter(fieldList, function filterFieldsByName(field) {                                             // 143\n        return (field.slice(-2) !== '.$' && field.indexOf('.$.') === -1);                                              // 144\n      });                                                                                                              // 145\n    }                                                                                                                  // 146\n                                                                                                                       // 147\n    // First we filter out any fields that are subobjects where the                                                    // 148\n    // parent object is also in the fieldList and is NOT the current                                                   // 149\n    // field name.                                                                                                     // 150\n    // This means that if you do `fields=\"address,address.city\"` we                                                    // 151\n    // will use an afObjectField for address and include only the                                                      // 152\n    // \"city\" field within that, but if you instead do `fields=\"address.city\"`                                         // 153\n    // we will use a single field for the city, with no afObjectField                                                  // 154\n    // template around it.                                                                                             // 155\n    fieldList = _.reject(fieldList, function (field) {                                                                 // 156\n      var lastDotPos = field.lastIndexOf(\".\");                                                                         // 157\n      if (lastDotPos === -1) {                                                                                         // 158\n        return false; //keep                                                                                           // 159\n      }                                                                                                                // 160\n                                                                                                                       // 161\n      var parentField = field.slice(0, lastDotPos);                                                                    // 162\n      if (parentField.slice(-2) === \".$\") {                                                                            // 163\n        parentField = parentField.slice(0, -2);                                                                        // 164\n      }                                                                                                                // 165\n      return _.contains(fieldList, parentField) && parentField !== name && parentField !== genericName;                // 166\n    });                                                                                                                // 167\n  }                                                                                                                    // 168\n                                                                                                                       // 169\n  if (!fieldList || fieldList.length === 0) {                                                                          // 170\n    // Get list of field names that are descendants of this field's name.                                              // 171\n    // If name/genericName is undefined, this will return top-level                                                    // 172\n    // schema keys.                                                                                                    // 173\n    fieldList = ss.objectKeys(genericName);                                                                            // 174\n                                                                                                                       // 175\n    if (name) {                                                                                                        // 176\n      // Tack child field name on to end of parent field name. This                                                    // 177\n      // ensures that we keep the desired array index for array items.                                                 // 178\n      fieldList = _.map(fieldList, function (field) {                                                                  // 179\n        return name + \".\" + field;                                                                                     // 180\n      });                                                                                                              // 181\n    }                                                                                                                  // 182\n  }                                                                                                                    // 183\n                                                                                                                       // 184\n  // If user wants to omit some fields, remove those from the array                                                    // 185\n  var omitFields = options.omitFields || AutoForm.findAttribute(\"omitFields\");                                         // 186\n  if (omitFields) {                                                                                                    // 187\n    omitFields = AutoForm.Utility.stringToArray(omitFields, 'AutoForm: omitFields attribute must be an array or a string containing a comma-delimited list of fields');\n    fieldList = _.difference(fieldList, omitFields);                                                                   // 189\n    // If omitFields contains generic field names (with $) we omit those too                                           // 190\n    fieldList = _.reject(fieldList, function (f) {                                                                     // 191\n      return _.contains(omitFields, SimpleSchema._makeGeneric(f));                                                     // 192\n    });                                                                                                                // 193\n  }                                                                                                                    // 194\n                                                                                                                       // 195\n  // Filter out fields we never want                                                                                   // 196\n  fieldList = _.filter(fieldList, function shouldIncludeField(field) {                                                 // 197\n    var fieldDefs = ss.schema(field);                                                                                  // 198\n                                                                                                                       // 199\n    // Don't include fields with autoform.omit=true                                                                    // 200\n    if (fieldDefs.autoform && fieldDefs.autoform.omit === true)                                                        // 201\n      return false;                                                                                                    // 202\n                                                                                                                       // 203\n    // Don't include fields with denyInsert=true when it's an insert form                                              // 204\n    if (fieldDefs.denyInsert && options.submitType === \"insert\")                                                       // 205\n      return false;                                                                                                    // 206\n                                                                                                                       // 207\n    // Don't include fields with denyUpdate=true when it's an update form                                              // 208\n    if (fieldDefs.denyUpdate && options.submitType === \"update\")                                                       // 209\n      return false;                                                                                                    // 210\n                                                                                                                       // 211\n    return true;                                                                                                       // 212\n  });                                                                                                                  // 213\n                                                                                                                       // 214\n  // Ensure fields are not added more than once                                                                        // 215\n  fieldList = _.unique(fieldList);                                                                                     // 216\n                                                                                                                       // 217\n  return fieldList;                                                                                                    // 218\n});                                                                                                                    // 219\n                                                                                                                       // 220\n/*                                                                                                                     // 221\n * afTemplateName                                                                                                      // 222\n *                                                                                                                     // 223\n * Returns the full template name. In the simplest scenario, this is templateType_templateName                         // 224\n * as passed in. However, if templateName is not provided, it is looked up in the following                            // 225\n * manner:                                                                                                             // 226\n *                                                                                                                     // 227\n * 1. autoform.<componentType>.template from the schema (field+type override for all forms)                            // 228\n * 2. autoform.template from the schema (field override for all forms)                                                 // 229\n * 3. template-<componentType> attribute on an ancestor component within the same form (form+type for all fields)      // 230\n * 4. template attribute on an ancestor component within the same form (form specificity for all types and fields)     // 231\n * 5. Default template for component type, as set by AutoForm.setDefaultTemplateForType                                // 232\n * 6. Default template, as set by AutoForm.setDefaultTemplate.                                                         // 233\n * 7. Built-in default template, currently bootstrap-3.                                                                // 234\n */                                                                                                                    // 235\nregHelper('afTemplateName', function afTemplateNameHelper(templateType, templateName) {                                // 236\n  var self = this, result, schemaAutoFormDefs, templateFromAncestor, defaultTemplate;                                  // 237\n                                                                                                                       // 238\n  var result = templateType + '_' + templateName; // templateName might be undefined, but the result will be the same  // 239\n  if (Template[result]) {                                                                                              // 240\n    return result;                                                                                                     // 241\n  }                                                                                                                    // 242\n                                                                                                                       // 243\n  // If the attributes provided a templateName but that template didn't exist, show a warning                          // 244\n  if (templateName && AutoForm._debug) {                                                                               // 245\n    console.warn(templateType + ': \"' + templateName + '\" is not a valid template name. Falling back to a different template.');\n  }                                                                                                                    // 247\n                                                                                                                       // 248\n  // Get `autoform` object from the schema, if present.                                                                // 249\n  // Skip for quickForm because it renders a form and not a field.                                                     // 250\n  if (templateType !== 'quickForm' && self.atts && self.atts.name) {                                                   // 251\n    schemaAutoFormDefs = AutoForm.getSchemaForField(self.atts.name).autoform;                                          // 252\n  }                                                                                                                    // 253\n                                                                                                                       // 254\n  // Fallback #1: autoform.<componentType>.template from the schema                                                    // 255\n  if (schemaAutoFormDefs && schemaAutoFormDefs[templateType] && schemaAutoFormDefs[templateType].template && Template[templateType + '_' + schemaAutoFormDefs[templateType].template]) {\n    return templateType + '_' + schemaAutoFormDefs[templateType].template;                                             // 257\n  }                                                                                                                    // 258\n                                                                                                                       // 259\n  // Fallback #2: autoform.template from the schema                                                                    // 260\n  if (schemaAutoFormDefs && schemaAutoFormDefs.template && Template[templateType + '_' + schemaAutoFormDefs.template]) {\n    return templateType + '_' + schemaAutoFormDefs.template;                                                           // 262\n  }                                                                                                                    // 263\n                                                                                                                       // 264\n  // Fallback #3: template-<componentType> attribute on an ancestor component within the same form                     // 265\n  templateFromAncestor = AutoForm.findAttribute(\"template-\" + templateType);                                           // 266\n  if (templateFromAncestor && Template[templateType + '_' + templateFromAncestor]) {                                   // 267\n    return templateType + '_' + templateFromAncestor;                                                                  // 268\n  }                                                                                                                    // 269\n                                                                                                                       // 270\n  // Fallback #4: template attribute on an ancestor component within the same form                                     // 271\n  templateFromAncestor = AutoForm.findAttribute(\"template\");                                                           // 272\n  if (templateFromAncestor && Template[templateType + '_' + templateFromAncestor]) {                                   // 273\n    return templateType + '_' + templateFromAncestor;                                                                  // 274\n  }                                                                                                                    // 275\n                                                                                                                       // 276\n  // Fallback #5: Default template for component type, as set by AutoForm.setDefaultTemplateForType                    // 277\n  defaultTemplate = AutoForm.getDefaultTemplateForType(templateType);                                                  // 278\n  if (defaultTemplate && Template[templateType + '_' + defaultTemplate]) {                                             // 279\n    return templateType + '_' + defaultTemplate;                                                                       // 280\n  }                                                                                                                    // 281\n                                                                                                                       // 282\n  // Fallback #6: Default template, as set by AutoForm.setDefaultTemplate                                              // 283\n  defaultTemplate = AutoForm.getDefaultTemplate();                                                                     // 284\n  if (defaultTemplate && Template[templateType + '_' + defaultTemplate]) {                                             // 285\n    return templateType + '_' + defaultTemplate;                                                                       // 286\n  }                                                                                                                    // 287\n                                                                                                                       // 288\n  // Fallback #7: hard-coded default                                                                                   // 289\n  return \"bootstrap3\";                                                                                                 // 290\n});                                                                                                                    // 291\n                                                                                                                       // 292\n/*                                                                                                                     // 293\n * PRIVATE                                                                                                             // 294\n */                                                                                                                    // 295\n                                                                                                                       // 296\nfunction parseOptions(options, helperName) {                                                                           // 297\n  var hash = (options || {}).hash || {};                                                                               // 298\n  // Find the autoform context                                                                                         // 299\n  var afContext = AutoForm.find(helperName);                                                                           // 300\n  // Call getDefs for side effect of throwing errors when name is not in schema                                        // 301\n  hash.name && AutoForm.Utility.getDefs(afContext.ss, hash.name);                                                      // 302\n  return _.extend({}, afContext, hash);                                                                                // 303\n}                                                                                                                      // 304\n                                                                                                                       // 305\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 1475\n}).call(this);                                                       // 1476\n                                                                     // 1477\n                                                                     // 1478\n                                                                     // 1479\n                                                                     // 1480\n                                                                     // 1481\n                                                                     // 1482\n(function () {                                                       // 1483\n                                                                     // 1484\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/autoform-validation.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*                                                                                                                     // 1\n * all form validation logic is here                                                                                   // 2\n */                                                                                                                    // 3\n                                                                                                                       // 4\nvalidateFormDoc = function validateFormDoc(doc, isModifier, formId, ss, docId, key) {                                  // 5\n  var ec = {                                                                                                           // 6\n    userId: (Meteor.userId && Meteor.userId()) || null,                                                                // 7\n    isInsert: !isModifier,                                                                                             // 8\n    isUpdate: !!isModifier,                                                                                            // 9\n    isUpsert: false,                                                                                                   // 10\n    isFromTrustedCode: false,                                                                                          // 11\n    docId: docId                                                                                                       // 12\n  };                                                                                                                   // 13\n                                                                                                                       // 14\n  // Get a version of the doc that has auto values to validate here. We                                                // 15\n  // don't want to actually send any auto values to the server because                                                 // 16\n  // we ultimately want them generated on the server                                                                   // 17\n  var docForValidation = ss.clean(_.clone(doc), {                                                                      // 18\n    isModifier: isModifier,                                                                                            // 19\n    filter: false,                                                                                                     // 20\n    autoConvert: false,                                                                                                // 21\n    trimStrings: false,                                                                                                // 22\n    extendAutoValueContext: ec                                                                                         // 23\n  });                                                                                                                  // 24\n                                                                                                                       // 25\n  // Validate                                                                                                          // 26\n  // If `key` is provided, we validate that key/field only                                                             // 27\n  if (key) {                                                                                                           // 28\n    return ss.namedContext(formId).validateOne(docForValidation, key, {                                                // 29\n      modifier: isModifier,                                                                                            // 30\n      extendedCustomContext: ec                                                                                        // 31\n    });                                                                                                                // 32\n  } else {                                                                                                             // 33\n    return ss.namedContext(formId).validate(docForValidation, {                                                        // 34\n      modifier: isModifier,                                                                                            // 35\n      extendedCustomContext: ec                                                                                        // 36\n    });                                                                                                                // 37\n  }                                                                                                                    // 38\n};                                                                                                                     // 39\n                                                                                                                       // 40\n_validateForm = function _validateForm(formId, formDetails, formDocs, useCollectionSchema) {                           // 41\n  var ss, docId, isValid;                                                                                              // 42\n                                                                                                                       // 43\n  if (formDetails.validationType === 'none')                                                                           // 44\n    return true;                                                                                                       // 45\n                                                                                                                       // 46\n  // We use the schema for the `schema` attribute if present,                                                          // 47\n  // else the schema for the collection. If there is a `schema`                                                        // 48\n  // attribute but you want to force validation against the                                                            // 49\n  // collection's schema instead, pass useCollectionSchema=true                                                        // 50\n  ss = (useCollectionSchema && formDetails.collection) ? formDetails.collection.simpleSchema() : formDetails.ss;       // 51\n                                                                                                                       // 52\n  docId = formDetails.doc && formDetails.doc._id || null;                                                              // 53\n                                                                                                                       // 54\n  // Perform validation                                                                                                // 55\n  if (formDetails.submitType === \"update\") {                                                                           // 56\n    // For a type=\"update\" form, we validate the modifier. We don't want to throw                                      // 57\n    // errors about missing required fields, etc.                                                                      // 58\n    isValid = validateFormDoc(formDocs.updateDoc, true, formId, ss, docId);                                            // 59\n  } else {                                                                                                             // 60\n    // For any other type of form, we validate the document.                                                           // 61\n    isValid = validateFormDoc(formDocs.insertDoc, false, formId, ss, docId);                                           // 62\n  }                                                                                                                    // 63\n                                                                                                                       // 64\n  if (!isValid) {                                                                                                      // 65\n    selectFirstInvalidField(formId, ss);                                                                               // 66\n  }                                                                                                                    // 67\n                                                                                                                       // 68\n  return isValid;                                                                                                      // 69\n};                                                                                                                     // 70\n                                                                                                                       // 71\n_validateField = function _validateField(key, template, skipEmpty, onlyIfAlreadyInvalid) {                             // 72\n  // Due to throttling, this can be called after the autoForm template is destroyed.                                   // 73\n  // If that happens, we exit without error.                                                                           // 74\n  if (!template || !template.view._domrange || template.view.isDestroyed) {                                            // 75\n    return;                                                                                                            // 76\n  }                                                                                                                    // 77\n                                                                                                                       // 78\n  var context = template.data;                                                                                         // 79\n  var formId = context.id || defaultFormId;                                                                            // 80\n  var formDetails = formData[formId];                                                                                  // 81\n  var docId = formDetails.doc && formDetails.doc._id || null;                                                          // 82\n  var ss = formDetails.ss;                                                                                             // 83\n                                                                                                                       // 84\n  if (onlyIfAlreadyInvalid && ss.namedContext(formId).isValid()) {                                                     // 85\n    return; //skip validation                                                                                          // 86\n  }                                                                                                                    // 87\n                                                                                                                       // 88\n  // Create a document based on all the values of all the inputs on the form                                           // 89\n  var formDocs = getFormValues(template, formId, ss);                                                                  // 90\n                                                                                                                       // 91\n  // Clean and validate doc                                                                                            // 92\n  if (formDetails.submitType === \"update\") {                                                                           // 93\n    var docToValidate = formDocs.updateDoc;                                                                            // 94\n    var isModifier = true;                                                                                             // 95\n  } else {                                                                                                             // 96\n    var docToValidate = formDocs.insertDoc;                                                                            // 97\n    var isModifier = false;                                                                                            // 98\n  }                                                                                                                    // 99\n                                                                                                                       // 100\n  // Skip validation if skipEmpty is true and the field we're validating                                               // 101\n  // has no value.                                                                                                     // 102\n  if (skipEmpty && !AutoForm.Utility.objAffectsKey(docToValidate, key))                                                // 103\n    return true; //skip validation                                                                                     // 104\n                                                                                                                       // 105\n  return validateFormDoc(docToValidate, isModifier, formId, ss, docId, key);                                           // 106\n};                                                                                                                     // 107\n                                                                                                                       // 108\n// Throttle field validation to occur at most every 300ms,                                                             // 109\n// with leading and trailing calls.                                                                                    // 110\nvalidateField = _.throttle(_validateField, 300);                                                                       // 111\n                                                                                                                       // 112\n// Selects the focus the first field with an error                                                                     // 113\nselectFirstInvalidField = function selectFirstInvalidField(formId, ss) {                                               // 114\n  var ctx = ss.namedContext(formId), template, fields;                                                                 // 115\n  if (!ctx.isValid()) {                                                                                                // 116\n    template = templatesById[formId];                                                                                  // 117\n    fields = getAllFieldsInForm(template);                                                                             // 118\n    fields.each(function () {                                                                                          // 119\n      var f = $(this);                                                                                                 // 120\n      if (ctx.keyIsInvalid(f.attr('data-schema-key'))) {                                                               // 121\n        f.focus();                                                                                                     // 122\n        return false;                                                                                                  // 123\n      }                                                                                                                // 124\n    });                                                                                                                // 125\n  }                                                                                                                    // 126\n};                                                                                                                     // 127\n                                                                                                                       // 128\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 1620\n}).call(this);                                                       // 1621\n                                                                     // 1622\n                                                                     // 1623\n                                                                     // 1624\n                                                                     // 1625\n                                                                     // 1626\n                                                                     // 1627\n(function () {                                                       // 1628\n                                                                     // 1629\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/autoform-inputs.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm */                                                                                                  // 1\n/* global getInputType:true */                                                                                         // 2\n/* global getFieldValue:true */                                                                                        // 3\n/* global getFormValues:true */                                                                                        // 4\n/* global formData */                                                                                                  // 5\n/* global getInputValue:true */                                                                                        // 6\n/* global getFieldsValues:true */                                                                                      // 7\n/* global getAllFieldsInForm:true */                                                                                   // 8\n/* global Hooks */                                                                                                     // 9\n/* global getInputData:true */                                                                                         // 10\n/* global updateTrackedFieldValue:true */                                                                              // 11\n/* global updateAllTrackedFieldValues:true */                                                                          // 12\n/* global formValues */                                                                                                // 13\n                                                                                                                       // 14\nfunction getFieldsValues(fields, ss) {                                                                                 // 15\n  var doc = {};                                                                                                        // 16\n  fields.each(function formValuesEach() {                                                                              // 17\n    var fieldName, val = AutoForm.getInputValue(this, ss);                                                             // 18\n    if (val !== void 0) {                                                                                              // 19\n      // Get the field/schema key name                                                                                 // 20\n      fieldName = $(this).attr(\"data-schema-key\");                                                                     // 21\n      doc[fieldName] = val;                                                                                            // 22\n    }                                                                                                                  // 23\n  });                                                                                                                  // 24\n  return doc;                                                                                                          // 25\n}                                                                                                                      // 26\n                                                                                                                       // 27\n/*                                                                                                                     // 28\n * package scope functions                                                                                             // 29\n */                                                                                                                    // 30\n                                                                                                                       // 31\n// Determines based on different options what type of input/control should be used                                     // 32\ngetInputType = function getInputType(atts) {                                                                           // 33\n\tvar expectsArray = false, defs, schemaType;                                                                           // 34\n                                                                                                                       // 35\n  atts = AutoForm.Utility.normalizeContext(atts, 'afFieldInput').atts;                                                 // 36\n                                                                                                                       // 37\n  // If a `type` attribute is specified, we just use that                                                              // 38\n  if (atts.type) {                                                                                                     // 39\n    return atts.type;                                                                                                  // 40\n  }                                                                                                                    // 41\n                                                                                                                       // 42\n\t// Get schema definition, using the item definition for array fields                                                  // 43\n\tdefs = AutoForm.getSchemaForField(atts.name);                                                                         // 44\n  schemaType = defs.type;                                                                                              // 45\n  if (schemaType === Array) {                                                                                          // 46\n    expectsArray = true;                                                                                               // 47\n    defs = AutoForm.getSchemaForField(atts.name + \".$\");                                                               // 48\n    schemaType = defs.type;                                                                                            // 49\n  }                                                                                                                    // 50\n                                                                                                                       // 51\n  // Based on the `type` attribute, the `type` from the schema, and/or                                                 // 52\n  // other characteristics such as regEx and whether an array is expected,                                             // 53\n  // choose which type string to return.                                                                               // 54\n  // TODO allow outside packages to extend/override this logic.                                                        // 55\n  var type = \"text\";                                                                                                   // 56\n  if (atts.options) {                                                                                                  // 57\n    if (atts.noselect) {                                                                                               // 58\n      // Does the schema expect the value of the field to be an array?                                                 // 59\n      // If so, use a check box group, which will return an array value.                                               // 60\n      if (expectsArray) {                                                                                              // 61\n        type = \"select-checkbox\";                                                                                      // 62\n      } else {                                                                                                         // 63\n        type = \"select-radio\";                                                                                         // 64\n      }                                                                                                                // 65\n    } else {                                                                                                           // 66\n      if (expectsArray) {                                                                                              // 67\n        type = \"select-multiple\";                                                                                      // 68\n      } else {                                                                                                         // 69\n        type = \"select\";                                                                                               // 70\n      }                                                                                                                // 71\n    }                                                                                                                  // 72\n  } else if (schemaType === String && atts.rows) {                                                                     // 73\n    type = \"textarea\";                                                                                                 // 74\n  } else if (schemaType === Number) {                                                                                  // 75\n    type = \"number\";                                                                                                   // 76\n  } else if (schemaType === Date) {                                                                                    // 77\n    type = \"date\";                                                                                                     // 78\n  } else if (schemaType === Boolean) {                                                                                 // 79\n    type = \"boolean-checkbox\";                                                                                         // 80\n  }                                                                                                                    // 81\n  return type;                                                                                                         // 82\n};                                                                                                                     // 83\n                                                                                                                       // 84\ngetFieldValue = function getFieldValue(template, key) {                                                                // 85\n  var formInfo = formData[template.data.id];                                                                           // 86\n  var doc = getFieldsValues(getAllFieldsInForm(template).filter('[data-schema-key=\"' + key + '\"], [data-schema-key^=\"' + key + '.\"]'), formInfo.ss);\n  return doc && doc[key];                                                                                              // 88\n};                                                                                                                     // 89\n                                                                                                                       // 90\ngetFormValues = function getFormValues(template, formId, ss) {                                                         // 91\n  var formInfo = formData[formId];                                                                                     // 92\n  // By default, we do not keep empty strings                                                                          // 93\n  var keepEmptyStrings = false;                                                                                        // 94\n  if (formInfo.removeEmptyStrings === false) {                                                                         // 95\n    keepEmptyStrings = true;                                                                                           // 96\n  }                                                                                                                    // 97\n  // By default, we do filter                                                                                          // 98\n  var filter = true;                                                                                                   // 99\n  if (formInfo.filter === false) {                                                                                     // 100\n    filter = false;                                                                                                    // 101\n  }                                                                                                                    // 102\n  // By default, we do autoConvert                                                                                     // 103\n  var autoConvert = true;                                                                                              // 104\n  if (formInfo.autoConvert === false) {                                                                                // 105\n    autoConvert = false;                                                                                               // 106\n  }                                                                                                                    // 107\n  // By default, we do trimStrings                                                                                     // 108\n  var trimStrings = true;                                                                                              // 109\n  if (formInfo.trimStrings === false) {                                                                                // 110\n    trimStrings = false;                                                                                               // 111\n  }                                                                                                                    // 112\n                                                                                                                       // 113\n  // Build doc from field values                                                                                       // 114\n  var doc = getFieldsValues(getAllFieldsInForm(template), ss);                                                         // 115\n                                                                                                                       // 116\n  // Expand the object                                                                                                 // 117\n  doc = AutoForm.Utility.expandObj(doc);                                                                               // 118\n                                                                                                                       // 119\n  // As array items are removed, gaps can appear in the numbering,                                                     // 120\n  // which results in arrays that have undefined items. Here we                                                        // 121\n  // remove any array items that are undefined.                                                                        // 122\n  AutoForm.Utility.compactArrays(doc);                                                                                 // 123\n                                                                                                                       // 124\n  // When all fields that comprise a sub-object are empty, we should unset                                             // 125\n  // the whole subobject and not complain about required fields in it. For example,                                    // 126\n  // if `profile.address` has several properties but they are all null or undefined,                                   // 127\n  // we will set `profile.address=null`. This ensures that we don't get incorrect validation                           // 128\n  // errors about required fields that are children of optional objects.                                               // 129\n  AutoForm.Utility.bubbleEmpty(doc, keepEmptyStrings);                                                                 // 130\n                                                                                                                       // 131\n  // Pass expanded doc through formToDoc hooks                                                                         // 132\n  var hookCtx = {                                                                                                      // 133\n    template: template,                                                                                                // 134\n    formId: formId                                                                                                     // 135\n  };                                                                                                                   // 136\n  var transforms = Hooks.getHooks(formId, 'formToDoc');                                                                // 137\n  _.each(transforms, function formValuesTransform(transform) {                                                         // 138\n    doc = transform.call(hookCtx, doc, ss, formId);                                                                    // 139\n  });                                                                                                                  // 140\n                                                                                                                       // 141\n  // We return doc, insertDoc, and updateDoc.                                                                          // 142\n  // For insertDoc, delete any properties that are null, undefined, or empty strings.                                  // 143\n  // For updateDoc, convert to modifier object with $set and $unset.                                                   // 144\n  // Do not add auto values to either.                                                                                 // 145\n  var result = {                                                                                                       // 146\n    insertDoc: ss.clean(AutoForm.Utility.cleanNulls(doc, false, keepEmptyStrings), {                                   // 147\n      isModifier: false,                                                                                               // 148\n      getAutoValues: false,                                                                                            // 149\n      filter: filter,                                                                                                  // 150\n      autoConvert: autoConvert,                                                                                        // 151\n      trimStrings: trimStrings                                                                                         // 152\n    }),                                                                                                                // 153\n    updateDoc: ss.clean(AutoForm.Utility.docToModifier(doc, keepEmptyStrings), {                                       // 154\n      isModifier: true,                                                                                                // 155\n      getAutoValues: false,                                                                                            // 156\n      filter: filter,                                                                                                  // 157\n      autoConvert: autoConvert,                                                                                        // 158\n      trimStrings: trimStrings                                                                                         // 159\n    })                                                                                                                 // 160\n  };                                                                                                                   // 161\n  return result;                                                                                                       // 162\n};                                                                                                                     // 163\n                                                                                                                       // 164\n/*                                                                                                                     // 165\n * Gets the value that should be shown/selected in the input. Returns                                                  // 166\n * a string, a boolean, or an array of strings. The value used,                                                        // 167\n * in order of preference, is one of:                                                                                  // 168\n * * The `value` attribute provided                                                                                    // 169\n * * The value that is set in the `doc` provided on the containing autoForm                                            // 170\n * * The `defaultValue` from the schema                                                                                // 171\n */                                                                                                                    // 172\ngetInputValue = function getInputValue(atts, value, mDoc, defaultValue, typeDefs) {                                    // 173\n  if (typeof value === \"undefined\") {                                                                                  // 174\n    // Get the value for this key in the current document                                                              // 175\n    if (mDoc) {                                                                                                        // 176\n      var valueInfo = mDoc.getInfoForKey(atts.name);                                                                   // 177\n      if (valueInfo) {                                                                                                 // 178\n        value = valueInfo.value;                                                                                       // 179\n      }                                                                                                                // 180\n    }                                                                                                                  // 181\n                                                                                                                       // 182\n    // Only if there is no current document, use the schema defaultValue                                               // 183\n    else {                                                                                                             // 184\n      value = defaultValue;                                                                                            // 185\n    }                                                                                                                  // 186\n  }                                                                                                                    // 187\n                                                                                                                       // 188\n  // Change null or undefined to an empty string                                                                       // 189\n  value = (value === null || value === void 0) ? '' : value;                                                           // 190\n                                                                                                                       // 191\n  // If the component expects the value to be an array, and it's not, make it one                                      // 192\n  if (typeDefs.valueIsArray && !_.isArray(value)) {                                                                    // 193\n    if (typeof value === \"string\") {                                                                                   // 194\n      value = value.split(',');                                                                                        // 195\n    } else {                                                                                                           // 196\n      value = [value];                                                                                                 // 197\n    }                                                                                                                  // 198\n  }                                                                                                                    // 199\n                                                                                                                       // 200\n  // At this point we have a value or an array of values.                                                              // 201\n  // Run through the components valueIn function if we have one.                                                       // 202\n  // It should then be in whatever format the component expects.                                                       // 203\n  if (typeof typeDefs.valueIn === \"function\") {                                                                        // 204\n    value = typeDefs.valueIn(value, atts);                                                                             // 205\n  }                                                                                                                    // 206\n                                                                                                                       // 207\n  return value;                                                                                                        // 208\n};                                                                                                                     // 209\n                                                                                                                       // 210\n/*                                                                                                                     // 211\n * Builds the data context that the input component will have.                                                         // 212\n */                                                                                                                    // 213\ngetInputData = function getInputData(defs, hash, value, label, submitType) {                                           // 214\n  var schemaType = defs.type;                                                                                          // 215\n                                                                                                                       // 216\n  /*                                                                                                                   // 217\n   * Get HTML attributes                                                                                               // 218\n   */                                                                                                                  // 219\n                                                                                                                       // 220\n  // We don't want to alter the original hash, so we clone it and                                                      // 221\n  // remove some stuff that should not be HTML attributes.                                                             // 222\n  var inputAtts = _.omit(hash,                                                                                         // 223\n          \"autoform\",                                                                                                  // 224\n          \"type\",                                                                                                      // 225\n          \"value\",                                                                                                     // 226\n          \"noselect\",                                                                                                  // 227\n          \"options\",                                                                                                   // 228\n          \"template\");                                                                                                 // 229\n                                                                                                                       // 230\n  // Add required if required                                                                                          // 231\n  if (typeof inputAtts.required === \"undefined\" && !defs.optional) {                                                   // 232\n    inputAtts.required = \"\";                                                                                           // 233\n  }                                                                                                                    // 234\n                                                                                                                       // 235\n  // Add disabled or readonly if the form has that submit type                                                         // 236\n  if (submitType === \"disabled\") {                                                                                     // 237\n    inputAtts.disabled = \"\";                                                                                           // 238\n  } else if (submitType === \"readonly\") {                                                                              // 239\n    inputAtts.readonly = \"\";                                                                                           // 240\n  }                                                                                                                    // 241\n                                                                                                                       // 242\n   // Add data-schema-key to every type of element                                                                     // 243\n  inputAtts['data-schema-key'] = inputAtts.name;                                                                       // 244\n                                                                                                                       // 245\n  // Set placeholder to label from schema if requested.                                                                // 246\n  // We check hash.placeholder instead of inputAtts.placeholder because                                                // 247\n  // we're setting inputAtts.placeholder, so it wouldn't be the same on                                                // 248\n  // subsequent reactive runs of this function.                                                                        // 249\n  if (hash.placeholder === \"schemaLabel\") {                                                                            // 250\n    inputAtts.placeholder = label;                                                                                     // 251\n  }                                                                                                                    // 252\n                                                                                                                       // 253\n  // To enable reactively toggling boolean attributes                                                                  // 254\n  // in a simple way, we add the attributes to the HTML                                                                // 255\n  // only if their value is `true`. That is, unlike in                                                                 // 256\n  // HTML, their mere presence does not matter.                                                                        // 257\n  _.each([\"disabled\", \"readonly\", \"checked\", \"required\", \"autofocus\"], function (booleanProp) {                        // 258\n    if (!_.has(hash, booleanProp)) {                                                                                   // 259\n      return;                                                                                                          // 260\n    }                                                                                                                  // 261\n                                                                                                                       // 262\n    // For historical reasons, we treat the string \"true\" and an empty string as `true`, too.                          // 263\n    // But an empty string value results in the cleanest rendered output for boolean props,                            // 264\n    // so we standardize as that.                                                                                      // 265\n    if (hash[booleanProp] === true || hash[booleanProp] === \"true\" || hash[booleanProp] === \"\") {                      // 266\n      inputAtts[booleanProp] = \"\";                                                                                     // 267\n    } else {                                                                                                           // 268\n      // If the value is anything else, we don't render it                                                             // 269\n      delete inputAtts[booleanProp];                                                                                   // 270\n    }                                                                                                                  // 271\n  });                                                                                                                  // 272\n                                                                                                                       // 273\n  /*                                                                                                                   // 274\n   * Get select options                                                                                                // 275\n   */                                                                                                                  // 276\n                                                                                                                       // 277\n  var selectOptions = hash.options;                                                                                    // 278\n                                                                                                                       // 279\n  // Handle options=\"allowed\"                                                                                          // 280\n  if (selectOptions === \"allowed\") {                                                                                   // 281\n    selectOptions = _.map(defs.allowedValues, function(v) {                                                            // 282\n      var label = v;                                                                                                   // 283\n      if (hash.capitalize && v.length > 0 && schemaType === String) {                                                  // 284\n        label = v.charAt(0).toUpperCase() + v.slice(1).toLowerCase();                                                  // 285\n      }                                                                                                                // 286\n                                                                                                                       // 287\n      return {label: label, value: v};                                                                                 // 288\n    });                                                                                                                // 289\n  }                                                                                                                    // 290\n  // If options are specified in the schema, they may be a function                                                    // 291\n  // that has not yet been evaluated.                                                                                  // 292\n  else if (typeof selectOptions === \"function\") {                                                                      // 293\n    selectOptions = selectOptions();                                                                                   // 294\n  }                                                                                                                    // 295\n  // Hashtable                                                                                                         // 296\n  if (_.isObject(selectOptions) && !_.isArray(selectOptions)) {                                                        // 297\n    selectOptions = _.map(selectOptions, function(v, k) {                                                              // 298\n      return {label: v, value: schemaType(k)};                                                                         // 299\n    });                                                                                                                // 300\n  }                                                                                                                    // 301\n                                                                                                                       // 302\n  /*                                                                                                                   // 303\n   * Return the context. This is the object that becomes `this` in the                                                 // 304\n   * input type template.                                                                                              // 305\n   */                                                                                                                  // 306\n                                                                                                                       // 307\n  return {                                                                                                             // 308\n    name: inputAtts.name,                                                                                              // 309\n    schemaType: schemaType,                                                                                            // 310\n    min: (typeof defs.min === \"function\") ? defs.min() : defs.min,                                                     // 311\n    max: (typeof defs.max === \"function\") ? defs.max() : defs.max,                                                     // 312\n    decimal: defs.decimal,                                                                                             // 313\n    value: value,                                                                                                      // 314\n    atts: inputAtts,                                                                                                   // 315\n    selectOptions: selectOptions                                                                                       // 316\n  };                                                                                                                   // 317\n};                                                                                                                     // 318\n                                                                                                                       // 319\nupdateTrackedFieldValue = function updateTrackedFieldValue(formId, key) {                                              // 320\n  formValues[formId] = formValues[formId] || {};                                                                       // 321\n  formValues[formId][key] = formValues[formId][key] || new Tracker.Dependency();                                       // 322\n  formValues[formId][key].changed();                                                                                   // 323\n};                                                                                                                     // 324\n                                                                                                                       // 325\nupdateAllTrackedFieldValues = function updateAllTrackedFieldValues(formId) {                                           // 326\n  _.each(formValues[formId], function (o, key) {                                                                       // 327\n    updateTrackedFieldValue(formId, key);                                                                              // 328\n  });                                                                                                                  // 329\n};                                                                                                                     // 330\n                                                                                                                       // 331\ngetAllFieldsInForm = function getAllFieldsInForm(template) {                                                           // 332\n  // Get all elements with `data-schema-key` attribute, unless disabled                                                // 333\n  return template.$(\"[data-schema-key]\").not(\"[disabled]\");                                                            // 334\n  // Exclude fields in sub-forms, since they will belong to a different AutoForm and schema.                           // 335\n  // TODO need some selector/filter that actually works correctly for excluding subforms                               // 336\n  // return template.$('[data-schema-key]').not(\"[disabled]\").not(template.$('form form [data-schema-key]'));          // 337\n};                                                                                                                     // 338\n                                                                                                                       // 339\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 1976\n}).call(this);                                                       // 1977\n                                                                     // 1978\n                                                                     // 1979\n                                                                     // 1980\n                                                                     // 1981\n                                                                     // 1982\n                                                                     // 1983\n(function () {                                                       // 1984\n                                                                     // 1985\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/autoform-api.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm:true */                                                                                             // 1\n/* global formPreserve */                                                                                              // 2\n/* global Utility */                                                                                                   // 3\n/* global Hooks */                                                                                                     // 4\n/* global templatesById */                                                                                             // 5\n/* global deps */                                                                                                      // 6\n/* global globalDefaultTemplate:true */                                                                                // 7\n/* global defaultTypeTemplates:true */                                                                                 // 8\n/* global SimpleSchema */                                                                                              // 9\n/* global getFormValues */                                                                                             // 10\n/* global formValues */                                                                                                // 11\n/* global formData */                                                                                                  // 12\n/* global inputTypeDefinitions */                                                                                      // 13\n/* global _validateField */                                                                                            // 14\n/* global _validateForm */                                                                                             // 15\n/* global arrayTracker */                                                                                              // 16\n/* global getInputType */                                                                                              // 17\n/* global formDeps */                                                                                                  // 18\n                                                                                                                       // 19\n// This file defines the public, exported API                                                                          // 20\n                                                                                                                       // 21\nAutoForm = AutoForm || {}; //exported                                                                                  // 22\n                                                                                                                       // 23\nAutoForm.formPreserve = formPreserve;                                                                                  // 24\n                                                                                                                       // 25\nAutoForm.Utility = Utility;                                                                                            // 26\n                                                                                                                       // 27\n/**                                                                                                                    // 28\n * @method AutoForm.addHooks                                                                                           // 29\n * @public                                                                                                             // 30\n * @param {String[]|String|null} formIds Form `id` or array of form IDs to which these hooks apply. Specify `null` to add hooks that will run for every form.\n * @param {Object} hooks Hooks to add, where supported names are \"before\", \"after\", \"formToDoc\", \"docToForm\", \"onSubmit\", \"onSuccess\", and \"onError\".\n * @returns {undefined}                                                                                                // 33\n *                                                                                                                     // 34\n * Defines hooks to be used by one or more forms. Extends hooks lists if called multiple times for the same            // 35\n * form.                                                                                                               // 36\n */                                                                                                                    // 37\nAutoForm.addHooks = function autoFormAddHooks(formIds, hooks, replace) {                                               // 38\n  if (typeof formIds === \"string\") {                                                                                   // 39\n    formIds = [formIds];                                                                                               // 40\n  }                                                                                                                    // 41\n                                                                                                                       // 42\n  // If formIds is null, add global hooks                                                                              // 43\n  if (!formIds) {                                                                                                      // 44\n    Hooks.addHooksToList(Hooks.global, hooks, replace);                                                                // 45\n  } else {                                                                                                             // 46\n    _.each(formIds, function (formId) {                                                                                // 47\n                                                                                                                       // 48\n      // Init the hooks object if not done yet                                                                         // 49\n      Hooks.form[formId] = Hooks.form[formId] || {                                                                     // 50\n        before: {},                                                                                                    // 51\n        after: {},                                                                                                     // 52\n        formToDoc: [],                                                                                                 // 53\n        docToForm: [],                                                                                                 // 54\n        onSubmit: [],                                                                                                  // 55\n        onSuccess: [],                                                                                                 // 56\n        onError: [],                                                                                                   // 57\n        beginSubmit: [],                                                                                               // 58\n        endSubmit: []                                                                                                  // 59\n      };                                                                                                               // 60\n                                                                                                                       // 61\n      Hooks.addHooksToList(Hooks.form[formId], hooks, replace);                                                        // 62\n    });                                                                                                                // 63\n  }                                                                                                                    // 64\n};                                                                                                                     // 65\n                                                                                                                       // 66\n/**                                                                                                                    // 67\n * @method AutoForm.hooks                                                                                              // 68\n * @public                                                                                                             // 69\n * @param {Object} hooks                                                                                               // 70\n * @returns {undefined}                                                                                                // 71\n *                                                                                                                     // 72\n * Defines hooks by form id. Extends hooks lists if called multiple times for the same                                 // 73\n * form.                                                                                                               // 74\n */                                                                                                                    // 75\nAutoForm.hooks = function autoFormHooks(hooks, replace) {                                                              // 76\n  _.each(hooks, function(hooksObj, formId) {                                                                           // 77\n    AutoForm.addHooks(formId, hooksObj, replace);                                                                      // 78\n  });                                                                                                                  // 79\n};                                                                                                                     // 80\n                                                                                                                       // 81\n/**                                                                                                                    // 82\n * @method AutoForm.resetForm                                                                                          // 83\n * @public                                                                                                             // 84\n * @param {String} formId                                                                                              // 85\n * @param {TemplateInstance} [template] Looked up if not provided. Pass in for efficiency.                             // 86\n * @returns {undefined}                                                                                                // 87\n *                                                                                                                     // 88\n * Resets an autoform, including resetting validation errors. The same as clicking the reset button for an autoform.   // 89\n */                                                                                                                    // 90\nAutoForm.resetForm = function autoFormResetForm(formId, template) {                                                    // 91\n  template = template || templatesById[formId];                                                                        // 92\n                                                                                                                       // 93\n  if (template && template.view._domrange) {                                                                           // 94\n    template.$(\"form\")[0].reset();                                                                                     // 95\n  }                                                                                                                    // 96\n};                                                                                                                     // 97\n                                                                                                                       // 98\n/**                                                                                                                    // 99\n * @method AutoForm.setDefaultTemplate                                                                                 // 100\n * @public                                                                                                             // 101\n * @param {String} template                                                                                            // 102\n */                                                                                                                    // 103\nAutoForm.setDefaultTemplate = function autoFormSetDefaultTemplate(template) {                                          // 104\n  globalDefaultTemplate = template;                                                                                    // 105\n  deps.defaultTemplate.changed();                                                                                      // 106\n};                                                                                                                     // 107\n                                                                                                                       // 108\n/**                                                                                                                    // 109\n * @method AutoForm.getDefaultTemplate                                                                                 // 110\n * @public                                                                                                             // 111\n *                                                                                                                     // 112\n * Reactive.                                                                                                           // 113\n */                                                                                                                    // 114\nAutoForm.getDefaultTemplate = function autoFormGetDefaultTemplate() {                                                  // 115\n  deps.defaultTemplate.depend();                                                                                       // 116\n  return globalDefaultTemplate;                                                                                        // 117\n};                                                                                                                     // 118\n                                                                                                                       // 119\n/**                                                                                                                    // 120\n * @method AutoForm.setDefaultTemplateForType                                                                          // 121\n * @public                                                                                                             // 122\n * @param {String} type                                                                                                // 123\n * @param {String} template                                                                                            // 124\n */                                                                                                                    // 125\nAutoForm.setDefaultTemplateForType = function autoFormSetDefaultTemplateForType(type, template) {                      // 126\n  if (!deps.defaultTypeTemplates[type]) {                                                                              // 127\n    deps.defaultTypeTemplates[type] = new Tracker.Dependency();                                                        // 128\n  }                                                                                                                    // 129\n  if (template !== null && !Template[type + \"_\" + template]) {                                                         // 130\n    throw new Error(\"setDefaultTemplateForType can't set default template to \\\"\" + template + \"\\\" for type \\\"\" + type + \"\\\" because there is no defined template with the name \\\"\" + type + \"_\" + template + \"\\\"\");\n  }                                                                                                                    // 132\n  defaultTypeTemplates[type] = template;                                                                               // 133\n  deps.defaultTypeTemplates[type].changed();                                                                           // 134\n};                                                                                                                     // 135\n                                                                                                                       // 136\n/**                                                                                                                    // 137\n * @method AutoForm.getDefaultTemplateForType                                                                          // 138\n * @public                                                                                                             // 139\n * @param {String} type                                                                                                // 140\n * @return {String} Template name                                                                                      // 141\n *                                                                                                                     // 142\n * Reactive.                                                                                                           // 143\n */                                                                                                                    // 144\nAutoForm.getDefaultTemplateForType = function autoFormGetDefaultTemplateForType(type) {                                // 145\n  if (!deps.defaultTypeTemplates[type]) {                                                                              // 146\n    deps.defaultTypeTemplates[type] = new Tracker.Dependency();                                                        // 147\n  }                                                                                                                    // 148\n  deps.defaultTypeTemplates[type].depend();                                                                            // 149\n  return defaultTypeTemplates[type];                                                                                   // 150\n};                                                                                                                     // 151\n                                                                                                                       // 152\n/**                                                                                                                    // 153\n * @method AutoForm.getFormValues                                                                                      // 154\n * @public                                                                                                             // 155\n * @param {String} formId The `id` attribute of the `autoForm` you want current values for.                            // 156\n * @return {Object}                                                                                                    // 157\n *                                                                                                                     // 158\n * Returns an object representing the current values of all schema-based fields in the form.                           // 159\n * The returned object contains two properties, \"insertDoc\" and \"updateDoc\", which represent                           // 160\n * the field values as a normal object and as a MongoDB modifier, respectively.                                        // 161\n */                                                                                                                    // 162\nAutoForm.getFormValues = function autoFormGetFormValues(formId) {                                                      // 163\n  var template = templatesById[formId];                                                                                // 164\n  if (!template || !template.view._domrange) {                                                                         // 165\n    throw new Error(\"getFormValues: There is currently no autoForm template rendered for the form with id \" + formId); // 166\n  }                                                                                                                    // 167\n  // Get a reference to the SimpleSchema instance that should be used for                                              // 168\n  // determining what types we want back for each field.                                                               // 169\n  var context = template.data;                                                                                         // 170\n  var ss = AutoForm.Utility.getSimpleSchemaFromContext(context, formId);                                               // 171\n  return getFormValues(template, formId, ss);                                                                          // 172\n};                                                                                                                     // 173\n                                                                                                                       // 174\n/**                                                                                                                    // 175\n * @method AutoForm.getFieldValue                                                                                      // 176\n * @public                                                                                                             // 177\n * @param {String} formId The `id` attribute of the `autoForm` you want current values for.                            // 178\n * @param {String} fieldName The name of the field for which you want the current value.                               // 179\n * @return {Any}                                                                                                       // 180\n *                                                                                                                     // 181\n * Returns the value of the field (the value that would be used if the form were submitted right now).                 // 182\n * This is a reactive method that will rerun whenever the current value of the requested field changes.                // 183\n */                                                                                                                    // 184\nAutoForm.getFieldValue = function autoFormGetFieldValue(formId, fieldName) {                                           // 185\n  // reactive dependency                                                                                               // 186\n  formValues[formId] = formValues[formId] || {};                                                                       // 187\n  formValues[formId][fieldName] = formValues[formId][fieldName] || new Tracker.Dependency();                           // 188\n  formValues[formId][fieldName].depend();                                                                              // 189\n                                                                                                                       // 190\n  // find AutoForm template                                                                                            // 191\n  var template = templatesById[formId];                                                                                // 192\n  if (!template || !template.view._domrange) {                                                                         // 193\n    return;                                                                                                            // 194\n  }                                                                                                                    // 195\n                                                                                                                       // 196\n  // find AutoForm schema                                                                                              // 197\n  var data = formData[formId];                                                                                         // 198\n  // ss will be the schema for the `schema` attribute if present,                                                      // 199\n  // else the schema for the collection                                                                                // 200\n  var ss = data.ss;                                                                                                    // 201\n                                                                                                                       // 202\n  // get element reference                                                                                             // 203\n  var element = template.$('[data-schema-key=\"' + fieldName + '\"]')[0];                                                // 204\n                                                                                                                       // 205\n  return AutoForm.getInputValue(element, ss);                                                                          // 206\n};                                                                                                                     // 207\n                                                                                                                       // 208\n/**                                                                                                                    // 209\n * @method AutoForm.getInputTypeTemplateNameForElement                                                                 // 210\n * @public                                                                                                             // 211\n * @param {DOMElement} element The input DOM element, generated by an autoform input control                           // 212\n * @return {String}                                                                                                    // 213\n *                                                                                                                     // 214\n * Returns the name of the template used to render the element.                                                        // 215\n */                                                                                                                    // 216\nAutoForm.getInputTypeTemplateNameForElement = function autoFormGetInputTypeTemplateNameForElement(element) {           // 217\n  // get the enclosing view                                                                                            // 218\n  var view = Blaze.getView(element);                                                                                   // 219\n  // if the enclosing view is not a template, perhaps because                                                          // 220\n  // the template contains a block helper like if, with, each,                                                         // 221\n  // then look up the view chain until we arrive at a template                                                         // 222\n  while (view && view.name.slice(0, 9) !== \"Template.\") {                                                              // 223\n    view = view.parentView;                                                                                            // 224\n  }                                                                                                                    // 225\n                                                                                                                       // 226\n  if (!view) {                                                                                                         // 227\n    throw new Error(\"The element does not appear to be in a template view\");                                           // 228\n  }                                                                                                                    // 229\n                                                                                                                       // 230\n  // View names have \"Template.\" at the beginning so we slice that off.                                                // 231\n  return view.name.slice(9);                                                                                           // 232\n};                                                                                                                     // 233\n                                                                                                                       // 234\n/**                                                                                                                    // 235\n * @method AutoForm.getInputValue                                                                                      // 236\n * @public                                                                                                             // 237\n * @param {DOMElement} element The input DOM element, generated by an autoform input control, which must have a `data-schema-key` attribute set to the correct schema key name.\n * @param {SimpleSchema} [ss] Provide the SimpleSchema instance if you already have it.                                // 239\n * @return {Any}                                                                                                       // 240\n *                                                                                                                     // 241\n * Returns the value of the field (the value that would be used if the form were submitted right now).                 // 242\n * Unlike `AutoForm.getFieldValue`, this function is not reactive.                                                     // 243\n */                                                                                                                    // 244\nAutoForm.getInputValue = function autoFormGetInputValue(element, ss) {                                                 // 245\n  var field, fieldName, fieldType, arrayItemFieldType, val, typeDef, inputTypeTemplate, dataContext, autoConvert;      // 246\n                                                                                                                       // 247\n  dataContext = Blaze.getData(element);                                                                                // 248\n  if (dataContext && dataContext.atts) {                                                                               // 249\n    autoConvert = dataContext.atts.autoConvert;                                                                        // 250\n  }                                                                                                                    // 251\n                                                                                                                       // 252\n  // Get jQuery field reference                                                                                        // 253\n  field = $(element);                                                                                                  // 254\n                                                                                                                       // 255\n  // Get the field/schema key name                                                                                     // 256\n  fieldName = field.attr(\"data-schema-key\");                                                                           // 257\n                                                                                                                       // 258\n  // If we have a schema, we can autoconvert to the correct data type                                                  // 259\n  if (ss) {                                                                                                            // 260\n    fieldType = ss.schema(fieldName).type;                                                                             // 261\n  }                                                                                                                    // 262\n                                                                                                                       // 263\n  // Get the name of the input type template used to render the input element                                          // 264\n  inputTypeTemplate = AutoForm.getInputTypeTemplateNameForElement(element);                                            // 265\n                                                                                                                       // 266\n  // Slice off the potential theme template, after the underscore.                                                     // 267\n  inputTypeTemplate = inputTypeTemplate.split(\"_\")[0];                                                                 // 268\n                                                                                                                       // 269\n  // Figure out what registered input type was used to render this element                                             // 270\n  typeDef = _.where(inputTypeDefinitions, {template: inputTypeTemplate})[0];                                           // 271\n                                                                                                                       // 272\n  // If field has a \"data-null-value\" attribute, value should always be null                                           // 273\n  if (field.attr(\"data-null-value\") !== void 0) {                                                                      // 274\n    val = null;                                                                                                        // 275\n  }                                                                                                                    // 276\n  // Otherwise get the field's value using the input type's `valueOut` function if provided                            // 277\n  else if (typeDef && typeDef.valueOut) {                                                                              // 278\n    val = typeDef.valueOut.call(field);                                                                                // 279\n  }                                                                                                                    // 280\n  // Otherwise get the field's value in a default way                                                                  // 281\n  else {                                                                                                               // 282\n    val = field.val();                                                                                                 // 283\n  }                                                                                                                    // 284\n                                                                                                                       // 285\n  // run through input's type converter if provided                                                                    // 286\n  if (val !== void 0 && autoConvert !== false && typeDef && typeDef.valueConverters && fieldType) {                    // 287\n    var converterFunc;                                                                                                 // 288\n    if (fieldType === String) {                                                                                        // 289\n      converterFunc = typeDef.valueConverters.string;                                                                  // 290\n    } else if (fieldType === Number) {                                                                                 // 291\n      converterFunc = typeDef.valueConverters.number;                                                                  // 292\n    } else if (fieldType === Boolean) {                                                                                // 293\n      converterFunc = typeDef.valueConverters.boolean;                                                                 // 294\n    } else if (fieldType === Date) {                                                                                   // 295\n      converterFunc = typeDef.valueConverters.date;                                                                    // 296\n    } else if (fieldType === Array) {                                                                                  // 297\n      arrayItemFieldType = ss.schema(fieldName + \".$\").type;                                                           // 298\n      if (arrayItemFieldType === String) {                                                                             // 299\n        converterFunc = typeDef.valueConverters.stringArray;                                                           // 300\n      } else if (arrayItemFieldType === Number) {                                                                      // 301\n        converterFunc = typeDef.valueConverters.numberArray;                                                           // 302\n      } else if (arrayItemFieldType === Boolean) {                                                                     // 303\n        converterFunc = typeDef.valueConverters.booleanArray;                                                          // 304\n      } else if (arrayItemFieldType === Date) {                                                                        // 305\n        converterFunc = typeDef.valueConverters.dateArray;                                                             // 306\n      }                                                                                                                // 307\n    }                                                                                                                  // 308\n                                                                                                                       // 309\n    if (typeof converterFunc === \"function\") {                                                                         // 310\n      val = converterFunc.call(field, val);                                                                            // 311\n    }                                                                                                                  // 312\n  }                                                                                                                    // 313\n                                                                                                                       // 314\n  return val;                                                                                                          // 315\n};                                                                                                                     // 316\n                                                                                                                       // 317\n/**                                                                                                                    // 318\n * @method AutoForm.addInputType                                                                                       // 319\n * @public                                                                                                             // 320\n * @param {String} name The type string that this definition is for.                                                   // 321\n * @param {Object} definition Defines how the input type should be rendered.                                           // 322\n * @param {String} definition.componentName The component name. A template with the name <componentName>_bootstrap3, and potentially others, must be defined.\n * @return {undefined}                                                                                                 // 324\n *                                                                                                                     // 325\n * Use this method to add custom input components.                                                                     // 326\n */                                                                                                                    // 327\nAutoForm.addInputType = function afAddInputType(name, definition) {                                                    // 328\n  var obj = {};                                                                                                        // 329\n  obj[name] = definition;                                                                                              // 330\n  _.extend(inputTypeDefinitions, obj);                                                                                 // 331\n};                                                                                                                     // 332\n                                                                                                                       // 333\n/**                                                                                                                    // 334\n * @method AutoForm.validateField                                                                                      // 335\n * @public                                                                                                             // 336\n * @param {String} formId The `id` attribute of the `autoForm` you want to validate.                                   // 337\n * @param {String} fieldName The name of the field within the `autoForm` you want to validate.                         // 338\n * @param {Boolean} [skipEmpty=false] Set to `true` to skip validation if the field has no value. Useful for preventing `required` errors in form fields that the user has not yet filled out.\n * @return {Boolean} Is it valid?                                                                                      // 340\n *                                                                                                                     // 341\n * In addition to returning a boolean that indicates whether the field is currently valid,                             // 342\n * this method causes the reactive validation messages to appear.                                                      // 343\n */                                                                                                                    // 344\nAutoForm.validateField = function autoFormValidateField(formId, fieldName, skipEmpty) {                                // 345\n  var template = templatesById[formId];                                                                                // 346\n  if (!template || !template.view._domrange) {                                                                         // 347\n    throw new Error(\"validateField: There is currently no autoForm template rendered for the form with id \" + formId); // 348\n  }                                                                                                                    // 349\n                                                                                                                       // 350\n  return _validateField(fieldName, template, skipEmpty, false);                                                        // 351\n};                                                                                                                     // 352\n                                                                                                                       // 353\n/**                                                                                                                    // 354\n * @method AutoForm.validateForm                                                                                       // 355\n * @public                                                                                                             // 356\n * @param {String} formId The `id` attribute of the `autoForm` you want to validate.                                   // 357\n * @return {Boolean} Is it valid?                                                                                      // 358\n *                                                                                                                     // 359\n * In addition to returning a boolean that indicates whether the form is currently valid,                              // 360\n * this method causes the reactive validation messages to appear.                                                      // 361\n */                                                                                                                    // 362\nAutoForm.validateForm = function autoFormValidateForm(formId) {                                                        // 363\n  // Gather all form values                                                                                            // 364\n  var formDocs = AutoForm.getFormValues(formId);                                                                       // 365\n                                                                                                                       // 366\n  return _validateForm(formId, formData[formId], formDocs);                                                            // 367\n};                                                                                                                     // 368\n                                                                                                                       // 369\n/**                                                                                                                    // 370\n * @method AutoForm.getValidationContext                                                                               // 371\n * @public                                                                                                             // 372\n * @param {String} formId The `id` attribute of the `autoForm` for which you want the validation context               // 373\n * @return {SimpleSchemaValidationContext} The SimpleSchema validation context object.                                 // 374\n *                                                                                                                     // 375\n * Use this method to get the validation context, which can be used to check                                           // 376\n * the current invalid fields, manually invalidate fields, etc.                                                        // 377\n */                                                                                                                    // 378\nAutoForm.getValidationContext = function autoFormGetValidationContext(formId) {                                        // 379\n  var data = formData[formId];                                                                                         // 380\n  // ss will be the schema for the `schema` attribute if present,                                                      // 381\n  // else the schema for the collection                                                                                // 382\n  var ss = data.ss;                                                                                                    // 383\n  return ss.namedContext(formId);                                                                                      // 384\n};                                                                                                                     // 385\n                                                                                                                       // 386\n/**                                                                                                                    // 387\n * @method AutoForm.find                                                                                               // 388\n * @public                                                                                                             // 389\n * @return {Object} The data context for the closest autoform.                                                         // 390\n *                                                                                                                     // 391\n * Call this method from a UI helper to get the data context for the closest autoform. Always returns the context or throws an error.\n */                                                                                                                    // 393\nAutoForm.find = function autoFormFind(type) {                                                                          // 394\n  var n = 0, af;                                                                                                       // 395\n  do {                                                                                                                 // 396\n    af = Template.parentData(n++);                                                                                     // 397\n  } while (af && !af._af);                                                                                             // 398\n  if (!af || !af._af) {                                                                                                // 399\n    throw new Error((type || \"AutoForm.find\") + \" must be used within an autoForm block\");                             // 400\n  }                                                                                                                    // 401\n  return af._af;                                                                                                       // 402\n};                                                                                                                     // 403\n                                                                                                                       // 404\n/**                                                                                                                    // 405\n * @method AutoForm.findAttribute                                                                                      // 406\n * @param {String} attrName Attribute name                                                                             // 407\n * @public                                                                                                             // 408\n * @return {Any|undefined} Searches for the given attribute, looking up the parent context tree until the closest autoform is reached.\n *                                                                                                                     // 410\n * Call this method from a UI helper. Might return undefined.                                                          // 411\n */                                                                                                                    // 412\nAutoForm.findAttribute = function autoFormFindAttribute(attrName) {                                                    // 413\n  var n = 0, af, val, stopAt = -1;                                                                                     // 414\n  // we go one level past _af so that we get the original autoForm or quickForm attributes, too                        // 415\n  do {                                                                                                                 // 416\n    af = Template.parentData(n++);                                                                                     // 417\n    if (af && af.atts && af.atts[attrName] !== void 0) {                                                               // 418\n      val = af.atts[attrName];                                                                                         // 419\n    } else if (af && af[attrName] !== void 0) {                                                                        // 420\n      val = af[attrName];                                                                                              // 421\n    }                                                                                                                  // 422\n    if (af && af._af) {                                                                                                // 423\n      stopAt = n + 1;                                                                                                  // 424\n    }                                                                                                                  // 425\n  } while (af && stopAt < n && val === void 0);                                                                        // 426\n  return val;                                                                                                          // 427\n};                                                                                                                     // 428\n                                                                                                                       // 429\n/**                                                                                                                    // 430\n * @method AutoForm.findAttributesWithPrefix                                                                           // 431\n * @param {String} prefix Attribute prefix                                                                             // 432\n * @public                                                                                                             // 433\n * @return {Object} An object containing all of the found attributes and their values, with the prefix removed from the keys.\n *                                                                                                                     // 435\n * Call this method from a UI helper. Searches for attributes that start with the given prefix, looking up the parent context tree until the closest autoform is reached.\n */                                                                                                                    // 437\nAutoForm.findAttributesWithPrefix = function autoFormFindAttributesWithPrefix(prefix) {                                // 438\n  var n = 0, af, searchObj, stopAt = -1, obj = {};                                                                     // 439\n  // we go one level past _af so that we get the original autoForm or quickForm attributes, too                        // 440\n  do {                                                                                                                 // 441\n    af = Template.parentData(n++);                                                                                     // 442\n    if (af) {                                                                                                          // 443\n      if (af.atts) {                                                                                                   // 444\n        searchObj = af.atts;                                                                                           // 445\n      } else {                                                                                                         // 446\n        searchObj = af;                                                                                                // 447\n      }                                                                                                                // 448\n      if (_.isObject(searchObj)) {                                                                                     // 449\n        _.each(searchObj, function (v, k) {                                                                            // 450\n          if (k.indexOf(prefix) === 0) {                                                                               // 451\n            obj[k.slice(prefix.length)] = v;                                                                           // 452\n          }                                                                                                            // 453\n        });                                                                                                            // 454\n      }                                                                                                                // 455\n      if (af._af) {                                                                                                    // 456\n        stopAt = n + 1;                                                                                                // 457\n      }                                                                                                                // 458\n    }                                                                                                                  // 459\n  } while (af && stopAt < n);                                                                                          // 460\n  return obj;                                                                                                          // 461\n};                                                                                                                     // 462\n                                                                                                                       // 463\n/**                                                                                                                    // 464\n * @method AutoForm.debug                                                                                              // 465\n * @public                                                                                                             // 466\n *                                                                                                                     // 467\n * Call this method in client code while developing to turn on extra logging.                                          // 468\n */                                                                                                                    // 469\nAutoForm.debug = function autoFormDebug() {                                                                            // 470\n  SimpleSchema.debug = true;                                                                                           // 471\n  AutoForm._debug = true;                                                                                              // 472\n  AutoForm.addHooks(null, {                                                                                            // 473\n    onError: function (operation, error) {                                                                             // 474\n      console.log(\"Error in \" + this.formId, operation, error);                                                        // 475\n    }                                                                                                                  // 476\n  });                                                                                                                  // 477\n};                                                                                                                     // 478\n                                                                                                                       // 479\n/**                                                                                                                    // 480\n * @property AutoForm.arrayTracker                                                                                     // 481\n * @public                                                                                                             // 482\n */                                                                                                                    // 483\nAutoForm.arrayTracker = arrayTracker;                                                                                  // 484\n                                                                                                                       // 485\n/**                                                                                                                    // 486\n * @method AutoForm.getInputType                                                                                       // 487\n * @param {Object} atts The attributes provided to afFieldInput.                                                       // 488\n * @public                                                                                                             // 489\n * @return {String} The input type. Most are the same as the `type` attributes for HTML input elements, but some are special strings that autoform interprets.\n *                                                                                                                     // 491\n * Call this method from a UI helper to get the type string for the input control.                                     // 492\n */                                                                                                                    // 493\nAutoForm.getInputType = getInputType;                                                                                  // 494\n                                                                                                                       // 495\n/**                                                                                                                    // 496\n * @method AutoForm.getSchemaForField                                                                                  // 497\n * @public                                                                                                             // 498\n * @param {String} name The field name attribute / schema key.                                                         // 499\n * @param {Object} [autoform] The autoform context. Optionally pass this if you've already retrieved it using AutoForm.find as a performance enhancement.\n * @return {Object}                                                                                                    // 501\n *                                                                                                                     // 502\n * Call this method from a UI helper to get the field definitions based on the schema used by the closest containing autoForm.\n * Always throws an error or returns the schema object.                                                                // 504\n */                                                                                                                    // 505\nAutoForm.getSchemaForField = function autoFormGetSchemaForField(name, autoform) {                                      // 506\n  var ss;                                                                                                              // 507\n  if (autoform) {                                                                                                      // 508\n    ss = autoform.ss;                                                                                                  // 509\n  }                                                                                                                    // 510\n  if (!ss) {                                                                                                           // 511\n    ss = AutoForm.find().ss;                                                                                           // 512\n  }                                                                                                                    // 513\n  return AutoForm.Utility.getDefs(ss, name);                                                                           // 514\n};                                                                                                                     // 515\n                                                                                                                       // 516\n/**                                                                                                                    // 517\n * @method AutoForm.invalidateFormContext                                                                              // 518\n * @public                                                                                                             // 519\n * @param {String} formId The form ID.                                                                                 // 520\n * @return {undefined}                                                                                                 // 521\n *                                                                                                                     // 522\n * Call this to force invalidate the form context, such as when you're changing the `doc`                              // 523\n * and it does not react by itself.                                                                                    // 524\n */                                                                                                                    // 525\nAutoForm.invalidateFormContext = function autoFormInvalidateFormContext(formId) {                                      // 526\n  formDeps[formId] = formDeps[formId] || new Tracker.Dependency();                                                     // 527\n  formDeps[formId].changed();                                                                                          // 528\n};                                                                                                                     // 529\n                                                                                                                       // 530\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 2523\n}).call(this);                                                       // 2524\n                                                                     // 2525\n                                                                     // 2526\n                                                                     // 2527\n                                                                     // 2528\n                                                                     // 2529\n                                                                     // 2530\n(function () {                                                       // 2531\n                                                                     // 2532\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/boolean-checkbox/template.boolean-checkbox.js                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afCheckbox\");                                                                                    // 2\nTemplate[\"afCheckbox\"] = new Template(\"Template.afCheckbox\", (function() {                                             // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                                   // 5\n    type: \"checkbox\",                                                                                                  // 6\n    value: \"true\"                                                                                                      // 7\n  }, function() {                                                                                                      // 8\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 9\n  })), \" \", Blaze.View(function() {                                                                                    // 10\n    return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                          // 11\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                    // 12\n    }));                                                                                                               // 13\n  })));                                                                                                                // 14\n}));                                                                                                                   // 15\n                                                                                                                       // 16\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 2556\n}).call(this);                                                       // 2557\n                                                                     // 2558\n                                                                     // 2559\n                                                                     // 2560\n                                                                     // 2561\n                                                                     // 2562\n                                                                     // 2563\n(function () {                                                       // 2564\n                                                                     // 2565\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/boolean-checkbox/boolean-checkbox.js                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"boolean-checkbox\", {                                                                            // 1\n  template: \"afCheckbox\",                                                                                              // 2\n  valueOut: function () {                                                                                              // 3\n    return !!this.is(\":checked\");                                                                                      // 4\n  },                                                                                                                   // 5\n  valueConverters: {                                                                                                   // 6\n    \"string\": function (val) {                                                                                         // 7\n      if (val === true) {                                                                                              // 8\n        return \"TRUE\";                                                                                                 // 9\n      } else if (val === false) {                                                                                      // 10\n        return \"FALSE\";                                                                                                // 11\n      }                                                                                                                // 12\n      return val;                                                                                                      // 13\n    },                                                                                                                 // 14\n    \"stringArray\": function (val) {                                                                                    // 15\n      if (val === true) {                                                                                              // 16\n        return [\"TRUE\"];                                                                                               // 17\n      } else if (val === false) {                                                                                      // 18\n        return [\"FALSE\"];                                                                                              // 19\n      }                                                                                                                // 20\n      return val;                                                                                                      // 21\n    },                                                                                                                 // 22\n    \"number\": function (val) {                                                                                         // 23\n      if (val === true) {                                                                                              // 24\n        return 1;                                                                                                      // 25\n      } else if (val === false) {                                                                                      // 26\n        return 0;                                                                                                      // 27\n      }                                                                                                                // 28\n      return val;                                                                                                      // 29\n    },                                                                                                                 // 30\n    \"numberArray\": function (val) {                                                                                    // 31\n      if (val === true) {                                                                                              // 32\n        return [1];                                                                                                    // 33\n      } else if (val === false) {                                                                                      // 34\n        return [0];                                                                                                    // 35\n      }                                                                                                                // 36\n      return val;                                                                                                      // 37\n    }                                                                                                                  // 38\n  },                                                                                                                   // 39\n  contextAdjust: function (context) {                                                                                  // 40\n    if (context.value === true) {                                                                                      // 41\n      context.atts.checked = \"\";                                                                                       // 42\n    }                                                                                                                  // 43\n    //don't add required attribute to checkboxes because some browsers assume that to mean that it must be checked, which is not what we mean by \"required\"\n    delete context.atts.required;                                                                                      // 45\n    return context;                                                                                                    // 46\n  }                                                                                                                    // 47\n});                                                                                                                    // 48\n                                                                                                                       // 49\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 2622\n}).call(this);                                                       // 2623\n                                                                     // 2624\n                                                                     // 2625\n                                                                     // 2626\n                                                                     // 2627\n                                                                     // 2628\n                                                                     // 2629\n(function () {                                                       // 2630\n                                                                     // 2631\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/boolean-radios/template.boolean-radios.js                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afBooleanRadioGroup\");                                                                           // 2\nTemplate[\"afBooleanRadioGroup\"] = new Template(\"Template.afBooleanRadioGroup\", (function() {                           // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.Attrs(function() {                                                                              // 5\n    return Spacebars.attrMustache(view.lookup(\"dsk\"));                                                                 // 6\n  }), \"\\n    \", HTML.DIV(\"\\n      \", HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                // 7\n    type: \"radio\",                                                                                                     // 8\n    value: \"false\",                                                                                                    // 9\n    name: function() {                                                                                                 // 10\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"name\"));                                              // 11\n    }                                                                                                                  // 12\n  }, function() {                                                                                                      // 13\n    return Spacebars.attrMustache(view.lookup(\"falseAtts\"));                                                           // 14\n  })), \" \", Spacebars.With(function() {                                                                                // 15\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"falseLabel\"));                                      // 16\n  }, function() {                                                                                                      // 17\n    return Blaze.View(function() {                                                                                     // 18\n      return Spacebars.mustache(view.lookup(\".\"));                                                                     // 19\n    });                                                                                                                // 20\n  }, function() {                                                                                                      // 21\n    return \"False\";                                                                                                    // 22\n  })), \"\\n    \"), \"\\n    \", HTML.DIV(\"\\n      \", HTML.LABEL(HTML.INPUT(HTML.Attrs({                                    // 23\n    type: \"radio\",                                                                                                     // 24\n    value: \"true\",                                                                                                     // 25\n    name: function() {                                                                                                 // 26\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"name\"));                                              // 27\n    }                                                                                                                  // 28\n  }, function() {                                                                                                      // 29\n    return Spacebars.attrMustache(view.lookup(\"trueAtts\"));                                                            // 30\n  })), \" \", Spacebars.With(function() {                                                                                // 31\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"trueLabel\"));                                       // 32\n  }, function() {                                                                                                      // 33\n    return Blaze.View(function() {                                                                                     // 34\n      return Spacebars.mustache(view.lookup(\".\"));                                                                     // 35\n    });                                                                                                                // 36\n  }, function() {                                                                                                      // 37\n    return \"True\";                                                                                                     // 38\n  })), \"\\n    \"), \"\\n  \");                                                                                             // 39\n}));                                                                                                                   // 40\n                                                                                                                       // 41\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 2680\n}).call(this);                                                       // 2681\n                                                                     // 2682\n                                                                     // 2683\n                                                                     // 2684\n                                                                     // 2685\n                                                                     // 2686\n                                                                     // 2687\n(function () {                                                       // 2688\n                                                                     // 2689\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/boolean-radios/boolean-radios.js                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"boolean-radios\", {                                                                              // 1\n  template: \"afBooleanRadioGroup\",                                                                                     // 2\n  valueOut: function () {                                                                                              // 3\n    if (this.find('input[value=false]').is(\":checked\")) {                                                              // 4\n      return false;                                                                                                    // 5\n    } else if (this.find('input[value=true]').is(\":checked\")) {                                                        // 6\n      return true;                                                                                                     // 7\n    }                                                                                                                  // 8\n  },                                                                                                                   // 9\n  valueConverters: {                                                                                                   // 10\n    \"string\": function (val) {                                                                                         // 11\n      if (val === true) {                                                                                              // 12\n        return \"TRUE\";                                                                                                 // 13\n      } else if (val === false) {                                                                                      // 14\n        return \"FALSE\";                                                                                                // 15\n      }                                                                                                                // 16\n      return val;                                                                                                      // 17\n    },                                                                                                                 // 18\n    \"stringArray\": function (val) {                                                                                    // 19\n      if (val === true) {                                                                                              // 20\n        return [\"TRUE\"];                                                                                               // 21\n      } else if (val === false) {                                                                                      // 22\n        return [\"FALSE\"];                                                                                              // 23\n      }                                                                                                                // 24\n      return val;                                                                                                      // 25\n    },                                                                                                                 // 26\n    \"number\": function (val) {                                                                                         // 27\n      if (val === true) {                                                                                              // 28\n        return 1;                                                                                                      // 29\n      } else if (val === false) {                                                                                      // 30\n        return 0;                                                                                                      // 31\n      }                                                                                                                // 32\n      return val;                                                                                                      // 33\n    },                                                                                                                 // 34\n    \"numberArray\": function (val) {                                                                                    // 35\n      if (val === true) {                                                                                              // 36\n        return [1];                                                                                                    // 37\n      } else if (val === false) {                                                                                      // 38\n        return [0];                                                                                                    // 39\n      }                                                                                                                // 40\n      return val;                                                                                                      // 41\n    }                                                                                                                  // 42\n  }                                                                                                                    // 43\n});                                                                                                                    // 44\n                                                                                                                       // 45\nTemplate[\"afBooleanRadioGroup\"].helpers({                                                                              // 46\n  falseAtts: function falseAtts() {                                                                                    // 47\n    var atts = _.omit(this.atts, 'trueLabel', 'falseLabel', 'data-schema-key');                                        // 48\n    if (this.value === false) {                                                                                        // 49\n      atts.checked = \"\";                                                                                               // 50\n    }                                                                                                                  // 51\n    return atts;                                                                                                       // 52\n  },                                                                                                                   // 53\n  trueAtts: function trueAtts() {                                                                                      // 54\n    var atts = _.omit(this.atts, 'trueLabel', 'falseLabel', 'data-schema-key');                                        // 55\n    if (this.value === true) {                                                                                         // 56\n      atts.checked = \"\";                                                                                               // 57\n    }                                                                                                                  // 58\n    return atts;                                                                                                       // 59\n  },                                                                                                                   // 60\n  dsk: function () {                                                                                                   // 61\n    return {'data-schema-key': this.atts['data-schema-key']};                                                          // 62\n  }                                                                                                                    // 63\n});                                                                                                                    // 64\n                                                                                                                       // 65\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 2762\n}).call(this);                                                       // 2763\n                                                                     // 2764\n                                                                     // 2765\n                                                                     // 2766\n                                                                     // 2767\n                                                                     // 2768\n                                                                     // 2769\n(function () {                                                       // 2770\n                                                                     // 2771\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/boolean-select/template.boolean-select.js                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afBooleanSelect\");                                                                               // 2\nTemplate[\"afBooleanSelect\"] = new Template(\"Template.afBooleanSelect\", (function() {                                   // 3\n  var view = this;                                                                                                     // 4\n  return HTML.SELECT(HTML.Attrs(function() {                                                                           // 5\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 6\n  }), \"\\n    \", Blaze.Each(function() {                                                                                // 7\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 8\n  }, function() {                                                                                                      // 9\n    return [ \"\\n    \", HTML.OPTION(HTML.Attrs(function() {                                                             // 10\n      return Spacebars.attrMustache(view.lookup(\"optionAtts\"));                                                        // 11\n    }), Blaze.View(function() {                                                                                        // 12\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                             // 13\n    })), \"\\n    \" ];                                                                                                   // 14\n  }), \"\\n  \");                                                                                                         // 15\n}));                                                                                                                   // 16\n                                                                                                                       // 17\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 2796\n}).call(this);                                                       // 2797\n                                                                     // 2798\n                                                                     // 2799\n                                                                     // 2800\n                                                                     // 2801\n                                                                     // 2802\n                                                                     // 2803\n(function () {                                                       // 2804\n                                                                     // 2805\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/boolean-select/boolean-select.js                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"boolean-select\", {                                                                              // 1\n  template: \"afBooleanSelect\",                                                                                         // 2\n  valueOut: function () {                                                                                              // 3\n    var val = this.val();                                                                                              // 4\n    if (val === \"true\") {                                                                                              // 5\n      return true;                                                                                                     // 6\n    } else if (val === \"false\") {                                                                                      // 7\n      return false;                                                                                                    // 8\n    }                                                                                                                  // 9\n  },                                                                                                                   // 10\n  valueConverters: {                                                                                                   // 11\n    \"string\": function (val) {                                                                                         // 12\n      if (val === true) {                                                                                              // 13\n        return \"TRUE\";                                                                                                 // 14\n      } else if (val === false) {                                                                                      // 15\n        return \"FALSE\";                                                                                                // 16\n      }                                                                                                                // 17\n      return val;                                                                                                      // 18\n    },                                                                                                                 // 19\n    \"stringArray\": function (val) {                                                                                    // 20\n      if (val === true) {                                                                                              // 21\n        return [\"TRUE\"];                                                                                               // 22\n      } else if (val === false) {                                                                                      // 23\n        return [\"FALSE\"];                                                                                              // 24\n      }                                                                                                                // 25\n      return val;                                                                                                      // 26\n    },                                                                                                                 // 27\n    \"number\": function (val) {                                                                                         // 28\n      if (val === true) {                                                                                              // 29\n        return 1;                                                                                                      // 30\n      } else if (val === false) {                                                                                      // 31\n        return 0;                                                                                                      // 32\n      }                                                                                                                // 33\n      return val;                                                                                                      // 34\n    },                                                                                                                 // 35\n    \"numberArray\": function (val) {                                                                                    // 36\n      if (val === true) {                                                                                              // 37\n        return [1];                                                                                                    // 38\n      } else if (val === false) {                                                                                      // 39\n        return [0];                                                                                                    // 40\n      }                                                                                                                // 41\n      return val;                                                                                                      // 42\n    }                                                                                                                  // 43\n  },                                                                                                                   // 44\n  contextAdjust: function (context) {                                                                                  // 45\n    var atts = _.omit(context.atts, 'trueLabel', 'falseLabel', 'firstOption');                                         // 46\n                                                                                                                       // 47\n    // build items list                                                                                                // 48\n    context.items = [                                                                                                  // 49\n      {                                                                                                                // 50\n        name: context.name,                                                                                            // 51\n        value: \"\",                                                                                                     // 52\n        // _id must be included because it is a special property that                                                  // 53\n        // #each uses to track unique list items when adding and removing them                                         // 54\n        // See https://github.com/meteor/meteor/issues/2174                                                            // 55\n        _id: \"\",                                                                                                       // 56\n        selected: (context.value !== false && context.value !== true),                                                 // 57\n        label: context.atts.firstOption || \"(Select One)\",                                                             // 58\n        atts: atts                                                                                                     // 59\n      },                                                                                                               // 60\n      {                                                                                                                // 61\n        name: context.name,                                                                                            // 62\n        value: \"false\",                                                                                                // 63\n        // _id must be included because it is a special property that                                                  // 64\n        // #each uses to track unique list items when adding and removing them                                         // 65\n        // See https://github.com/meteor/meteor/issues/2174                                                            // 66\n        _id: \"false\",                                                                                                  // 67\n        selected: (context.value === false),                                                                           // 68\n        label: context.atts.falseLabel || \"False\",                                                                     // 69\n        atts: atts                                                                                                     // 70\n      },                                                                                                               // 71\n      {                                                                                                                // 72\n        name: context.name,                                                                                            // 73\n        value: \"true\",                                                                                                 // 74\n        // _id must be included because it is a special property that                                                  // 75\n        // #each uses to track unique list items when adding and removing them                                         // 76\n        // See https://github.com/meteor/meteor/issues/2174                                                            // 77\n        _id: \"true\",                                                                                                   // 78\n        selected: (context.value === true),                                                                            // 79\n        label: context.atts.trueLabel || \"True\",                                                                       // 80\n        atts: atts                                                                                                     // 81\n      }                                                                                                                // 82\n    ];                                                                                                                 // 83\n                                                                                                                       // 84\n    return context;                                                                                                    // 85\n  }                                                                                                                    // 86\n});                                                                                                                    // 87\n                                                                                                                       // 88\nTemplate[\"afBooleanSelect\"].helpers({                                                                                  // 89\n  optionAtts: function afSelectOptionAtts() {                                                                          // 90\n    var item = this;                                                                                                   // 91\n    var atts = {                                                                                                       // 92\n      value: item.value                                                                                                // 93\n    };                                                                                                                 // 94\n    if (item.selected) {                                                                                               // 95\n      atts.selected = \"\";                                                                                              // 96\n    }                                                                                                                  // 97\n    return atts;                                                                                                       // 98\n  }                                                                                                                    // 99\n});                                                                                                                    // 100\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 2913\n}).call(this);                                                       // 2914\n                                                                     // 2915\n                                                                     // 2916\n                                                                     // 2917\n                                                                     // 2918\n                                                                     // 2919\n                                                                     // 2920\n(function () {                                                       // 2921\n                                                                     // 2922\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/button/template.button.js                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputButton\");                                                                                 // 2\nTemplate[\"afInputButton\"] = new Template(\"Template.afInputButton\", (function() {                                       // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"button\",                                                                                                    // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 2944\n}).call(this);                                                       // 2945\n                                                                     // 2946\n                                                                     // 2947\n                                                                     // 2948\n                                                                     // 2949\n                                                                     // 2950\n                                                                     // 2951\n(function () {                                                       // 2952\n                                                                     // 2953\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/button/button.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"button\", {                                                                                      // 1\n  template: \"afInputButton\"                                                                                            // 2\n});                                                                                                                    // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 2964\n}).call(this);                                                       // 2965\n                                                                     // 2966\n                                                                     // 2967\n                                                                     // 2968\n                                                                     // 2969\n                                                                     // 2970\n                                                                     // 2971\n(function () {                                                       // 2972\n                                                                     // 2973\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/color/template.color.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputColor\");                                                                                  // 2\nTemplate[\"afInputColor\"] = new Template(\"Template.afInputColor\", (function() {                                         // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"color\",                                                                                                     // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 2995\n}).call(this);                                                       // 2996\n                                                                     // 2997\n                                                                     // 2998\n                                                                     // 2999\n                                                                     // 3000\n                                                                     // 3001\n                                                                     // 3002\n(function () {                                                       // 3003\n                                                                     // 3004\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/color/color.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"color\", {                                                                                       // 1\n  template: \"afInputColor\"                                                                                             // 2\n});                                                                                                                    // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 3015\n}).call(this);                                                       // 3016\n                                                                     // 3017\n                                                                     // 3018\n                                                                     // 3019\n                                                                     // 3020\n                                                                     // 3021\n                                                                     // 3022\n(function () {                                                       // 3023\n                                                                     // 3024\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/contenteditable/template.contenteditable.js                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afContenteditable\");                                                                             // 2\nTemplate[\"afContenteditable\"] = new Template(\"Template.afContenteditable\", (function() {                               // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.Attrs({                                                                                         // 5\n    contenteditable: \"true\"                                                                                            // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 8\n  }), Blaze.View(function() {                                                                                          // 9\n    return Spacebars.makeRaw(Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\")));                            // 10\n  }));                                                                                                                 // 11\n}));                                                                                                                   // 12\n                                                                                                                       // 13\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 3045\n}).call(this);                                                       // 3046\n                                                                     // 3047\n                                                                     // 3048\n                                                                     // 3049\n                                                                     // 3050\n                                                                     // 3051\n                                                                     // 3052\n(function () {                                                       // 3053\n                                                                     // 3054\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/contenteditable/contenteditable.js                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"contenteditable\", {                                                                             // 1\n  template: \"afContenteditable\",                                                                                       // 2\n  valueOut: function () {                                                                                              // 3\n    return this.html();                                                                                                // 4\n  },                                                                                                                   // 5\n  contextAdjust: function (context) {                                                                                  // 6\n    if (typeof context.atts['data-maxlength'] === \"undefined\" && typeof context.max === \"number\") {                    // 7\n      context.atts['data-maxlength'] = context.max;                                                                    // 8\n    }                                                                                                                  // 9\n    return context;                                                                                                    // 10\n  }                                                                                                                    // 11\n});                                                                                                                    // 12\n                                                                                                                       // 13\nTemplate.afContenteditable.events({                                                                                    // 14\n  'blur div[contenteditable=true]': function (event, template) {                                                       // 15\n    template.$(event.target).change();                                                                                 // 16\n  }                                                                                                                    // 17\n});                                                                                                                    // 18\n                                                                                                                       // 19\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 3081\n}).call(this);                                                       // 3082\n                                                                     // 3083\n                                                                     // 3084\n                                                                     // 3085\n                                                                     // 3086\n                                                                     // 3087\n                                                                     // 3088\n(function () {                                                       // 3089\n                                                                     // 3090\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/date/template.date.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputDate\");                                                                                   // 2\nTemplate[\"afInputDate\"] = new Template(\"Template.afInputDate\", (function() {                                           // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"date\",                                                                                                      // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 3112\n}).call(this);                                                       // 3113\n                                                                     // 3114\n                                                                     // 3115\n                                                                     // 3116\n                                                                     // 3117\n                                                                     // 3118\n                                                                     // 3119\n(function () {                                                       // 3120\n                                                                     // 3121\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/date/date.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"date\", {                                                                                        // 1\n  template: \"afInputDate\",                                                                                             // 2\n  valueIn: function (val) {                                                                                            // 3\n    //convert Date to string value                                                                                     // 4\n    return (val instanceof Date) ? AutoForm.Utility.dateToDateStringUTC(val) : val;                                    // 5\n  },                                                                                                                   // 6\n  valueOut: function () {                                                                                              // 7\n    var val = this.val();                                                                                              // 8\n    if (AutoForm.Utility.isValidDateString(val)) {                                                                     // 9\n      //Date constructor will interpret val as UTC and create                                                          // 10\n      //date at mignight in the morning of val date in UTC time zone                                                   // 11\n      return new Date(val);                                                                                            // 12\n    } else {                                                                                                           // 13\n      return null;                                                                                                     // 14\n    }                                                                                                                  // 15\n  },                                                                                                                   // 16\n  valueConverters: {                                                                                                   // 17\n    \"string\": function (val) {                                                                                         // 18\n      return (val instanceof Date) ? AutoForm.Utility.dateToDateStringUTC(val) : val;                                  // 19\n    },                                                                                                                 // 20\n    \"stringArray\": function (val) {                                                                                    // 21\n      if (val instanceof Date) {                                                                                       // 22\n        return [AutoForm.Utility.dateToDateStringUTC(val)];                                                            // 23\n      }                                                                                                                // 24\n      return val;                                                                                                      // 25\n    },                                                                                                                 // 26\n    \"number\": function (val) {                                                                                         // 27\n      return (val instanceof Date) ? val.getTime() : val;                                                              // 28\n    },                                                                                                                 // 29\n    \"numberArray\": function (val) {                                                                                    // 30\n      if (val instanceof Date) {                                                                                       // 31\n        return [val.getTime()];                                                                                        // 32\n      }                                                                                                                // 33\n      return val;                                                                                                      // 34\n    },                                                                                                                 // 35\n    \"dateArray\": function (val) {                                                                                      // 36\n      if (val instanceof Date) {                                                                                       // 37\n        return [val];                                                                                                  // 38\n      }                                                                                                                // 39\n      return val;                                                                                                      // 40\n    }                                                                                                                  // 41\n  },                                                                                                                   // 42\n  contextAdjust: function (context) {                                                                                  // 43\n    if (typeof context.atts.max === \"undefined\" && context.max instanceof Date) {                                      // 44\n      context.atts.max = AutoForm.Utility.dateToDateStringUTC(context.max);                                            // 45\n    }                                                                                                                  // 46\n    if (typeof context.atts.min === \"undefined\" && context.min instanceof Date) {                                      // 47\n      context.atts.min = AutoForm.Utility.dateToDateStringUTC(context.min);                                            // 48\n    }                                                                                                                  // 49\n    return context;                                                                                                    // 50\n  }                                                                                                                    // 51\n});                                                                                                                    // 52\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 3181\n}).call(this);                                                       // 3182\n                                                                     // 3183\n                                                                     // 3184\n                                                                     // 3185\n                                                                     // 3186\n                                                                     // 3187\n                                                                     // 3188\n(function () {                                                       // 3189\n                                                                     // 3190\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/datetime/template.datetime.js                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputDateTime\");                                                                               // 2\nTemplate[\"afInputDateTime\"] = new Template(\"Template.afInputDateTime\", (function() {                                   // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"datetime\",                                                                                                  // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 3212\n}).call(this);                                                       // 3213\n                                                                     // 3214\n                                                                     // 3215\n                                                                     // 3216\n                                                                     // 3217\n                                                                     // 3218\n                                                                     // 3219\n(function () {                                                       // 3220\n                                                                     // 3221\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/datetime/datetime.js                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"datetime\", {                                                                                    // 1\n  template: \"afInputDateTime\",                                                                                         // 2\n  valueIn: function (val) {                                                                                            // 3\n    //convert Date to string value                                                                                     // 4\n    return (val instanceof Date) ? AutoForm.Utility.dateToNormalizedForcedUtcGlobalDateAndTimeString(val): val;        // 5\n  },                                                                                                                   // 6\n  valueOut: function () {                                                                                              // 7\n    var val = this.val();                                                                                              // 8\n    val = (typeof val === \"string\") ? val.replace(/ /g, \"T\") : val;                                                    // 9\n    if (AutoForm.Utility.isValidNormalizedForcedUtcGlobalDateAndTimeString(val)) {                                     // 10\n      //Date constructor will interpret val as UTC due to ending \"Z\"                                                   // 11\n      return new Date(val);                                                                                            // 12\n    } else {                                                                                                           // 13\n      return null;                                                                                                     // 14\n    }                                                                                                                  // 15\n  },                                                                                                                   // 16\n  valueConverters: {                                                                                                   // 17\n    \"string\": function (val) {                                                                                         // 18\n      return (val instanceof Date) ? AutoForm.Utility.dateToNormalizedForcedUtcGlobalDateAndTimeString(val) : val;     // 19\n    },                                                                                                                 // 20\n    \"stringArray\": function (val) {                                                                                    // 21\n      if (val instanceof Date) {                                                                                       // 22\n        return [AutoForm.Utility.dateToNormalizedForcedUtcGlobalDateAndTimeString(val)];                               // 23\n      }                                                                                                                // 24\n      return val;                                                                                                      // 25\n    },                                                                                                                 // 26\n    \"number\": function (val) {                                                                                         // 27\n      return (val instanceof Date) ? val.getTime() : val;                                                              // 28\n    },                                                                                                                 // 29\n    \"numberArray\": function (val) {                                                                                    // 30\n      if (val instanceof Date) {                                                                                       // 31\n        return [val.getTime()];                                                                                        // 32\n      }                                                                                                                // 33\n      return val;                                                                                                      // 34\n    },                                                                                                                 // 35\n    \"dateArray\": function (val) {                                                                                      // 36\n      if (val instanceof Date) {                                                                                       // 37\n        return [val];                                                                                                  // 38\n      }                                                                                                                // 39\n      return val;                                                                                                      // 40\n    }                                                                                                                  // 41\n  },                                                                                                                   // 42\n  contextAdjust: function (context) {                                                                                  // 43\n    if (typeof context.atts.max === \"undefined\" && context.max instanceof Date) {                                      // 44\n      context.atts.max = AutoForm.Utility.dateToNormalizedForcedUtcGlobalDateAndTimeString(context.max);               // 45\n    }                                                                                                                  // 46\n    if (typeof context.atts.min === \"undefined\" && context.min instanceof Date) {                                      // 47\n      context.atts.min = AutoForm.Utility.dateToNormalizedForcedUtcGlobalDateAndTimeString(context.min);               // 48\n    }                                                                                                                  // 49\n    return context;                                                                                                    // 50\n  }                                                                                                                    // 51\n});                                                                                                                    // 52\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 3281\n}).call(this);                                                       // 3282\n                                                                     // 3283\n                                                                     // 3284\n                                                                     // 3285\n                                                                     // 3286\n                                                                     // 3287\n                                                                     // 3288\n(function () {                                                       // 3289\n                                                                     // 3290\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/datetime-local/template.datetime-local.js                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputDateTimeLocal\");                                                                          // 2\nTemplate[\"afInputDateTimeLocal\"] = new Template(\"Template.afInputDateTimeLocal\", (function() {                         // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"datetime-local\",                                                                                            // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 3312\n}).call(this);                                                       // 3313\n                                                                     // 3314\n                                                                     // 3315\n                                                                     // 3316\n                                                                     // 3317\n                                                                     // 3318\n                                                                     // 3319\n(function () {                                                       // 3320\n                                                                     // 3321\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/datetime-local/datetime-local.js                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"datetime-local\", {                                                                              // 1\n  template: \"afInputDateTimeLocal\",                                                                                    // 2\n  valueIn: function (val, atts) {                                                                                      // 3\n    //convert Date to string value                                                                                     // 4\n    return (val instanceof Date) ? AutoForm.Utility.dateToNormalizedLocalDateAndTimeString(val, atts.timezoneId) : val;\n  },                                                                                                                   // 6\n  valueOut: function () {                                                                                              // 7\n    var val = this.val();                                                                                              // 8\n    val = (typeof val === \"string\") ? val.replace(/ /g, \"T\") : val;                                                    // 9\n    if (AutoForm.Utility.isValidNormalizedLocalDateAndTimeString(val)) {                                               // 10\n      var timezoneId = this.attr(\"data-timezone-id\");                                                                  // 11\n      // default is local, but if there's a timezoneId, we use that                                                    // 12\n      if (typeof timezoneId === \"string\") {                                                                            // 13\n        if (typeof moment.tz !== \"function\") {                                                                         // 14\n          throw new Error(\"If you specify a timezoneId, make sure that you've added a moment-timezone package to your app\");\n        }                                                                                                              // 16\n        return moment.tz(val, timezoneId).toDate();                                                                    // 17\n      } else {                                                                                                         // 18\n        return moment(val).toDate();                                                                                   // 19\n      }                                                                                                                // 20\n    } else {                                                                                                           // 21\n      return this.val();                                                                                               // 22\n    }                                                                                                                  // 23\n  },                                                                                                                   // 24\n  valueConverters: {                                                                                                   // 25\n    \"string\": function (val) {                                                                                         // 26\n      return (val instanceof Date) ? AutoForm.Utility.dateToNormalizedLocalDateAndTimeString(val, this.attr(\"data-timezone-id\")) : val;\n    },                                                                                                                 // 28\n    \"stringArray\": function (val) {                                                                                    // 29\n      if (val instanceof Date) {                                                                                       // 30\n        return [AutoForm.Utility.dateToNormalizedLocalDateAndTimeString(val, this.attr(\"data-timezone-id\"))];          // 31\n      }                                                                                                                // 32\n      return val;                                                                                                      // 33\n    },                                                                                                                 // 34\n    \"number\": function (val) {                                                                                         // 35\n      return (val instanceof Date) ? val.getTime() : val;                                                              // 36\n    },                                                                                                                 // 37\n    \"numberArray\": function (val) {                                                                                    // 38\n      if (val instanceof Date) {                                                                                       // 39\n        return [val.getTime()];                                                                                        // 40\n      }                                                                                                                // 41\n      return val;                                                                                                      // 42\n    },                                                                                                                 // 43\n    \"dateArray\": function (val) {                                                                                      // 44\n      if (val instanceof Date) {                                                                                       // 45\n        return [val];                                                                                                  // 46\n      }                                                                                                                // 47\n      return val;                                                                                                      // 48\n    }                                                                                                                  // 49\n  },                                                                                                                   // 50\n  contextAdjust: function (context) {                                                                                  // 51\n    if (typeof context.atts.max === \"undefined\" && context.max instanceof Date) {                                      // 52\n      context.atts.max = AutoForm.Utility.dateToNormalizedLocalDateAndTimeString(context.max, context.atts.timezoneId);\n    }                                                                                                                  // 54\n    if (typeof context.atts.min === \"undefined\" && context.min instanceof Date) {                                      // 55\n      context.atts.min = AutoForm.Utility.dateToNormalizedLocalDateAndTimeString(context.min, context.atts.timezoneId);\n    }                                                                                                                  // 57\n    if (context.atts.timezoneId) {                                                                                     // 58\n      context.atts[\"data-timezone-id\"] = context.atts.timezoneId;                                                      // 59\n    }                                                                                                                  // 60\n    delete context.atts.timezoneId;                                                                                    // 61\n    return context;                                                                                                    // 62\n  }                                                                                                                    // 63\n});                                                                                                                    // 64\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 3393\n}).call(this);                                                       // 3394\n                                                                     // 3395\n                                                                     // 3396\n                                                                     // 3397\n                                                                     // 3398\n                                                                     // 3399\n                                                                     // 3400\n(function () {                                                       // 3401\n                                                                     // 3402\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/email/template.email.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputEmail\");                                                                                  // 2\nTemplate[\"afInputEmail\"] = new Template(\"Template.afInputEmail\", (function() {                                         // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"email\",                                                                                                     // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 3424\n}).call(this);                                                       // 3425\n                                                                     // 3426\n                                                                     // 3427\n                                                                     // 3428\n                                                                     // 3429\n                                                                     // 3430\n                                                                     // 3431\n(function () {                                                       // 3432\n                                                                     // 3433\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/email/email.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"email\", {                                                                                       // 1\n  template: \"afInputEmail\",                                                                                            // 2\n  contextAdjust: function (context) {                                                                                  // 3\n    if (typeof context.atts.maxlength === \"undefined\" && typeof context.max === \"number\") {                            // 4\n      context.atts.maxlength = context.max;                                                                            // 5\n    }                                                                                                                  // 6\n    return context;                                                                                                    // 7\n  }                                                                                                                    // 8\n});                                                                                                                    // 9\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 3450\n}).call(this);                                                       // 3451\n                                                                     // 3452\n                                                                     // 3453\n                                                                     // 3454\n                                                                     // 3455\n                                                                     // 3456\n                                                                     // 3457\n(function () {                                                       // 3458\n                                                                     // 3459\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/file/template.file.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputFile\");                                                                                   // 2\nTemplate[\"afInputFile\"] = new Template(\"Template.afInputFile\", (function() {                                           // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"file\",                                                                                                      // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 3481\n}).call(this);                                                       // 3482\n                                                                     // 3483\n                                                                     // 3484\n                                                                     // 3485\n                                                                     // 3486\n                                                                     // 3487\n                                                                     // 3488\n(function () {                                                       // 3489\n                                                                     // 3490\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/file/file.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"file\", {                                                                                        // 1\n  template: \"afInputFile\"                                                                                              // 2\n});                                                                                                                    // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 3501\n}).call(this);                                                       // 3502\n                                                                     // 3503\n                                                                     // 3504\n                                                                     // 3505\n                                                                     // 3506\n                                                                     // 3507\n                                                                     // 3508\n(function () {                                                       // 3509\n                                                                     // 3510\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/hidden/template.hidden.js                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputHidden\");                                                                                 // 2\nTemplate[\"afInputHidden\"] = new Template(\"Template.afInputHidden\", (function() {                                       // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"hidden\",                                                                                                    // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 3532\n}).call(this);                                                       // 3533\n                                                                     // 3534\n                                                                     // 3535\n                                                                     // 3536\n                                                                     // 3537\n                                                                     // 3538\n                                                                     // 3539\n(function () {                                                       // 3540\n                                                                     // 3541\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/hidden/hidden.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"hidden\", {                                                                                      // 1\n  template: \"afInputHidden\",                                                                                           // 2\n  valueOut: function () {                                                                                              // 3\n    return this.val();                                                                                                 // 4\n  },                                                                                                                   // 5\n  valueConverters: {                                                                                                   // 6\n    \"stringArray\": function (val) {                                                                                    // 7\n      if (typeof val === \"string\") {                                                                                   // 8\n        val = val.split(\",\");                                                                                          // 9\n        return _.map(val, function (item) {                                                                            // 10\n          return $.trim(item);                                                                                         // 11\n        });                                                                                                            // 12\n      }                                                                                                                // 13\n      return val;                                                                                                      // 14\n    },                                                                                                                 // 15\n    \"number\": AutoForm.Utility.stringToNumber,                                                                         // 16\n    \"numberArray\": function (val) {                                                                                    // 17\n      if (typeof val === \"string\") {                                                                                   // 18\n        val = val.split(\",\");                                                                                          // 19\n        return _.map(val, function (item) {                                                                            // 20\n          item = $.trim(item);                                                                                         // 21\n          return AutoForm.Utility.stringToNumber(item);                                                                // 22\n        });                                                                                                            // 23\n      }                                                                                                                // 24\n      return val;                                                                                                      // 25\n    },                                                                                                                 // 26\n    \"boolean\": AutoForm.Utility.stringToBool,                                                                          // 27\n    \"booleanArray\": function (val) {                                                                                   // 28\n      if (typeof val === \"string\") {                                                                                   // 29\n        val = val.split(\",\");                                                                                          // 30\n        return _.map(val, function (item) {                                                                            // 31\n          item = $.trim(item);                                                                                         // 32\n          return AutoForm.Utility.stringToBool(item);                                                                  // 33\n        });                                                                                                            // 34\n      }                                                                                                                // 35\n      return val;                                                                                                      // 36\n    },                                                                                                                 // 37\n    \"date\": AutoForm.Utility.stringToDate,                                                                             // 38\n    \"dateArray\": function (val) {                                                                                      // 39\n      if (typeof val === \"string\") {                                                                                   // 40\n        val = val.split(\",\");                                                                                          // 41\n        return _.map(val, function (item) {                                                                            // 42\n          item = $.trim(item);                                                                                         // 43\n          return AutoForm.Utility.stringToDate(item);                                                                  // 44\n        });                                                                                                            // 45\n      }                                                                                                                // 46\n      return val;                                                                                                      // 47\n    }                                                                                                                  // 48\n  }                                                                                                                    // 49\n});                                                                                                                    // 50\n                                                                                                                       // 51\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 3600\n}).call(this);                                                       // 3601\n                                                                     // 3602\n                                                                     // 3603\n                                                                     // 3604\n                                                                     // 3605\n                                                                     // 3606\n                                                                     // 3607\n(function () {                                                       // 3608\n                                                                     // 3609\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/image/template.image.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputImage\");                                                                                  // 2\nTemplate[\"afInputImage\"] = new Template(\"Template.afInputImage\", (function() {                                         // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"image\",                                                                                                     // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 3631\n}).call(this);                                                       // 3632\n                                                                     // 3633\n                                                                     // 3634\n                                                                     // 3635\n                                                                     // 3636\n                                                                     // 3637\n                                                                     // 3638\n(function () {                                                       // 3639\n                                                                     // 3640\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/image/image.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"image\", {                                                                                       // 1\n  template: \"afInputImage\"                                                                                             // 2\n});                                                                                                                    // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 3651\n}).call(this);                                                       // 3652\n                                                                     // 3653\n                                                                     // 3654\n                                                                     // 3655\n                                                                     // 3656\n                                                                     // 3657\n                                                                     // 3658\n(function () {                                                       // 3659\n                                                                     // 3660\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/month/template.month.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputMonth\");                                                                                  // 2\nTemplate[\"afInputMonth\"] = new Template(\"Template.afInputMonth\", (function() {                                         // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"month\",                                                                                                     // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 3682\n}).call(this);                                                       // 3683\n                                                                     // 3684\n                                                                     // 3685\n                                                                     // 3686\n                                                                     // 3687\n                                                                     // 3688\n                                                                     // 3689\n(function () {                                                       // 3690\n                                                                     // 3691\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/month/month.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"month\", {                                                                                       // 1\n  template: \"afInputMonth\",                                                                                            // 2\n  valueConverters: {                                                                                                   // 3\n    \"stringArray\": function (val) {                                                                                    // 4\n      if (typeof val === \"string\" && val.length > 0) {                                                                 // 5\n        return [val];                                                                                                  // 6\n      }                                                                                                                // 7\n      return val;                                                                                                      // 8\n    }                                                                                                                  // 9\n  }                                                                                                                    // 10\n});                                                                                                                    // 11\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 3710\n}).call(this);                                                       // 3711\n                                                                     // 3712\n                                                                     // 3713\n                                                                     // 3714\n                                                                     // 3715\n                                                                     // 3716\n                                                                     // 3717\n(function () {                                                       // 3718\n                                                                     // 3719\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/number/template.number.js                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputNumber\");                                                                                 // 2\nTemplate[\"afInputNumber\"] = new Template(\"Template.afInputNumber\", (function() {                                       // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"number\",                                                                                                    // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 3741\n}).call(this);                                                       // 3742\n                                                                     // 3743\n                                                                     // 3744\n                                                                     // 3745\n                                                                     // 3746\n                                                                     // 3747\n                                                                     // 3748\n(function () {                                                       // 3749\n                                                                     // 3750\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/number/number.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"number\", {                                                                                      // 1\n  template: \"afInputNumber\",                                                                                           // 2\n  valueOut: function () {                                                                                              // 3\n    return AutoForm.Utility.stringToNumber(this.val());                                                                // 4\n  },                                                                                                                   // 5\n  valueConverters: {                                                                                                   // 6\n    \"string\": function (val) {                                                                                         // 7\n      if (typeof val === \"number\") {                                                                                   // 8\n        return val.toString();                                                                                         // 9\n      }                                                                                                                // 10\n      return val;                                                                                                      // 11\n    },                                                                                                                 // 12\n    \"stringArray\": function (val) {                                                                                    // 13\n      if (typeof val === \"number\") {                                                                                   // 14\n        return [val.toString()];                                                                                       // 15\n      }                                                                                                                // 16\n      return val;                                                                                                      // 17\n    },                                                                                                                 // 18\n    \"numberArray\": function (val) {                                                                                    // 19\n      if (typeof val === \"number\") {                                                                                   // 20\n        return [val];                                                                                                  // 21\n      }                                                                                                                // 22\n      return val;                                                                                                      // 23\n    },                                                                                                                 // 24\n    \"boolean\": function (val) {                                                                                        // 25\n      if (val === 0) {                                                                                                 // 26\n        return false;                                                                                                  // 27\n      } else if (val === 1) {                                                                                          // 28\n        return true;                                                                                                   // 29\n      }                                                                                                                // 30\n      return val;                                                                                                      // 31\n    },                                                                                                                 // 32\n    \"booleanArray\": function (val) {                                                                                   // 33\n      if (val === 0) {                                                                                                 // 34\n        return [false];                                                                                                // 35\n      } else if (val === 1) {                                                                                          // 36\n        return [true];                                                                                                 // 37\n      }                                                                                                                // 38\n      return val;                                                                                                      // 39\n    }                                                                                                                  // 40\n  },                                                                                                                   // 41\n  contextAdjust: function (context) {                                                                                  // 42\n    if (typeof context.atts.max === \"undefined\" && typeof context.max === \"number\") {                                  // 43\n      context.atts.max = context.max;                                                                                  // 44\n    }                                                                                                                  // 45\n    if (typeof context.atts.min === \"undefined\" && typeof context.min === \"number\") {                                  // 46\n      context.atts.min = context.min;                                                                                  // 47\n    }                                                                                                                  // 48\n    if (typeof context.atts.step === \"undefined\" && context.decimal) {                                                 // 49\n      context.atts.step = '0.01';                                                                                      // 50\n    }                                                                                                                  // 51\n    return context;                                                                                                    // 52\n  }                                                                                                                    // 53\n});                                                                                                                    // 54\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 3812\n}).call(this);                                                       // 3813\n                                                                     // 3814\n                                                                     // 3815\n                                                                     // 3816\n                                                                     // 3817\n                                                                     // 3818\n                                                                     // 3819\n(function () {                                                       // 3820\n                                                                     // 3821\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/password/template.password.js                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputPassword\");                                                                               // 2\nTemplate[\"afInputPassword\"] = new Template(\"Template.afInputPassword\", (function() {                                   // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"password\",                                                                                                  // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 3843\n}).call(this);                                                       // 3844\n                                                                     // 3845\n                                                                     // 3846\n                                                                     // 3847\n                                                                     // 3848\n                                                                     // 3849\n                                                                     // 3850\n(function () {                                                       // 3851\n                                                                     // 3852\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/password/password.js                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"password\", {                                                                                    // 1\n  template: \"afInputPassword\",                                                                                         // 2\n  valueConverters: {                                                                                                   // 3\n    \"stringArray\": function (val) {                                                                                    // 4\n      if (typeof val === \"string\" && val.length > 0) {                                                                 // 5\n        return [val];                                                                                                  // 6\n      }                                                                                                                // 7\n      return val;                                                                                                      // 8\n    }                                                                                                                  // 9\n  },                                                                                                                   // 10\n  contextAdjust: function (context) {                                                                                  // 11\n    if (typeof context.atts.maxlength === \"undefined\" && typeof context.max === \"number\") {                            // 12\n      context.atts.maxlength = context.max;                                                                            // 13\n    }                                                                                                                  // 14\n    return context;                                                                                                    // 15\n  }                                                                                                                    // 16\n});                                                                                                                    // 17\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 3877\n}).call(this);                                                       // 3878\n                                                                     // 3879\n                                                                     // 3880\n                                                                     // 3881\n                                                                     // 3882\n                                                                     // 3883\n                                                                     // 3884\n(function () {                                                       // 3885\n                                                                     // 3886\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/radio/template.radio.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afRadio\");                                                                                       // 2\nTemplate[\"afRadio\"] = new Template(\"Template.afRadio\", (function() {                                                   // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                                   // 5\n    type: \"checkbox\",                                                                                                  // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 11\n  })), \" \", Blaze.View(function() {                                                                                    // 12\n    return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                          // 13\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                    // 14\n    }));                                                                                                               // 15\n  })));                                                                                                                // 16\n}));                                                                                                                   // 17\n                                                                                                                       // 18\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 3912\n}).call(this);                                                       // 3913\n                                                                     // 3914\n                                                                     // 3915\n                                                                     // 3916\n                                                                     // 3917\n                                                                     // 3918\n                                                                     // 3919\n(function () {                                                       // 3920\n                                                                     // 3921\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/radio/radio.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"radio\", {                                                                                       // 1\n  template: \"afRadio\",                                                                                                 // 2\n  valueOut: function () {                                                                                              // 3\n    if (this.is(\":checked\")) {                                                                                         // 4\n      return this.val();                                                                                               // 5\n    }                                                                                                                  // 6\n  },                                                                                                                   // 7\n  valueConverters: {                                                                                                   // 8\n    \"stringArray\": function (val) {                                                                                    // 9\n      if (typeof val === \"string\" && val.length > 0) {                                                                 // 10\n        return [val];                                                                                                  // 11\n      }                                                                                                                // 12\n      return val;                                                                                                      // 13\n    }                                                                                                                  // 14\n  }                                                                                                                    // 15\n});                                                                                                                    // 16\n                                                                                                                       // 17\nTemplate[\"afRadio\"].helpers({                                                                                          // 18\n  atts: function selectedAttsAdjust() {                                                                                // 19\n    var atts = _.clone(this.atts);                                                                                     // 20\n    if (this.selected) {                                                                                               // 21\n      atts.checked = \"\";                                                                                               // 22\n    }                                                                                                                  // 23\n    return atts;                                                                                                       // 24\n  }                                                                                                                    // 25\n});                                                                                                                    // 26\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 3955\n}).call(this);                                                       // 3956\n                                                                     // 3957\n                                                                     // 3958\n                                                                     // 3959\n                                                                     // 3960\n                                                                     // 3961\n                                                                     // 3962\n(function () {                                                       // 3963\n                                                                     // 3964\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/range/template.range.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputRange\");                                                                                  // 2\nTemplate[\"afInputRange\"] = new Template(\"Template.afInputRange\", (function() {                                         // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"range\",                                                                                                     // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 3986\n}).call(this);                                                       // 3987\n                                                                     // 3988\n                                                                     // 3989\n                                                                     // 3990\n                                                                     // 3991\n                                                                     // 3992\n                                                                     // 3993\n(function () {                                                       // 3994\n                                                                     // 3995\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/range/range.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"range\", {                                                                                       // 1\n  template: \"afInputRange\",                                                                                            // 2\n  valueOut: function () {                                                                                              // 3\n    return AutoForm.Utility.stringToNumber(this.val());                                                                // 4\n  },                                                                                                                   // 5\n  valueConverters: {                                                                                                   // 6\n    \"string\": function (val) {                                                                                         // 7\n      if (typeof val === \"number\") {                                                                                   // 8\n        return val.toString();                                                                                         // 9\n      }                                                                                                                // 10\n      return val;                                                                                                      // 11\n    },                                                                                                                 // 12\n    \"stringArray\": function (val) {                                                                                    // 13\n      if (typeof val === \"number\") {                                                                                   // 14\n        return [val.toString()];                                                                                       // 15\n      }                                                                                                                // 16\n      return val;                                                                                                      // 17\n    },                                                                                                                 // 18\n    \"numberArray\": function (val) {                                                                                    // 19\n      if (typeof val === \"number\") {                                                                                   // 20\n        return [val];                                                                                                  // 21\n      }                                                                                                                // 22\n      return val;                                                                                                      // 23\n    },                                                                                                                 // 24\n    \"boolean\": function (val) {                                                                                        // 25\n      if (val === 0) {                                                                                                 // 26\n        return false;                                                                                                  // 27\n      } else if (val === 1) {                                                                                          // 28\n        return true;                                                                                                   // 29\n      }                                                                                                                // 30\n      return val;                                                                                                      // 31\n    },                                                                                                                 // 32\n    \"booleanArray\": function (val) {                                                                                   // 33\n      if (val === 0) {                                                                                                 // 34\n        return [false];                                                                                                // 35\n      } else if (val === 1) {                                                                                          // 36\n        return [true];                                                                                                 // 37\n      }                                                                                                                // 38\n      return val;                                                                                                      // 39\n    }                                                                                                                  // 40\n  }                                                                                                                    // 41\n});                                                                                                                    // 42\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 4045\n}).call(this);                                                       // 4046\n                                                                     // 4047\n                                                                     // 4048\n                                                                     // 4049\n                                                                     // 4050\n                                                                     // 4051\n                                                                     // 4052\n(function () {                                                       // 4053\n                                                                     // 4054\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/reset/template.reset.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputReset\");                                                                                  // 2\nTemplate[\"afInputReset\"] = new Template(\"Template.afInputReset\", (function() {                                         // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"reset\",                                                                                                     // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 4076\n}).call(this);                                                       // 4077\n                                                                     // 4078\n                                                                     // 4079\n                                                                     // 4080\n                                                                     // 4081\n                                                                     // 4082\n                                                                     // 4083\n(function () {                                                       // 4084\n                                                                     // 4085\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/reset/reset.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"reset\", {                                                                                       // 1\n  template: \"afInputReset\"                                                                                             // 2\n});                                                                                                                    // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 4096\n}).call(this);                                                       // 4097\n                                                                     // 4098\n                                                                     // 4099\n                                                                     // 4100\n                                                                     // 4101\n                                                                     // 4102\n                                                                     // 4103\n(function () {                                                       // 4104\n                                                                     // 4105\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/search/template.search.js                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputSearch\");                                                                                 // 2\nTemplate[\"afInputSearch\"] = new Template(\"Template.afInputSearch\", (function() {                                       // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"search\",                                                                                                    // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 4127\n}).call(this);                                                       // 4128\n                                                                     // 4129\n                                                                     // 4130\n                                                                     // 4131\n                                                                     // 4132\n                                                                     // 4133\n                                                                     // 4134\n(function () {                                                       // 4135\n                                                                     // 4136\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/search/search.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"search\", {                                                                                      // 1\n  template: \"afInputSearch\",                                                                                           // 2\n  valueConverters: {                                                                                                   // 3\n    \"stringArray\": function (val) {                                                                                    // 4\n      if (typeof val === \"string\" && val.length > 0) {                                                                 // 5\n        return [val];                                                                                                  // 6\n      }                                                                                                                // 7\n      return val;                                                                                                      // 8\n    }                                                                                                                  // 9\n  },                                                                                                                   // 10\n  contextAdjust: function (context) {                                                                                  // 11\n    if (typeof context.atts.maxlength === \"undefined\" && typeof context.max === \"number\") {                            // 12\n      context.atts.maxlength = context.max;                                                                            // 13\n    }                                                                                                                  // 14\n    return context;                                                                                                    // 15\n  }                                                                                                                    // 16\n});                                                                                                                    // 17\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 4161\n}).call(this);                                                       // 4162\n                                                                     // 4163\n                                                                     // 4164\n                                                                     // 4165\n                                                                     // 4166\n                                                                     // 4167\n                                                                     // 4168\n(function () {                                                       // 4169\n                                                                     // 4170\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/select/template.select.js                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afSelect\");                                                                                      // 2\nTemplate[\"afSelect\"] = new Template(\"Template.afSelect\", (function() {                                                 // 3\n  var view = this;                                                                                                     // 4\n  return HTML.SELECT(HTML.Attrs(function() {                                                                           // 5\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 6\n  }), \"\\n    \", Blaze.Each(function() {                                                                                // 7\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 8\n  }, function() {                                                                                                      // 9\n    return [ \"\\n      \", Blaze.If(function() {                                                                         // 10\n      return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"optgroup\"));                                              // 11\n    }, function() {                                                                                                    // 12\n      return [ \"\\n        \", HTML.OPTGROUP({                                                                           // 13\n        label: function() {                                                                                            // 14\n          return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"optgroup\"));                                      // 15\n        }                                                                                                              // 16\n      }, \"\\n        \", Blaze.Each(function() {                                                                         // 17\n        return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                               // 18\n      }, function() {                                                                                                  // 19\n        return [ \"\\n        \", HTML.OPTION(HTML.Attrs(function() {                                                     // 20\n          return Spacebars.attrMustache(view.lookup(\"optionAtts\"));                                                    // 21\n        }), Blaze.View(function() {                                                                                    // 22\n          return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                         // 23\n        })), \"\\n        \" ];                                                                                           // 24\n      }), \"\\n        \"), \"\\n      \" ];                                                                                 // 25\n    }, function() {                                                                                                    // 26\n      return [ \"\\n        \", HTML.OPTION(HTML.Attrs(function() {                                                       // 27\n        return Spacebars.attrMustache(view.lookup(\"optionAtts\"));                                                      // 28\n      }), Blaze.View(function() {                                                                                      // 29\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                           // 30\n      })), \"\\n      \" ];                                                                                               // 31\n    }), \"\\n    \" ];                                                                                                    // 32\n  }), \"\\n  \");                                                                                                         // 33\n}));                                                                                                                   // 34\n                                                                                                                       // 35\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 4213\n}).call(this);                                                       // 4214\n                                                                     // 4215\n                                                                     // 4216\n                                                                     // 4217\n                                                                     // 4218\n                                                                     // 4219\n                                                                     // 4220\n(function () {                                                       // 4221\n                                                                     // 4222\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/select/select.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"select\", {                                                                                      // 1\n  template: \"afSelect\",                                                                                                // 2\n  valueOut: function () {                                                                                              // 3\n    return AutoForm.Utility.stringToNumber(this.val());                                                                // 4\n  },                                                                                                                   // 5\n  contextAdjust: function (context) {                                                                                  // 6\n    //can fix issues with some browsers selecting the firstOption instead of the selected option                       // 7\n    context.atts.autocomplete = \"off\";                                                                                 // 8\n                                                                                                                       // 9\n    var itemAtts = _.omit(context.atts, 'firstOption');                                                                // 10\n    var firstOption = context.atts.firstOption;                                                                        // 11\n                                                                                                                       // 12\n    // build items list                                                                                                // 13\n    context.items = [];                                                                                                // 14\n                                                                                                                       // 15\n    // If a firstOption was provided, add that to the items list first                                                 // 16\n    if (firstOption !== false) {                                                                                       // 17\n      context.items.push({                                                                                             // 18\n        name: context.name,                                                                                            // 19\n        label: (typeof firstOption === \"string\" ? firstOption : \"(Select One)\"),                                       // 20\n        value: \"\",                                                                                                     // 21\n        // _id must be included because it is a special property that                                                  // 22\n        // #each uses to track unique list items when adding and removing them                                         // 23\n        // See https://github.com/meteor/meteor/issues/2174                                                            // 24\n        _id: \"\",                                                                                                       // 25\n        selected: false,                                                                                               // 26\n        atts: itemAtts                                                                                                 // 27\n      });                                                                                                              // 28\n    }                                                                                                                  // 29\n                                                                                                                       // 30\n    // Add all defined options                                                                                         // 31\n    _.each(context.selectOptions, function(opt) {                                                                      // 32\n      if (opt.optgroup) {                                                                                              // 33\n        var subItems = _.map(opt.options, function(subOpt) {                                                           // 34\n          return {                                                                                                     // 35\n            name: context.name,                                                                                        // 36\n            label: subOpt.label,                                                                                       // 37\n            value: subOpt.value,                                                                                       // 38\n            // _id must be included because it is a special property that                                              // 39\n            // #each uses to track unique list items when adding and removing them                                     // 40\n            // See https://github.com/meteor/meteor/issues/2174                                                        // 41\n            _id: subOpt.value,                                                                                         // 42\n            selected: (subOpt.value === context.value),                                                                // 43\n            atts: itemAtts                                                                                             // 44\n          };                                                                                                           // 45\n        });                                                                                                            // 46\n        context.items.push({                                                                                           // 47\n          optgroup: opt.optgroup,                                                                                      // 48\n          items: subItems                                                                                              // 49\n        });                                                                                                            // 50\n      } else {                                                                                                         // 51\n        context.items.push({                                                                                           // 52\n          name: context.name,                                                                                          // 53\n          label: opt.label,                                                                                            // 54\n          value: opt.value,                                                                                            // 55\n          // _id must be included because it is a special property that                                                // 56\n          // #each uses to track unique list items when adding and removing them                                       // 57\n          // See https://github.com/meteor/meteor/issues/2174                                                          // 58\n          _id: opt.value,                                                                                              // 59\n          selected: (opt.value === context.value),                                                                     // 60\n          atts: itemAtts                                                                                               // 61\n        });                                                                                                            // 62\n      }                                                                                                                // 63\n    });                                                                                                                // 64\n                                                                                                                       // 65\n    return context;                                                                                                    // 66\n  }                                                                                                                    // 67\n});                                                                                                                    // 68\n                                                                                                                       // 69\nTemplate[\"afSelect\"].helpers({                                                                                         // 70\n  optionAtts: function afSelectOptionAtts() {                                                                          // 71\n    var item = this                                                                                                    // 72\n    var atts = {                                                                                                       // 73\n      value: item.value                                                                                                // 74\n    };                                                                                                                 // 75\n    if (item.selected) {                                                                                               // 76\n      atts.selected = \"\";                                                                                              // 77\n    }                                                                                                                  // 78\n    return atts;                                                                                                       // 79\n  }                                                                                                                    // 80\n});                                                                                                                    // 81\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 4311\n}).call(this);                                                       // 4312\n                                                                     // 4313\n                                                                     // 4314\n                                                                     // 4315\n                                                                     // 4316\n                                                                     // 4317\n                                                                     // 4318\n(function () {                                                       // 4319\n                                                                     // 4320\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/select-checkbox/template.select-checkbox.js                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afCheckboxGroup\");                                                                               // 2\nTemplate[\"afCheckboxGroup\"] = new Template(\"Template.afCheckboxGroup\", (function() {                                   // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.Attrs({                                                                                         // 5\n    \"class\": \"af-checkbox-group\"                                                                                       // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.attrMustache(view.lookup(\"dsk\"));                                                                 // 8\n  }), \"\\n    \", Blaze.Each(function() {                                                                                // 9\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 10\n  }, function() {                                                                                                      // 11\n    return [ \"\\n      \", HTML.DIV(HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                   // 12\n      type: \"checkbox\",                                                                                                // 13\n      value: function() {                                                                                              // 14\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                           // 15\n      }                                                                                                                // 16\n    }, function() {                                                                                                    // 17\n      return Spacebars.attrMustache(view.lookup(\"atts\"));                                                              // 18\n    })), \" \", Blaze.View(function() {                                                                                  // 19\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                             // 20\n    }))), \"\\n    \" ];                                                                                                  // 21\n  }), \"\\n  \");                                                                                                         // 22\n}));                                                                                                                   // 23\n                                                                                                                       // 24\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 4352\n}).call(this);                                                       // 4353\n                                                                     // 4354\n                                                                     // 4355\n                                                                     // 4356\n                                                                     // 4357\n                                                                     // 4358\n                                                                     // 4359\n(function () {                                                       // 4360\n                                                                     // 4361\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/select-checkbox/select-checkbox.js                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"select-checkbox\", {                                                                             // 1\n  template: \"afCheckboxGroup\",                                                                                         // 2\n  valueIsArray: true,                                                                                                  // 3\n  valueOut: function () {                                                                                              // 4\n    var val = [];                                                                                                      // 5\n    this.find('input[type=checkbox]').each(function () {                                                               // 6\n      if ($(this).is(\":checked\")) {                                                                                    // 7\n        val.push($(this).val());                                                                                       // 8\n      }                                                                                                                // 9\n    });                                                                                                                // 10\n    return val;                                                                                                        // 11\n  },                                                                                                                   // 12\n  contextAdjust: function (context) {                                                                                  // 13\n    var itemAtts = _.omit(context.atts);                                                                               // 14\n                                                                                                                       // 15\n    // build items list                                                                                                // 16\n    context.items = [];                                                                                                // 17\n                                                                                                                       // 18\n    // Add all defined options                                                                                         // 19\n    _.each(context.selectOptions, function(opt) {                                                                      // 20\n      context.items.push({                                                                                             // 21\n        name: context.name,                                                                                            // 22\n        label: opt.label,                                                                                              // 23\n        value: opt.value,                                                                                              // 24\n        // _id must be included because it is a special property that                                                  // 25\n        // #each uses to track unique list items when adding and removing them                                         // 26\n        // See https://github.com/meteor/meteor/issues/2174                                                            // 27\n        _id: opt.value,                                                                                                // 28\n        selected: (_.contains(context.value, opt.value)),                                                              // 29\n        atts: itemAtts                                                                                                 // 30\n      });                                                                                                              // 31\n    });                                                                                                                // 32\n                                                                                                                       // 33\n    return context;                                                                                                    // 34\n  }                                                                                                                    // 35\n});                                                                                                                    // 36\n                                                                                                                       // 37\nTemplate[\"afCheckboxGroup\"].helpers({                                                                                  // 38\n  atts: function selectedAttsAdjust() {                                                                                // 39\n    var atts = _.clone(this.atts);                                                                                     // 40\n    if (this.selected) {                                                                                               // 41\n      atts.checked = \"\";                                                                                               // 42\n    }                                                                                                                  // 43\n    // remove data-schema-key attribute because we put it                                                              // 44\n    // on the entire group                                                                                             // 45\n    delete atts[\"data-schema-key\"];                                                                                    // 46\n    return atts;                                                                                                       // 47\n  },                                                                                                                   // 48\n  dsk: function dsk() {                                                                                                // 49\n    return {                                                                                                           // 50\n      \"data-schema-key\": this.atts[\"data-schema-key\"]                                                                  // 51\n    }                                                                                                                  // 52\n  }                                                                                                                    // 53\n});                                                                                                                    // 54\n                                                                                                                       // 55\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 4424\n}).call(this);                                                       // 4425\n                                                                     // 4426\n                                                                     // 4427\n                                                                     // 4428\n                                                                     // 4429\n                                                                     // 4430\n                                                                     // 4431\n(function () {                                                       // 4432\n                                                                     // 4433\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/select-checkbox-inline/template.select-checkbox-inline.js                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afCheckboxGroupInline\");                                                                         // 2\nTemplate[\"afCheckboxGroupInline\"] = new Template(\"Template.afCheckboxGroupInline\", (function() {                       // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.Attrs({                                                                                         // 5\n    \"class\": \"af-checkbox-group\"                                                                                       // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.attrMustache(view.lookup(\"dsk\"));                                                                 // 8\n  }), \"\\n    \", Blaze.Each(function() {                                                                                // 9\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 10\n  }, function() {                                                                                                      // 11\n    return [ \"\\n      \", HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                            // 12\n      type: \"checkbox\",                                                                                                // 13\n      value: function() {                                                                                              // 14\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                           // 15\n      }                                                                                                                // 16\n    }, function() {                                                                                                    // 17\n      return Spacebars.attrMustache(view.lookup(\"atts\"));                                                              // 18\n    })), \" \", Blaze.View(function() {                                                                                  // 19\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                             // 20\n    })), \"\\n    \" ];                                                                                                   // 21\n  }), \"\\n  \");                                                                                                         // 22\n}));                                                                                                                   // 23\n                                                                                                                       // 24\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 4465\n}).call(this);                                                       // 4466\n                                                                     // 4467\n                                                                     // 4468\n                                                                     // 4469\n                                                                     // 4470\n                                                                     // 4471\n                                                                     // 4472\n(function () {                                                       // 4473\n                                                                     // 4474\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/select-checkbox-inline/select-checkbox-inline.js                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"select-checkbox-inline\", {                                                                      // 1\n  template: \"afCheckboxGroupInline\",                                                                                   // 2\n  valueIsArray: true,                                                                                                  // 3\n  valueOut: function () {                                                                                              // 4\n    var val = [];                                                                                                      // 5\n    this.find('input[type=checkbox]').each(function () {                                                               // 6\n      if ($(this).is(\":checked\")) {                                                                                    // 7\n        val.push($(this).val());                                                                                       // 8\n      }                                                                                                                // 9\n    });                                                                                                                // 10\n    return val;                                                                                                        // 11\n  },                                                                                                                   // 12\n  contextAdjust: function (context) {                                                                                  // 13\n    var itemAtts = _.omit(context.atts);                                                                               // 14\n                                                                                                                       // 15\n    // build items list                                                                                                // 16\n    context.items = [];                                                                                                // 17\n                                                                                                                       // 18\n    // Add all defined options                                                                                         // 19\n    _.each(context.selectOptions, function(opt) {                                                                      // 20\n      context.items.push({                                                                                             // 21\n        name: context.name,                                                                                            // 22\n        label: opt.label,                                                                                              // 23\n        value: opt.value,                                                                                              // 24\n        // _id must be included because it is a special property that                                                  // 25\n        // #each uses to track unique list items when adding and removing them                                         // 26\n        // See https://github.com/meteor/meteor/issues/2174                                                            // 27\n        _id: opt.value,                                                                                                // 28\n        selected: (_.contains(context.value, opt.value)),                                                              // 29\n        atts: itemAtts                                                                                                 // 30\n      });                                                                                                              // 31\n    });                                                                                                                // 32\n                                                                                                                       // 33\n    return context;                                                                                                    // 34\n  }                                                                                                                    // 35\n});                                                                                                                    // 36\n                                                                                                                       // 37\nTemplate[\"afCheckboxGroupInline\"].helpers({                                                                            // 38\n  atts: function selectedAttsAdjust() {                                                                                // 39\n    var atts = _.clone(this.atts);                                                                                     // 40\n    if (this.selected) {                                                                                               // 41\n      atts.checked = \"\";                                                                                               // 42\n    }                                                                                                                  // 43\n    // remove data-schema-key attribute because we put it                                                              // 44\n    // on the entire group                                                                                             // 45\n    delete atts[\"data-schema-key\"];                                                                                    // 46\n    return atts;                                                                                                       // 47\n  },                                                                                                                   // 48\n  dsk: function dsk() {                                                                                                // 49\n    return {                                                                                                           // 50\n      \"data-schema-key\": this.atts[\"data-schema-key\"]                                                                  // 51\n    }                                                                                                                  // 52\n  }                                                                                                                    // 53\n});                                                                                                                    // 54\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 4536\n}).call(this);                                                       // 4537\n                                                                     // 4538\n                                                                     // 4539\n                                                                     // 4540\n                                                                     // 4541\n                                                                     // 4542\n                                                                     // 4543\n(function () {                                                       // 4544\n                                                                     // 4545\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/select-multiple/template.select-multiple.js                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afSelectMultiple\");                                                                              // 2\nTemplate[\"afSelectMultiple\"] = new Template(\"Template.afSelectMultiple\", (function() {                                 // 3\n  var view = this;                                                                                                     // 4\n  return HTML.SELECT(HTML.Attrs({                                                                                      // 5\n    multiple: \"\"                                                                                                       // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 8\n  }), \"\\n    \", Blaze.Each(function() {                                                                                // 9\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 10\n  }, function() {                                                                                                      // 11\n    return [ \"\\n      \", Blaze.If(function() {                                                                         // 12\n      return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"optgroup\"));                                              // 13\n    }, function() {                                                                                                    // 14\n      return [ \"\\n        \", HTML.OPTGROUP({                                                                           // 15\n        label: function() {                                                                                            // 16\n          return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"optgroup\"));                                      // 17\n        }                                                                                                              // 18\n      }, \"\\n        \", Blaze.Each(function() {                                                                         // 19\n        return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                               // 20\n      }, function() {                                                                                                  // 21\n        return [ \"\\n        \", HTML.OPTION(HTML.Attrs(function() {                                                     // 22\n          return Spacebars.attrMustache(view.lookup(\"optionAtts\"));                                                    // 23\n        }), Blaze.View(function() {                                                                                    // 24\n          return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                         // 25\n        })), \"\\n        \" ];                                                                                           // 26\n      }), \"\\n        \"), \"\\n      \" ];                                                                                 // 27\n    }, function() {                                                                                                    // 28\n      return [ \"\\n        \", HTML.OPTION(HTML.Attrs(function() {                                                       // 29\n        return Spacebars.attrMustache(view.lookup(\"optionAtts\"));                                                      // 30\n      }), Blaze.View(function() {                                                                                      // 31\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                           // 32\n      })), \"\\n      \" ];                                                                                               // 33\n    }), \"\\n    \" ];                                                                                                    // 34\n  }), \"\\n  \");                                                                                                         // 35\n}));                                                                                                                   // 36\n                                                                                                                       // 37\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 4590\n}).call(this);                                                       // 4591\n                                                                     // 4592\n                                                                     // 4593\n                                                                     // 4594\n                                                                     // 4595\n                                                                     // 4596\n                                                                     // 4597\n(function () {                                                       // 4598\n                                                                     // 4599\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/select-multiple/select-multiple.js                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"select-multiple\", {                                                                             // 1\n  template: \"afSelectMultiple\",                                                                                        // 2\n  valueIsArray: true,                                                                                                  // 3\n  valueOut: function () {                                                                                              // 4\n    return AutoForm.Utility.getSelectValues(this[0]);                                                                  // 5\n  },                                                                                                                   // 6\n  contextAdjust: function (context) {                                                                                  // 7\n    // build items list                                                                                                // 8\n    context.items = _.map(context.selectOptions, function(opt) {                                                       // 9\n      if (opt.optgroup) {                                                                                              // 10\n        var subItems = _.map(opt.options, function(subOpt) {                                                           // 11\n          return {                                                                                                     // 12\n            name: context.name,                                                                                        // 13\n            label: subOpt.label,                                                                                       // 14\n            value: subOpt.value,                                                                                       // 15\n            // _id must be included because it is a special property that                                              // 16\n            // #each uses to track unique list items when adding and removing them                                     // 17\n            // See https://github.com/meteor/meteor/issues/2174                                                        // 18\n            _id: subOpt.value,                                                                                         // 19\n            selected: _.contains(context.value, subOpt.value),                                                         // 20\n            atts: context.atts                                                                                         // 21\n          };                                                                                                           // 22\n        });                                                                                                            // 23\n        return {                                                                                                       // 24\n          optgroup: opt.optgroup,                                                                                      // 25\n          items: subItems                                                                                              // 26\n        };                                                                                                             // 27\n      } else {                                                                                                         // 28\n        return {                                                                                                       // 29\n          name: context.name,                                                                                          // 30\n          label: opt.label,                                                                                            // 31\n          value: opt.value,                                                                                            // 32\n          // _id must be included because it is a special property that                                                // 33\n          // #each uses to track unique list items when adding and removing them                                       // 34\n          // See https://github.com/meteor/meteor/issues/2174                                                          // 35\n          _id: opt.value,                                                                                              // 36\n          selected: _.contains(context.value, opt.value),                                                              // 37\n          atts: context.atts                                                                                           // 38\n        };                                                                                                             // 39\n      }                                                                                                                // 40\n    });                                                                                                                // 41\n                                                                                                                       // 42\n    return context;                                                                                                    // 43\n  }                                                                                                                    // 44\n});                                                                                                                    // 45\n                                                                                                                       // 46\nTemplate[\"afSelectMultiple\"].helpers({                                                                                 // 47\n  optionAtts: function afSelectOptionAtts() {                                                                          // 48\n    var item = this;                                                                                                   // 49\n    var atts = {                                                                                                       // 50\n      value: item.value                                                                                                // 51\n    };                                                                                                                 // 52\n    if (item.selected) {                                                                                               // 53\n      atts.selected = \"\";                                                                                              // 54\n    }                                                                                                                  // 55\n    return atts;                                                                                                       // 56\n  }                                                                                                                    // 57\n});                                                                                                                    // 58\n                                                                                                                       // 59\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 4666\n}).call(this);                                                       // 4667\n                                                                     // 4668\n                                                                     // 4669\n                                                                     // 4670\n                                                                     // 4671\n                                                                     // 4672\n                                                                     // 4673\n(function () {                                                       // 4674\n                                                                     // 4675\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/select-radio/template.select-radio.js                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afRadioGroup\");                                                                                  // 2\nTemplate[\"afRadioGroup\"] = new Template(\"Template.afRadioGroup\", (function() {                                         // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.Attrs({                                                                                         // 5\n    \"class\": \"af-radio-group\"                                                                                          // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.attrMustache(view.lookup(\"dsk\"));                                                                 // 8\n  }), \"\\n  \", Blaze.Each(function() {                                                                                  // 9\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 10\n  }, function() {                                                                                                      // 11\n    return [ \"\\n    \", HTML.DIV(HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                     // 12\n      type: \"radio\",                                                                                                   // 13\n      value: function() {                                                                                              // 14\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                           // 15\n      }                                                                                                                // 16\n    }, function() {                                                                                                    // 17\n      return Spacebars.attrMustache(view.lookup(\"atts\"));                                                              // 18\n    })), \" \", Blaze.View(function() {                                                                                  // 19\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                             // 20\n    }))), \"\\n  \" ];                                                                                                    // 21\n  }), \"\\n  \");                                                                                                         // 22\n}));                                                                                                                   // 23\n                                                                                                                       // 24\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 4707\n}).call(this);                                                       // 4708\n                                                                     // 4709\n                                                                     // 4710\n                                                                     // 4711\n                                                                     // 4712\n                                                                     // 4713\n                                                                     // 4714\n(function () {                                                       // 4715\n                                                                     // 4716\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/select-radio/select-radio.js                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"select-radio\", {                                                                                // 1\n  template: \"afRadioGroup\",                                                                                            // 2\n  valueOut: function () {                                                                                              // 3\n    return this.find('input[type=radio]:checked').val();                                                               // 4\n  },                                                                                                                   // 5\n  contextAdjust: function (context) {                                                                                  // 6\n    var itemAtts = _.omit(context.atts);                                                                               // 7\n                                                                                                                       // 8\n    // build items list                                                                                                // 9\n    context.items = [];                                                                                                // 10\n                                                                                                                       // 11\n    // Add all defined options                                                                                         // 12\n    _.each(context.selectOptions, function(opt) {                                                                      // 13\n      context.items.push({                                                                                             // 14\n        name: context.name,                                                                                            // 15\n        label: opt.label,                                                                                              // 16\n        value: opt.value,                                                                                              // 17\n        // _id must be included because it is a special property that                                                  // 18\n        // #each uses to track unique list items when adding and removing them                                         // 19\n        // See https://github.com/meteor/meteor/issues/2174                                                            // 20\n        _id: opt.value,                                                                                                // 21\n        selected: (opt.value === context.value),                                                                       // 22\n        atts: itemAtts                                                                                                 // 23\n      });                                                                                                              // 24\n    });                                                                                                                // 25\n                                                                                                                       // 26\n    return context;                                                                                                    // 27\n  }                                                                                                                    // 28\n});                                                                                                                    // 29\n                                                                                                                       // 30\nTemplate[\"afRadioGroup\"].helpers({                                                                                     // 31\n  atts: function selectedAttsAdjust() {                                                                                // 32\n    var atts = _.clone(this.atts);                                                                                     // 33\n    if (this.selected) {                                                                                               // 34\n      atts.checked = \"\";                                                                                               // 35\n    }                                                                                                                  // 36\n    // remove data-schema-key attribute because we put it                                                              // 37\n    // on the entire group                                                                                             // 38\n    delete atts[\"data-schema-key\"];                                                                                    // 39\n    return atts;                                                                                                       // 40\n  },                                                                                                                   // 41\n  dsk: function dsk() {                                                                                                // 42\n    return {                                                                                                           // 43\n      \"data-schema-key\": this.atts[\"data-schema-key\"]                                                                  // 44\n    }                                                                                                                  // 45\n  }                                                                                                                    // 46\n});                                                                                                                    // 47\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 4771\n}).call(this);                                                       // 4772\n                                                                     // 4773\n                                                                     // 4774\n                                                                     // 4775\n                                                                     // 4776\n                                                                     // 4777\n                                                                     // 4778\n(function () {                                                       // 4779\n                                                                     // 4780\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/select-radio-inline/template.select-radio-inline.js                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afRadioGroupInline\");                                                                            // 2\nTemplate[\"afRadioGroupInline\"] = new Template(\"Template.afRadioGroupInline\", (function() {                             // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.Attrs({                                                                                         // 5\n    \"class\": \"af-radio-group\"                                                                                          // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.attrMustache(view.lookup(\"dsk\"));                                                                 // 8\n  }), \"\\n  \", Blaze.Each(function() {                                                                                  // 9\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 10\n  }, function() {                                                                                                      // 11\n    return [ \"\\n    \", HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                              // 12\n      type: \"radio\",                                                                                                   // 13\n      value: function() {                                                                                              // 14\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                           // 15\n      }                                                                                                                // 16\n    }, function() {                                                                                                    // 17\n      return Spacebars.attrMustache(view.lookup(\"atts\"));                                                              // 18\n    })), \" \", Blaze.View(function() {                                                                                  // 19\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                             // 20\n    })), \"\\n  \" ];                                                                                                     // 21\n  }), \"\\n  \");                                                                                                         // 22\n}));                                                                                                                   // 23\n                                                                                                                       // 24\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 4812\n}).call(this);                                                       // 4813\n                                                                     // 4814\n                                                                     // 4815\n                                                                     // 4816\n                                                                     // 4817\n                                                                     // 4818\n                                                                     // 4819\n(function () {                                                       // 4820\n                                                                     // 4821\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/select-radio-inline/select-radio-inline.js                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"select-radio-inline\", {                                                                         // 1\n  template: \"afRadioGroupInline\",                                                                                      // 2\n  valueOut: function () {                                                                                              // 3\n    return this.find('input[type=radio]:checked').val();                                                               // 4\n  },                                                                                                                   // 5\n  contextAdjust: function (context) {                                                                                  // 6\n    var itemAtts = _.omit(context.atts);                                                                               // 7\n                                                                                                                       // 8\n    // build items list                                                                                                // 9\n    context.items = [];                                                                                                // 10\n                                                                                                                       // 11\n    // Add all defined options                                                                                         // 12\n    _.each(context.selectOptions, function(opt) {                                                                      // 13\n      context.items.push({                                                                                             // 14\n        name: context.name,                                                                                            // 15\n        label: opt.label,                                                                                              // 16\n        value: opt.value,                                                                                              // 17\n        // _id must be included because it is a special property that                                                  // 18\n        // #each uses to track unique list items when adding and removing them                                         // 19\n        // See https://github.com/meteor/meteor/issues/2174                                                            // 20\n        _id: opt.value,                                                                                                // 21\n        selected: (opt.value === context.value),                                                                       // 22\n        atts: itemAtts                                                                                                 // 23\n      });                                                                                                              // 24\n    });                                                                                                                // 25\n                                                                                                                       // 26\n    return context;                                                                                                    // 27\n  }                                                                                                                    // 28\n});                                                                                                                    // 29\n                                                                                                                       // 30\nTemplate[\"afRadioGroupInline\"].helpers({                                                                               // 31\n  atts: function selectedAttsAdjust() {                                                                                // 32\n    var atts = _.clone(this.atts);                                                                                     // 33\n    if (this.selected) {                                                                                               // 34\n      atts.checked = \"\";                                                                                               // 35\n    }                                                                                                                  // 36\n    // remove data-schema-key attribute because we put it                                                              // 37\n    // on the entire group                                                                                             // 38\n    delete atts[\"data-schema-key\"];                                                                                    // 39\n    return atts;                                                                                                       // 40\n  },                                                                                                                   // 41\n  dsk: function dsk() {                                                                                                // 42\n    return {                                                                                                           // 43\n      \"data-schema-key\": this.atts[\"data-schema-key\"]                                                                  // 44\n    }                                                                                                                  // 45\n  }                                                                                                                    // 46\n});                                                                                                                    // 47\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 4876\n}).call(this);                                                       // 4877\n                                                                     // 4878\n                                                                     // 4879\n                                                                     // 4880\n                                                                     // 4881\n                                                                     // 4882\n                                                                     // 4883\n(function () {                                                       // 4884\n                                                                     // 4885\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/submit/template.submit.js                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputSubmit\");                                                                                 // 2\nTemplate[\"afInputSubmit\"] = new Template(\"Template.afInputSubmit\", (function() {                                       // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"submit\",                                                                                                    // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 4907\n}).call(this);                                                       // 4908\n                                                                     // 4909\n                                                                     // 4910\n                                                                     // 4911\n                                                                     // 4912\n                                                                     // 4913\n                                                                     // 4914\n(function () {                                                       // 4915\n                                                                     // 4916\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/submit/submit.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"submit\", {                                                                                      // 1\n  template: \"afInputSubmit\"                                                                                            // 2\n});                                                                                                                    // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 4927\n}).call(this);                                                       // 4928\n                                                                     // 4929\n                                                                     // 4930\n                                                                     // 4931\n                                                                     // 4932\n                                                                     // 4933\n                                                                     // 4934\n(function () {                                                       // 4935\n                                                                     // 4936\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/tel/template.tel.js                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputTel\");                                                                                    // 2\nTemplate[\"afInputTel\"] = new Template(\"Template.afInputTel\", (function() {                                             // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"tel\",                                                                                                       // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 4958\n}).call(this);                                                       // 4959\n                                                                     // 4960\n                                                                     // 4961\n                                                                     // 4962\n                                                                     // 4963\n                                                                     // 4964\n                                                                     // 4965\n(function () {                                                       // 4966\n                                                                     // 4967\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/tel/tel.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"tel\", {                                                                                         // 1\n  template: \"afInputTel\",                                                                                              // 2\n  valueConverters: {                                                                                                   // 3\n    \"stringArray\": function (val) {                                                                                    // 4\n      if (typeof val === \"string\" && val.length > 0) {                                                                 // 5\n        return [val];                                                                                                  // 6\n      }                                                                                                                // 7\n      return val;                                                                                                      // 8\n    }                                                                                                                  // 9\n  },                                                                                                                   // 10\n  contextAdjust: function (context) {                                                                                  // 11\n    if (typeof context.atts.maxlength === \"undefined\" && typeof context.max === \"number\") {                            // 12\n      context.atts.maxlength = context.max;                                                                            // 13\n    }                                                                                                                  // 14\n    return context;                                                                                                    // 15\n  }                                                                                                                    // 16\n});                                                                                                                    // 17\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 4992\n}).call(this);                                                       // 4993\n                                                                     // 4994\n                                                                     // 4995\n                                                                     // 4996\n                                                                     // 4997\n                                                                     // 4998\n                                                                     // 4999\n(function () {                                                       // 5000\n                                                                     // 5001\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/text/template.text.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputText\");                                                                                   // 2\nTemplate[\"afInputText\"] = new Template(\"Template.afInputText\", (function() {                                           // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"text\",                                                                                                      // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 5023\n}).call(this);                                                       // 5024\n                                                                     // 5025\n                                                                     // 5026\n                                                                     // 5027\n                                                                     // 5028\n                                                                     // 5029\n                                                                     // 5030\n(function () {                                                       // 5031\n                                                                     // 5032\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/text/text.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"text\", {                                                                                        // 1\n  template: \"afInputText\",                                                                                             // 2\n  valueOut: function () {                                                                                              // 3\n    return this.val();                                                                                                 // 4\n  },                                                                                                                   // 5\n  valueConverters: {                                                                                                   // 6\n    \"stringArray\": function (val) {                                                                                    // 7\n      if (typeof val === \"string\") {                                                                                   // 8\n        val = val.split(\",\");                                                                                          // 9\n        return _.map(val, function (item) {                                                                            // 10\n          return $.trim(item);                                                                                         // 11\n        });                                                                                                            // 12\n      }                                                                                                                // 13\n      return val;                                                                                                      // 14\n    },                                                                                                                 // 15\n    \"number\": AutoForm.Utility.stringToNumber,                                                                         // 16\n    \"numberArray\": function (val) {                                                                                    // 17\n      if (typeof val === \"string\") {                                                                                   // 18\n        val = val.split(\",\");                                                                                          // 19\n        return _.map(val, function (item) {                                                                            // 20\n          item = $.trim(item);                                                                                         // 21\n          return AutoForm.Utility.stringToNumber(item);                                                                // 22\n        });                                                                                                            // 23\n      }                                                                                                                // 24\n      return val;                                                                                                      // 25\n    },                                                                                                                 // 26\n    \"boolean\": AutoForm.Utility.stringToBool,                                                                          // 27\n    \"booleanArray\": function (val) {                                                                                   // 28\n      if (typeof val === \"string\") {                                                                                   // 29\n        val = val.split(\",\");                                                                                          // 30\n        return _.map(val, function (item) {                                                                            // 31\n          item = $.trim(item);                                                                                         // 32\n          return AutoForm.Utility.stringToBool(item);                                                                  // 33\n        });                                                                                                            // 34\n      }                                                                                                                // 35\n      return val;                                                                                                      // 36\n    },                                                                                                                 // 37\n    \"date\": AutoForm.Utility.stringToDate,                                                                             // 38\n    \"dateArray\": function (val) {                                                                                      // 39\n      if (typeof val === \"string\") {                                                                                   // 40\n        val = val.split(\",\");                                                                                          // 41\n        return _.map(val, function (item) {                                                                            // 42\n          item = $.trim(item);                                                                                         // 43\n          return AutoForm.Utility.stringToDate(item);                                                                  // 44\n        });                                                                                                            // 45\n      }                                                                                                                // 46\n      return val;                                                                                                      // 47\n    }                                                                                                                  // 48\n  },                                                                                                                   // 49\n  contextAdjust: function (context) {                                                                                  // 50\n    if (typeof context.atts.maxlength === \"undefined\" && typeof context.max === \"number\") {                            // 51\n      context.atts.maxlength = context.max;                                                                            // 52\n    }                                                                                                                  // 53\n    return context;                                                                                                    // 54\n  }                                                                                                                    // 55\n});                                                                                                                    // 56\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 5096\n}).call(this);                                                       // 5097\n                                                                     // 5098\n                                                                     // 5099\n                                                                     // 5100\n                                                                     // 5101\n                                                                     // 5102\n                                                                     // 5103\n(function () {                                                       // 5104\n                                                                     // 5105\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/textarea/template.textarea.js                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afTextarea\");                                                                                    // 2\nTemplate[\"afTextarea\"] = new Template(\"Template.afTextarea\", (function() {                                             // 3\n  var view = this;                                                                                                     // 4\n  return HTML.TEXTAREA(HTML.Attrs(function() {                                                                         // 5\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 6\n  }, {                                                                                                                 // 7\n    value: function() {                                                                                                // 8\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 9\n    }                                                                                                                  // 10\n  }));                                                                                                                 // 11\n}));                                                                                                                   // 12\n                                                                                                                       // 13\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 5126\n}).call(this);                                                       // 5127\n                                                                     // 5128\n                                                                     // 5129\n                                                                     // 5130\n                                                                     // 5131\n                                                                     // 5132\n                                                                     // 5133\n(function () {                                                       // 5134\n                                                                     // 5135\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/textarea/textarea.js                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"textarea\", {                                                                                    // 1\n  template: \"afTextarea\",                                                                                              // 2\n  valueConverters: {                                                                                                   // 3\n    \"string\": function (val) {                                                                                         // 4\n      return val;                                                                                                      // 5\n    },                                                                                                                 // 6\n    \"stringArray\": function (val) {                                                                                    // 7\n      if (typeof val === \"string\" && val.length > 0) {                                                                 // 8\n        return linesToArray(val);                                                                                      // 9\n      }                                                                                                                // 10\n      return val;                                                                                                      // 11\n    },                                                                                                                 // 12\n    \"number\": AutoForm.Utility.stringToNumber,                                                                         // 13\n    \"numberArray\": function (val) {                                                                                    // 14\n      if (typeof val === \"string\" && val.length > 0) {                                                                 // 15\n        var arr = linesToArray(val);                                                                                   // 16\n        return _.map(arr, function (item) {                                                                            // 17\n          return AutoForm.Utility.stringToNumber(item);                                                                // 18\n        });                                                                                                            // 19\n      }                                                                                                                // 20\n      return val;                                                                                                      // 21\n    },                                                                                                                 // 22\n    \"boolean\": AutoForm.Utility.stringToBool,                                                                          // 23\n    \"booleanArray\": function (val) {                                                                                   // 24\n      if (typeof val === \"string\" && val.length > 0) {                                                                 // 25\n        var arr = linesToArray(val);                                                                                   // 26\n        return _.map(arr, function (item) {                                                                            // 27\n          return AutoForm.Utility.stringToBool(item);                                                                  // 28\n        });                                                                                                            // 29\n      }                                                                                                                // 30\n      return val;                                                                                                      // 31\n    },                                                                                                                 // 32\n    \"date\": AutoForm.Utility.stringToDate,                                                                             // 33\n    \"dateArray\": function (val) {                                                                                      // 34\n      if (typeof val === \"string\" && val.length > 0) {                                                                 // 35\n        var arr = linesToArray(val);                                                                                   // 36\n        return _.map(arr, function (item) {                                                                            // 37\n          return AutoForm.Utility.stringToDate(item);                                                                  // 38\n        });                                                                                                            // 39\n      }                                                                                                                // 40\n      return val;                                                                                                      // 41\n    }                                                                                                                  // 42\n  },                                                                                                                   // 43\n  contextAdjust: function (context) {                                                                                  // 44\n    if (typeof context.atts.maxlength === \"undefined\" && typeof context.max === \"number\") {                            // 45\n      context.atts.maxlength = context.max;                                                                            // 46\n    }                                                                                                                  // 47\n    return context;                                                                                                    // 48\n  }                                                                                                                    // 49\n});                                                                                                                    // 50\n                                                                                                                       // 51\nfunction linesToArray(text) {                                                                                          // 52\n  text = text.split('\\n');                                                                                             // 53\n  var lines = [];                                                                                                      // 54\n  _.each(text, function (line) {                                                                                       // 55\n    line = $.trim(line);                                                                                               // 56\n    if (line.length) {                                                                                                 // 57\n      lines.push(line);                                                                                                // 58\n    }                                                                                                                  // 59\n  });                                                                                                                  // 60\n  return lines;                                                                                                        // 61\n}                                                                                                                      // 62\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 5205\n}).call(this);                                                       // 5206\n                                                                     // 5207\n                                                                     // 5208\n                                                                     // 5209\n                                                                     // 5210\n                                                                     // 5211\n                                                                     // 5212\n(function () {                                                       // 5213\n                                                                     // 5214\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/time/template.time.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputTime\");                                                                                   // 2\nTemplate[\"afInputTime\"] = new Template(\"Template.afInputTime\", (function() {                                           // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"time\",                                                                                                      // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 5236\n}).call(this);                                                       // 5237\n                                                                     // 5238\n                                                                     // 5239\n                                                                     // 5240\n                                                                     // 5241\n                                                                     // 5242\n                                                                     // 5243\n(function () {                                                       // 5244\n                                                                     // 5245\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/time/time.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"time\", {                                                                                        // 1\n  template: \"afInputTime\",                                                                                             // 2\n  valueConverters: {                                                                                                   // 3\n    \"stringArray\": function (val) {                                                                                    // 4\n      if (typeof val === \"string\" && val.length > 0) {                                                                 // 5\n        return [val];                                                                                                  // 6\n      }                                                                                                                // 7\n      return val;                                                                                                      // 8\n    }                                                                                                                  // 9\n  }                                                                                                                    // 10\n});                                                                                                                    // 11\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 5264\n}).call(this);                                                       // 5265\n                                                                     // 5266\n                                                                     // 5267\n                                                                     // 5268\n                                                                     // 5269\n                                                                     // 5270\n                                                                     // 5271\n(function () {                                                       // 5272\n                                                                     // 5273\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/url/template.url.js                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputUrl\");                                                                                    // 2\nTemplate[\"afInputUrl\"] = new Template(\"Template.afInputUrl\", (function() {                                             // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"url\",                                                                                                       // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 5295\n}).call(this);                                                       // 5296\n                                                                     // 5297\n                                                                     // 5298\n                                                                     // 5299\n                                                                     // 5300\n                                                                     // 5301\n                                                                     // 5302\n(function () {                                                       // 5303\n                                                                     // 5304\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/url/url.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"url\", {                                                                                         // 1\n  template: \"afInputUrl\",                                                                                              // 2\n  valueConverters: {                                                                                                   // 3\n    \"stringArray\": function (val) {                                                                                    // 4\n      if (typeof val === \"string\" && val.length > 0) {                                                                 // 5\n        return [val];                                                                                                  // 6\n      }                                                                                                                // 7\n      return val;                                                                                                      // 8\n    }                                                                                                                  // 9\n  },                                                                                                                   // 10\n  contextAdjust: function (context) {                                                                                  // 11\n    if (typeof context.atts.maxlength === \"undefined\" && typeof context.max === \"number\") {                            // 12\n      context.atts.maxlength = context.max;                                                                            // 13\n    }                                                                                                                  // 14\n    return context;                                                                                                    // 15\n  }                                                                                                                    // 16\n});                                                                                                                    // 17\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 5329\n}).call(this);                                                       // 5330\n                                                                     // 5331\n                                                                     // 5332\n                                                                     // 5333\n                                                                     // 5334\n                                                                     // 5335\n                                                                     // 5336\n(function () {                                                       // 5337\n                                                                     // 5338\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/week/template.week.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputWeek\");                                                                                   // 2\nTemplate[\"afInputWeek\"] = new Template(\"Template.afInputWeek\", (function() {                                           // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"week\",                                                                                                      // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 5360\n}).call(this);                                                       // 5361\n                                                                     // 5362\n                                                                     // 5363\n                                                                     // 5364\n                                                                     // 5365\n                                                                     // 5366\n                                                                     // 5367\n(function () {                                                       // 5368\n                                                                     // 5369\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/week/week.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"week\", {                                                                                        // 1\n  template: \"afInputWeek\",                                                                                             // 2\n  valueConverters: {                                                                                                   // 3\n    \"stringArray\": function (val) {                                                                                    // 4\n      if (typeof val === \"string\" && val.length > 0) {                                                                 // 5\n        return [val];                                                                                                  // 6\n      }                                                                                                                // 7\n      return val;                                                                                                      // 8\n    }                                                                                                                  // 9\n  }                                                                                                                    // 10\n});                                                                                                                    // 11\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 5388\n}).call(this);                                                       // 5389\n                                                                     // 5390\n                                                                     // 5391\n                                                                     // 5392\n                                                                     // 5393\n                                                                     // 5394\n                                                                     // 5395\n(function () {                                                       // 5396\n                                                                     // 5397\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/autoForm/template.autoForm.js                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"autoForm\");                                                                                      // 2\nTemplate[\"autoForm\"] = new Template(\"Template.autoForm\", (function() {                                                 // 3\n  var view = this;                                                                                                     // 4\n  return Blaze.Unless(function() {                                                                                     // 5\n    return Spacebars.call(view.lookup(\"afDestroyUpdateForm\"));                                                         // 6\n  }, function() {                                                                                                      // 7\n    return [ \"\\n  \\n  \\n  \", HTML.FORM(HTML.Attrs(function() {                                                         // 8\n      return Spacebars.attrMustache(view.lookup(\"atts\"));                                                              // 9\n    }), \"\\n    \", Spacebars.With(function() {                                                                          // 10\n      return Spacebars.dataMustache(view.lookup(\"innerContext\"), view.lookup(\"..\"));                                   // 11\n    }, function() {                                                                                                    // 12\n      return [ \"\\n    \", Blaze._InOuterTemplateScope(view, function() {                                                // 13\n        return Blaze._TemplateWith(function() {                                                                        // 14\n          return Spacebars.call(view.lookup(\".\"));                                                                     // 15\n        }, function() {                                                                                                // 16\n          return Spacebars.include(function() {                                                                        // 17\n            return Spacebars.call(view.templateContentBlock);                                                          // 18\n          });                                                                                                          // 19\n        });                                                                                                            // 20\n      }), \"\\n    \" ];                                                                                                  // 21\n    }), \"\\n  \"), \"\\n  \" ];                                                                                             // 22\n  });                                                                                                                  // 23\n}));                                                                                                                   // 24\n                                                                                                                       // 25\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 5430\n}).call(this);                                                       // 5431\n                                                                     // 5432\n                                                                     // 5433\n                                                                     // 5434\n                                                                     // 5435\n                                                                     // 5436\n                                                                     // 5437\n(function () {                                                       // 5438\n                                                                     // 5439\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/autoForm/autoForm.js                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar contextDependency = new Tracker.Dependency();                                                                      // 1\n                                                                                                                       // 2\nTemplate.autoForm.helpers({                                                                                            // 3\n  atts: function autoFormTplAtts() {                                                                                   // 4\n    var context = _.clone(this);                                                                                       // 5\n                                                                                                                       // 6\n    // By default, we add the `novalidate=\"novalidate\"` attribute to our form,                                         // 7\n    // unless the user passes `validation=\"browser\"`.                                                                  // 8\n    if (context.validation !== \"browser\" && !context.novalidate) {                                                     // 9\n      context.novalidate = \"novalidate\";                                                                               // 10\n    }                                                                                                                  // 11\n    // After removing all of the props we know about, everything else should                                           // 12\n    // become a form attribute.                                                                                        // 13\n    // XXX Would be better to use a whitelist of HTML attributes allowed on form elements                              // 14\n    return _.omit(context, \"schema\", \"collection\", \"validation\", \"doc\", \"resetOnSuccess\",                              // 15\n        \"type\", \"template\", \"autosave\", \"meteormethod\", \"filter\", \"autoConvert\", \"removeEmptyStrings\", \"trimStrings\"); // 16\n  },                                                                                                                   // 17\n  innerContext: function autoFormTplContext(outerContext) {                                                            // 18\n    var formId = this.id || defaultFormId;                                                                             // 19\n                                                                                                                       // 20\n    contextDependency.depend();                                                                                        // 21\n                                                                                                                       // 22\n    // Set up the context to be used for everything within the autoform.                                               // 23\n    var innerContext = {_af: formData[formId]};                                                                        // 24\n                                                                                                                       // 25\n    // Preserve outer context, allowing access within autoForm block without needing ..                                // 26\n    _.extend(innerContext, outerContext);                                                                              // 27\n    return innerContext;                                                                                               // 28\n  },                                                                                                                   // 29\n  afDestroyUpdateForm: function () {                                                                                   // 30\n    return afDestroyUpdateForm.get();                                                                                  // 31\n  }                                                                                                                    // 32\n});                                                                                                                    // 33\n                                                                                                                       // 34\nTemplate.autoForm.created = function autoFormCreated() {                                                               // 35\n  var template = this;                                                                                                 // 36\n                                                                                                                       // 37\n  template.autorun(function () {                                                                                       // 38\n    var data = Template.currentData(); // rerun when current data changes                                              // 39\n    var formId = data.id || defaultFormId;                                                                             // 40\n                                                                                                                       // 41\n    // rerun when manually invalidated                                                                                 // 42\n    if (!formDeps[formId]) {                                                                                           // 43\n      formDeps[formId] = new Tracker.Dependency();                                                                     // 44\n    }                                                                                                                  // 45\n    formDeps[formId].depend();                                                                                         // 46\n                                                                                                                       // 47\n    // cache template instance for lookup by formId                                                                    // 48\n    templatesById[formId] = template;                                                                                  // 49\n                                                                                                                       // 50\n    // When we change the form, loading a different doc, reloading the current doc, etc.,                              // 51\n    // we also want to reset the array counts for the form                                                             // 52\n    arrayTracker.resetForm(formId);                                                                                    // 53\n                                                                                                                       // 54\n    var collection = AutoForm.Utility.lookup(data.collection);                                                         // 55\n    var ss = AutoForm.Utility.getSimpleSchemaFromContext(data, formId);                                                // 56\n                                                                                                                       // 57\n    // Clone the doc so that docToForm and other modifications do not change                                           // 58\n    // the original referenced object.                                                                                 // 59\n    var doc = data.doc ? EJSON.clone(data.doc) : null;                                                                 // 60\n                                                                                                                       // 61\n    // Update cached form values for hot code reload persistence                                                       // 62\n    if (data.preserveForm === false) {                                                                                 // 63\n      formPreserve.unregisterForm(formId);                                                                             // 64\n    } else if (!formPreserve.formIsRegistered(formId)) {                                                               // 65\n      formPreserve.registerForm(formId, function autoFormRegFormCallback() {                                           // 66\n        return getFormValues(template, formId, ss).insertDoc;                                                          // 67\n      });                                                                                                              // 68\n    }                                                                                                                  // 69\n                                                                                                                       // 70\n    // Retain doc values after a \"hot code push\", if possible                                                          // 71\n    var retrievedDoc = formPreserve.getDocument(formId);                                                               // 72\n    if (retrievedDoc !== false) {                                                                                      // 73\n      // Ensure we keep the _id property which may not be present in retrievedDoc.                                     // 74\n      doc = _.extend(doc || {}, retrievedDoc);                                                                         // 75\n    }                                                                                                                  // 76\n                                                                                                                       // 77\n    var mDoc;                                                                                                          // 78\n    if (doc && !_.isEmpty(doc)) {                                                                                      // 79\n      var hookCtx = {formId: formId};                                                                                  // 80\n      // Pass doc through docToForm hooks                                                                              // 81\n      _.each(Hooks.getHooks(formId, 'docToForm'), function autoFormEachDocToForm(hook) {                               // 82\n        doc = hook.call(hookCtx, doc, ss, formId);                                                                     // 83\n      });                                                                                                              // 84\n      // Create a \"flat doc\" that can be used to easily get values for corresponding                                   // 85\n      // form fields.                                                                                                  // 86\n      mDoc = new MongoObject(doc);                                                                                     // 87\n      fd.sourceDoc(formId, mDoc);                                                                                      // 88\n    } else {                                                                                                           // 89\n      fd.sourceDoc(formId, null);                                                                                      // 90\n    }                                                                                                                  // 91\n                                                                                                                       // 92\n    // Check autosave                                                                                                  // 93\n    var autosave, resetOnSuccess;                                                                                      // 94\n    if (data.autosave === true && data.type === \"update\") {                                                            // 95\n      // Autosave and never reset on success                                                                           // 96\n      autosave = true;                                                                                                 // 97\n      resetOnSuccess = false;                                                                                          // 98\n    } else {                                                                                                           // 99\n      autosave = false;                                                                                                // 100\n      resetOnSuccess = data.resetOnSuccess;                                                                            // 101\n    }                                                                                                                  // 102\n                                                                                                                       // 103\n    // Cache form data for lookup by form ID                                                                           // 104\n    formData[formId] = {                                                                                               // 105\n      formId: formId,                                                                                                  // 106\n      collection: collection,                                                                                          // 107\n      ss: ss,                                                                                                          // 108\n      ssIsOverride: !!collection && !!data.schema,                                                                     // 109\n      doc: doc,                                                                                                        // 110\n      mDoc: mDoc,                                                                                                      // 111\n      validationType: (data.validation == null ? \"submitThenKeyup\" : data.validation),                                 // 112\n      submitType: data.type,                                                                                           // 113\n      submitMethod: data.meteormethod,                                                                                 // 114\n      resetOnSuccess: resetOnSuccess,                                                                                  // 115\n      autosave: autosave,                                                                                              // 116\n      filter: data.filter,                                                                                             // 117\n      autoConvert: data.autoConvert,                                                                                   // 118\n      removeEmptyStrings: data.removeEmptyStrings,                                                                     // 119\n      trimStrings: data.trimStrings                                                                                    // 120\n    };                                                                                                                 // 121\n                                                                                                                       // 122\n    // This ensures that anything dependent on field values will properly                                              // 123\n    // react to field values set from the database document. That is,                                                  // 124\n    // computations dependent on AutoForm.getFieldValue will rerun properly                                            // 125\n    // when the form is initially rendered using values from `doc`.                                                    // 126\n    setTimeout(function () {                                                                                           // 127\n      updateAllTrackedFieldValues(formId);                                                                             // 128\n    }, 0);                                                                                                             // 129\n                                                                                                                       // 130\n    contextDependency.changed();                                                                                       // 131\n  });                                                                                                                  // 132\n};                                                                                                                     // 133\n                                                                                                                       // 134\nTemplate.autoForm.destroyed = function autoFormDestroyed() {                                                           // 135\n  var self = this;                                                                                                     // 136\n  var formId = self.data.id || defaultFormId;                                                                          // 137\n                                                                                                                       // 138\n  // TODO if formId was changing reactively during life of instance,                                                   // 139\n  // some data won't be removed by the calls below.                                                                    // 140\n                                                                                                                       // 141\n  // Remove from templatesById list                                                                                    // 142\n  if (templatesById[formId]) {                                                                                         // 143\n    delete templatesById[formId];                                                                                      // 144\n  }                                                                                                                    // 145\n                                                                                                                       // 146\n  // Remove from data list                                                                                             // 147\n  if (formData[formId]) {                                                                                              // 148\n    delete formData[formId];                                                                                           // 149\n  }                                                                                                                    // 150\n                                                                                                                       // 151\n  // Remove from array fields list                                                                                     // 152\n  arrayTracker.untrackForm(formId);                                                                                    // 153\n                                                                                                                       // 154\n  // Remove from field values                                                                                          // 155\n  if (formValues[formId]) {                                                                                            // 156\n    delete formValues[formId];                                                                                         // 157\n  }                                                                                                                    // 158\n                                                                                                                       // 159\n  // Unregister form preservation                                                                                      // 160\n  formPreserve.unregisterForm(formId);                                                                                 // 161\n};                                                                                                                     // 162\n                                                                                                                       // 163\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 5610\n}).call(this);                                                       // 5611\n                                                                     // 5612\n                                                                     // 5613\n                                                                     // 5614\n                                                                     // 5615\n                                                                     // 5616\n                                                                     // 5617\n(function () {                                                       // 5618\n                                                                     // 5619\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/quickForm/template.quickForm.js                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"quickForm\");                                                                                     // 2\nTemplate[\"quickForm\"] = new Template(\"Template.quickForm\", (function() {                                               // 3\n  var view = this;                                                                                                     // 4\n  return Spacebars.With(function() {                                                                                   // 5\n    return Spacebars.call(view.lookup(\"innerContext\"));                                                                // 6\n  }, function() {                                                                                                      // 7\n    return [ \"\\n    \", Spacebars.With(function() {                                                                     // 8\n      return Spacebars.dataMustache(view.lookup(\"afTemplateName\"), \"quickForm\", Spacebars.dot(view.lookup(\"..\"), \"template\"));\n    }, function() {                                                                                                    // 10\n      return [ \"\\n      \", Blaze._TemplateWith(function() {                                                            // 11\n        return {                                                                                                       // 12\n          template: Spacebars.call(view.lookup(\".\")),                                                                  // 13\n          data: Spacebars.call(view.lookup(\"..\"))                                                                      // 14\n        };                                                                                                             // 15\n      }, function() {                                                                                                  // 16\n        return Spacebars.include(function() {                                                                          // 17\n          return Spacebars.call(Template.__dynamic);                                                                   // 18\n        });                                                                                                            // 19\n      }), \"\\n    \" ];                                                                                                  // 20\n    }), \"\\n  \" ];                                                                                                      // 21\n  });                                                                                                                  // 22\n}));                                                                                                                   // 23\n                                                                                                                       // 24\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 5651\n}).call(this);                                                       // 5652\n                                                                     // 5653\n                                                                     // 5654\n                                                                     // 5655\n                                                                     // 5656\n                                                                     // 5657\n                                                                     // 5658\n(function () {                                                       // 5659\n                                                                     // 5660\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/quickForm/quickForm.js                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate.quickForm.helpers({                                                                                           // 1\n  innerContext: function quickFormContext() {                                                                          // 2\n    var atts = this;                                                                                                   // 3\n                                                                                                                       // 4\n    // Pass along quickForm context to autoForm context, minus a few                                                   // 5\n    // properties that are specific to quickForms.                                                                     // 6\n    var qfAutoFormContext = _.omit(atts, \"buttonContent\", \"buttonClasses\", \"fields\", \"omitFields\");                    // 7\n                                                                                                                       // 8\n    // Determine whether we want to render a submit button                                                             // 9\n    var qfShouldRenderButton = (atts.buttonContent !== false && atts.type !== \"readonly\" && atts.type !== \"disabled\"); // 10\n                                                                                                                       // 11\n    return {                                                                                                           // 12\n      qfAutoFormContext: qfAutoFormContext,                                                                            // 13\n      atts: atts,                                                                                                      // 14\n      qfShouldRenderButton: qfShouldRenderButton                                                                       // 15\n    };                                                                                                                 // 16\n  }                                                                                                                    // 17\n});                                                                                                                    // 18\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 5686\n}).call(this);                                                       // 5687\n                                                                     // 5688\n                                                                     // 5689\n                                                                     // 5690\n                                                                     // 5691\n                                                                     // 5692\n                                                                     // 5693\n(function () {                                                       // 5694\n                                                                     // 5695\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/afArrayField/template.afArrayField.js                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afArrayField\");                                                                                  // 2\nTemplate[\"afArrayField\"] = new Template(\"Template.afArrayField\", (function() {                                         // 3\n  var view = this;                                                                                                     // 4\n  return Spacebars.With(function() {                                                                                   // 5\n    return Spacebars.dataMustache(view.lookup(\"innerContext\"), Spacebars.kw({                                          // 6\n      atts: view.lookup(\".\")                                                                                           // 7\n    }));                                                                                                               // 8\n  }, function() {                                                                                                      // 9\n    return [ \"\\n    \", Spacebars.With(function() {                                                                     // 10\n      return Spacebars.dataMustache(view.lookup(\"afTemplateName\"), \"afArrayField\", Spacebars.dot(view.lookup(\"..\"), \"template\"));\n    }, function() {                                                                                                    // 12\n      return [ \"\\n      \", Blaze._TemplateWith(function() {                                                            // 13\n        return {                                                                                                       // 14\n          template: Spacebars.call(view.lookup(\".\")),                                                                  // 15\n          data: Spacebars.call(view.lookup(\"..\"))                                                                      // 16\n        };                                                                                                             // 17\n      }, function() {                                                                                                  // 18\n        return Spacebars.include(function() {                                                                          // 19\n          return Spacebars.call(Template.__dynamic);                                                                   // 20\n        });                                                                                                            // 21\n      }), \"\\n    \" ];                                                                                                  // 22\n    }), \"\\n  \" ];                                                                                                      // 23\n  });                                                                                                                  // 24\n}));                                                                                                                   // 25\n                                                                                                                       // 26\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 5729\n}).call(this);                                                       // 5730\n                                                                     // 5731\n                                                                     // 5732\n                                                                     // 5733\n                                                                     // 5734\n                                                                     // 5735\n                                                                     // 5736\n(function () {                                                       // 5737\n                                                                     // 5738\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/afArrayField/afArrayField.js                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate.afArrayField.helpers({                                                                                        // 1\n  innerContext: function afArrayFieldContext(options) {                                                                // 2\n    var c = AutoForm.Utility.normalizeContext(options.hash, \"afArrayField\");                                           // 3\n    var name = c.atts.name;                                                                                            // 4\n    var fieldMinCount = c.atts.minCount || 0;                                                                          // 5\n    var fieldMaxCount = c.atts.maxCount || Infinity;                                                                   // 6\n    var ss = c.af.ss;                                                                                                  // 7\n    var formId = c.af.formId;                                                                                          // 8\n                                                                                                                       // 9\n    // Init the array tracking for this field                                                                          // 10\n    var docCount = fd.getDocCountForField(formId, name);                                                               // 11\n    if (docCount == null) {                                                                                            // 12\n      docCount = c.atts.initialCount;                                                                                  // 13\n    }                                                                                                                  // 14\n    arrayTracker.initField(formId, name, ss, docCount, fieldMinCount, fieldMaxCount);                                  // 15\n                                                                                                                       // 16\n    return {                                                                                                           // 17\n      atts: c.atts                                                                                                     // 18\n    };                                                                                                                 // 19\n  }                                                                                                                    // 20\n});                                                                                                                    // 21\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 5767\n}).call(this);                                                       // 5768\n                                                                     // 5769\n                                                                     // 5770\n                                                                     // 5771\n                                                                     // 5772\n                                                                     // 5773\n                                                                     // 5774\n(function () {                                                       // 5775\n                                                                     // 5776\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/afEachArrayItem/template.afEachArrayItem.js                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afEachArrayItem\");                                                                               // 2\nTemplate[\"afEachArrayItem\"] = new Template(\"Template.afEachArrayItem\", (function() {                                   // 3\n  var view = this;                                                                                                     // 4\n  return [ \"\\n  \", Spacebars.With(function() {                                                                         // 5\n    return Spacebars.dataMustache(view.lookup(\"innerContext\"), Spacebars.kw({                                          // 6\n      atts: view.lookup(\".\")                                                                                           // 7\n    }));                                                                                                               // 8\n  }, function() {                                                                                                      // 9\n    return [ \"\\n    \", Blaze.Each(function() {                                                                         // 10\n      return Spacebars.call(view.lookup(\".\"));                                                                         // 11\n    }, function() {                                                                                                    // 12\n      return [ \"\\n    \", Blaze.If(function() {                                                                         // 13\n        return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"removed\"));                                             // 14\n      }, function() {                                                                                                  // 15\n        return [ \"\\n    \", HTML.INPUT({                                                                                // 16\n          type: \"hidden\",                                                                                              // 17\n          name: function() {                                                                                           // 18\n            return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"name\"));                                        // 19\n          },                                                                                                           // 20\n          \"data-schema-key\": function() {                                                                              // 21\n            return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"name\"));                                        // 22\n          },                                                                                                           // 23\n          \"data-null-value\": \"true\",                                                                                   // 24\n          value: \"\"                                                                                                    // 25\n        }), \"\\n    \" ];                                                                                                // 26\n      }, function() {                                                                                                  // 27\n        return [ \"\\n    \", Blaze._InOuterTemplateScope(view, function() {                                              // 28\n          return Blaze._TemplateWith(function() {                                                                      // 29\n            return Spacebars.call(view.lookup(\".\"));                                                                   // 30\n          }, function() {                                                                                              // 31\n            return Spacebars.include(function() {                                                                      // 32\n              return Spacebars.call(view.templateContentBlock);                                                        // 33\n            });                                                                                                        // 34\n          });                                                                                                          // 35\n        }), \"\\n    \" ];                                                                                                // 36\n      }), \"\\n    \" ];                                                                                                  // 37\n    }), \"\\n  \" ];                                                                                                      // 38\n  }) ];                                                                                                                // 39\n}));                                                                                                                   // 40\n                                                                                                                       // 41\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 5825\n}).call(this);                                                       // 5826\n                                                                     // 5827\n                                                                     // 5828\n                                                                     // 5829\n                                                                     // 5830\n                                                                     // 5831\n                                                                     // 5832\n(function () {                                                       // 5833\n                                                                     // 5834\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/afEachArrayItem/afEachArrayItem.js                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate.afEachArrayItem.helpers({                                                                                     // 1\n  innerContext: function afEachArrayItemContext(options) {                                                             // 2\n    var c = AutoForm.Utility.normalizeContext(options.hash, \"afEachArrayItem\");                                        // 3\n    var formId = c.af.formId;                                                                                          // 4\n    var name = c.atts.name;                                                                                            // 5\n                                                                                                                       // 6\n    var docCount = fd.getDocCountForField(formId, name);                                                               // 7\n    if (docCount == null) {                                                                                            // 8\n      docCount = c.atts.initialCount;                                                                                  // 9\n    }                                                                                                                  // 10\n    arrayTracker.initField(formId, name, c.af.ss, docCount, c.atts.minCount, c.atts.maxCount);                         // 11\n                                                                                                                       // 12\n    return arrayTracker.getField(formId, name);                                                                        // 13\n  }                                                                                                                    // 14\n});                                                                                                                    // 15\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 5857\n}).call(this);                                                       // 5858\n                                                                     // 5859\n                                                                     // 5860\n                                                                     // 5861\n                                                                     // 5862\n                                                                     // 5863\n                                                                     // 5864\n(function () {                                                       // 5865\n                                                                     // 5866\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/afFieldInput/template.afFieldInput.js                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afFieldInput\");                                                                                  // 2\nTemplate[\"afFieldInput\"] = new Template(\"Template.afFieldInput\", (function() {                                         // 3\n  var view = this;                                                                                                     // 4\n  return Spacebars.With(function() {                                                                                   // 5\n    return Spacebars.call(view.lookup(\"getComponentDef\"));                                                             // 6\n  }, function() {                                                                                                      // 7\n    return [ \"\\n    \", Spacebars.With(function() {                                                                     // 8\n      return Spacebars.dataMustache(view.lookup(\"innerContext\"), Spacebars.kw({                                        // 9\n        atts: view.lookup(\"..\"),                                                                                       // 10\n        componentDef: view.lookup(\".\")                                                                                 // 11\n      }));                                                                                                             // 12\n    }, function() {                                                                                                    // 13\n      return [ \"\\n      \", Spacebars.With(function() {                                                                 // 14\n        return Spacebars.dataMustache(view.lookup(\"getTemplateName\"), Spacebars.dot(view.lookup(\"..\"), \"template\"), Spacebars.dot(view.lookup(\"...\"), \"template\"));\n      }, function() {                                                                                                  // 16\n        return [ \"\\n        \", Blaze._TemplateWith(function() {                                                        // 17\n          return {                                                                                                     // 18\n            template: Spacebars.call(view.lookup(\".\")),                                                                // 19\n            data: Spacebars.call(view.lookup(\"..\"))                                                                    // 20\n          };                                                                                                           // 21\n        }, function() {                                                                                                // 22\n          return Spacebars.include(function() {                                                                        // 23\n            return Spacebars.call(Template.__dynamic);                                                                 // 24\n          });                                                                                                          // 25\n        }), \"\\n      \" ];                                                                                              // 26\n      }), \"\\n    \" ];                                                                                                  // 27\n    }), \"\\n  \" ];                                                                                                      // 28\n  });                                                                                                                  // 29\n}));                                                                                                                   // 30\n                                                                                                                       // 31\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 5905\n}).call(this);                                                       // 5906\n                                                                     // 5907\n                                                                     // 5908\n                                                                     // 5909\n                                                                     // 5910\n                                                                     // 5911\n                                                                     // 5912\n(function () {                                                       // 5913\n                                                                     // 5914\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/afFieldInput/afFieldInput.js                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate.afFieldInput.helpers({                                                                                        // 1\n  getComponentDef: function getComponentDef() {                                                                        // 2\n    // Determine what `type` attribute should be if not set                                                            // 3\n    var inputType = AutoForm.getInputType(this);                                                                       // 4\n    var componentDef = inputTypeDefinitions[inputType];                                                                // 5\n    if (!componentDef) {                                                                                               // 6\n      throw new Error('AutoForm: No component found for rendering input with type \"' + inputType + '\"');               // 7\n    }                                                                                                                  // 8\n    return componentDef;                                                                                               // 9\n  },                                                                                                                   // 10\n  // similar to afTemplateName helper, but we have fewer layers of fallback, and we fall back                          // 11\n  // lastly to a template without an _ piece at the end                                                                // 12\n  getTemplateName: function getTemplateName(inputTemplateName, styleTemplateName) {                                    // 13\n    var self = this, schemaAutoFormDefs, templateFromAncestor, defaultTemplate;                                        // 14\n                                                                                                                       // 15\n    // In simplest case, just try to combine the two given strings.                                                    // 16\n    if (styleTemplateName && Template[inputTemplateName + '_' + styleTemplateName]) {                                  // 17\n      return inputTemplateName + '_' + styleTemplateName;                                                              // 18\n    }                                                                                                                  // 19\n                                                                                                                       // 20\n    // If the attributes provided a styleTemplateName but that template didn't exist, show a warning                   // 21\n    if (styleTemplateName && AutoForm._debug) {                                                                        // 22\n      console.warn(inputTemplateName + '_' + styleTemplateName + ' is not a valid template name. Falling back to a different template.');\n    }                                                                                                                  // 24\n                                                                                                                       // 25\n    // Get `autoform` object from the schema, if present.                                                              // 26\n    if (self.atts && self.atts.name) {                                                                                 // 27\n      schemaAutoFormDefs = AutoForm.getSchemaForField(self.atts.name).autoform;                                        // 28\n    }                                                                                                                  // 29\n                                                                                                                       // 30\n    // Fallback #1: autoform.template from the schema                                                                  // 31\n    if (schemaAutoFormDefs && schemaAutoFormDefs.template && Template[inputTemplateName + '_' + schemaAutoFormDefs.template]) {\n      return inputTemplateName + '_' + schemaAutoFormDefs.template;                                                    // 33\n    }                                                                                                                  // 34\n                                                                                                                       // 35\n    // Fallback #2: template attribute on an ancestor component within the same form                                   // 36\n    templateFromAncestor = AutoForm.findAttribute(\"template\");                                                         // 37\n    if (templateFromAncestor && Template[inputTemplateName + '_' + templateFromAncestor]) {                            // 38\n      return inputTemplateName + '_' + templateFromAncestor;                                                           // 39\n    }                                                                                                                  // 40\n                                                                                                                       // 41\n    // Fallback #3: Default template, as set by AutoForm.setDefaultTemplate                                            // 42\n    defaultTemplate = AutoForm.getDefaultTemplate();                                                                   // 43\n    if (defaultTemplate && Template[inputTemplateName + '_' + defaultTemplate]) {                                      // 44\n      return inputTemplateName + '_' + defaultTemplate;                                                                // 45\n    }                                                                                                                  // 46\n                                                                                                                       // 47\n    // Fallback #4: Just the inputTemplateName with no custom styled piece                                             // 48\n    return inputTemplateName;                                                                                          // 49\n  },                                                                                                                   // 50\n  innerContext: function afFieldInputContext(options) {                                                                // 51\n    var c = AutoForm.Utility.normalizeContext(options.hash, \"afFieldInput\");                                           // 52\n                                                                                                                       // 53\n    var ss = c.af.ss;                                                                                                  // 54\n    var defs = c.defs;                                                                                                 // 55\n                                                                                                                       // 56\n    // Adjust for array fields if necessary                                                                            // 57\n    var defaultValue = defs.defaultValue; //make sure to use pre-adjustment defaultValue for arrays                    // 58\n    if (defs.type === Array) {                                                                                         // 59\n      defs = ss.schema(c.atts.name + \".$\");                                                                            // 60\n    }                                                                                                                  // 61\n                                                                                                                       // 62\n    // Get inputTypeDefinition based on `type` attribute                                                               // 63\n    var componentDef = options.hash.componentDef;                                                                      // 64\n                                                                                                                       // 65\n    // Get input value                                                                                                 // 66\n    var value = getInputValue(c.atts, c.atts.value, c.af.mDoc, defaultValue, componentDef);                            // 67\n                                                                                                                       // 68\n    // Mark field value as changed for reactive updates                                                                // 69\n    // We need to defer this until the element will be                                                                 // 70\n    // added to the DOM. Otherwise, AutoForm.getFieldValue                                                             // 71\n    // will not pick up the new value when there are #if etc.                                                          // 72\n    // blocks involved.                                                                                                // 73\n    // See https://github.com/aldeed/meteor-autoform/issues/461                                                        // 74\n   setTimeout(function () {                                                                                            // 75\n      updateTrackedFieldValue(c.af.formId, c.atts.name);                                                               // 76\n    }, 0);                                                                                                             // 77\n                                                                                                                       // 78\n    // Build input data context                                                                                        // 79\n    var iData = getInputData(defs, c.atts, value, ss.label(c.atts.name), c.af.submitType);                             // 80\n                                                                                                                       // 81\n    // Adjust and return context                                                                                       // 82\n    return (typeof componentDef.contextAdjust === \"function\") ? componentDef.contextAdjust(iData) : iData;             // 83\n  }                                                                                                                    // 84\n});                                                                                                                    // 85\n                                                                                                                       // 86\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 6008\n}).call(this);                                                       // 6009\n                                                                     // 6010\n                                                                     // 6011\n                                                                     // 6012\n                                                                     // 6013\n                                                                     // 6014\n                                                                     // 6015\n(function () {                                                       // 6016\n                                                                     // 6017\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/afFormGroup/template.afFormGroup.js                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afFormGroup\");                                                                                   // 2\nTemplate[\"afFormGroup\"] = new Template(\"Template.afFormGroup\", (function() {                                           // 3\n  var view = this;                                                                                                     // 4\n  return Spacebars.With(function() {                                                                                   // 5\n    return Spacebars.dataMustache(view.lookup(\"innerContext\"), Spacebars.kw({                                          // 6\n      atts: view.lookup(\".\")                                                                                           // 7\n    }));                                                                                                               // 8\n  }, function() {                                                                                                      // 9\n    return [ \"\\n    \", Spacebars.With(function() {                                                                     // 10\n      return Spacebars.dataMustache(view.lookup(\"afTemplateName\"), \"afFormGroup\", Spacebars.dot(view.lookup(\"..\"), \"template\"));\n    }, function() {                                                                                                    // 12\n      return [ \"\\n      \", Blaze._TemplateWith(function() {                                                            // 13\n        return {                                                                                                       // 14\n          template: Spacebars.call(view.lookup(\".\")),                                                                  // 15\n          data: Spacebars.call(view.lookup(\"..\"))                                                                      // 16\n        };                                                                                                             // 17\n      }, function() {                                                                                                  // 18\n        return Spacebars.include(function() {                                                                          // 19\n          return Spacebars.call(Template.__dynamic);                                                                   // 20\n        });                                                                                                            // 21\n      }), \"\\n    \" ];                                                                                                  // 22\n    }), \"\\n  \" ];                                                                                                      // 23\n  });                                                                                                                  // 24\n}));                                                                                                                   // 25\n                                                                                                                       // 26\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 6051\n}).call(this);                                                       // 6052\n                                                                     // 6053\n                                                                     // 6054\n                                                                     // 6055\n                                                                     // 6056\n                                                                     // 6057\n                                                                     // 6058\n(function () {                                                       // 6059\n                                                                     // 6060\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/afFormGroup/afFormGroup.js                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate.afFormGroup.helpers({                                                                                         // 1\n  innerContext: function afFormGroupContext(options) {                                                                 // 2\n    var c = AutoForm.Utility.normalizeContext(options.hash, \"afFormGroup\");                                            // 3\n    return {                                                                                                           // 4\n      skipLabel: (c.atts.label === false),                                                                             // 5\n      afFieldLabelAtts: formGroupLabelAtts(c.atts),                                                                    // 6\n      afFieldInputAtts: formGroupInputAtts(c.atts),                                                                    // 7\n      atts: {name: c.atts.name},                                                                                       // 8\n      labelText: (typeof c.atts.label === \"string\") ? c.atts.label : null                                              // 9\n    };                                                                                                                 // 10\n  }                                                                                                                    // 11\n});                                                                                                                    // 12\n                                                                                                                       // 13\n/*                                                                                                                     // 14\n * Private                                                                                                             // 15\n */                                                                                                                    // 16\n                                                                                                                       // 17\nfunction formGroupLabelAtts(atts) {                                                                                    // 18\n  // Separate label options from input options; label items begin with \"label-\"                                        // 19\n  var labelAtts = {};                                                                                                  // 20\n  _.each(atts, function autoFormLabelAttsEach(val, key) {                                                              // 21\n    if (key.indexOf(\"label-\") === 0) {                                                                                 // 22\n      labelAtts[key.substring(6)] = val;                                                                               // 23\n    }                                                                                                                  // 24\n  });                                                                                                                  // 25\n  return labelAtts;                                                                                                    // 26\n}                                                                                                                      // 27\n                                                                                                                       // 28\nfunction formGroupInputAtts(atts) {                                                                                    // 29\n  // Separate label options from input options; label items begin with \"label-\"                                        // 30\n  // We also don't want the \"label\" option                                                                             // 31\n  var inputAtts = {};                                                                                                  // 32\n  _.each(atts, function autoFormLabelAttsEach(val, key) {                                                              // 33\n    if (key !== \"label\" && key.indexOf(\"label-\") !== 0) {                                                              // 34\n      inputAtts[key] = val;                                                                                            // 35\n    }                                                                                                                  // 36\n  });                                                                                                                  // 37\n  return inputAtts;                                                                                                    // 38\n}                                                                                                                      // 39\n                                                                                                                       // 40\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 6108\n}).call(this);                                                       // 6109\n                                                                     // 6110\n                                                                     // 6111\n                                                                     // 6112\n                                                                     // 6113\n                                                                     // 6114\n                                                                     // 6115\n(function () {                                                       // 6116\n                                                                     // 6117\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/afObjectField/template.afObjectField.js                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afObjectField\");                                                                                 // 2\nTemplate[\"afObjectField\"] = new Template(\"Template.afObjectField\", (function() {                                       // 3\n  var view = this;                                                                                                     // 4\n  return Spacebars.With(function() {                                                                                   // 5\n    return {                                                                                                           // 6\n      atts: Spacebars.call(view.lookup(\".\"))                                                                           // 7\n    };                                                                                                                 // 8\n  }, function() {                                                                                                      // 9\n    return [ \"\\n    \", Spacebars.With(function() {                                                                     // 10\n      return Spacebars.dataMustache(view.lookup(\"afTemplateName\"), \"afObjectField\", Spacebars.dot(view.lookup(\"..\"), \"template\"));\n    }, function() {                                                                                                    // 12\n      return [ \"\\n      \", Blaze._TemplateWith(function() {                                                            // 13\n        return {                                                                                                       // 14\n          template: Spacebars.call(view.lookup(\".\")),                                                                  // 15\n          data: Spacebars.call(view.lookup(\"..\"))                                                                      // 16\n        };                                                                                                             // 17\n      }, function() {                                                                                                  // 18\n        return Spacebars.include(function() {                                                                          // 19\n          return Spacebars.call(Template.__dynamic);                                                                   // 20\n        });                                                                                                            // 21\n      }), \"\\n    \" ];                                                                                                  // 22\n    }), \"\\n  \" ];                                                                                                      // 23\n  });                                                                                                                  // 24\n}));                                                                                                                   // 25\n                                                                                                                       // 26\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 6151\n}).call(this);                                                       // 6152\n                                                                     // 6153\n                                                                     // 6154\n                                                                     // 6155\n                                                                     // 6156\n                                                                     // 6157\n                                                                     // 6158\n(function () {                                                       // 6159\n                                                                     // 6160\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/afQuickField/template.afQuickField.js                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afQuickField\");                                                                                  // 2\nTemplate[\"afQuickField\"] = new Template(\"Template.afQuickField\", (function() {                                         // 3\n  var view = this;                                                                                                     // 4\n  return Blaze.If(function() {                                                                                         // 5\n    return Spacebars.dataMustache(view.lookup(\"isGroup\"), Spacebars.kw({                                               // 6\n      atts: view.lookup(\".\")                                                                                           // 7\n    }));                                                                                                               // 8\n  }, function() {                                                                                                      // 9\n    return [ \"\\n    \", Spacebars.include(view.lookupTemplate(\"afObjectField\")), \"\\n  \" ];                              // 10\n  }, function() {                                                                                                      // 11\n    return [ \"\\n    \", Blaze.If(function() {                                                                           // 12\n      return Spacebars.dataMustache(view.lookup(\"isFieldArray\"), Spacebars.kw({                                        // 13\n        atts: view.lookup(\".\")                                                                                         // 14\n      }));                                                                                                             // 15\n    }, function() {                                                                                                    // 16\n      return [ \"\\n      \", Spacebars.include(view.lookupTemplate(\"afArrayField\")), \"\\n    \" ];                         // 17\n    }, function() {                                                                                                    // 18\n      return [ \"\\n      \", Blaze._TemplateWith(function() {                                                            // 19\n        return Spacebars.call(view.lookup(\"groupAtts\"));                                                               // 20\n      }, function() {                                                                                                  // 21\n        return Spacebars.include(view.lookupTemplate(\"afFormGroup\"));                                                  // 22\n      }), \"\\n    \" ];                                                                                                  // 23\n    }), \"\\n  \" ];                                                                                                      // 24\n  });                                                                                                                  // 25\n}));                                                                                                                   // 26\n                                                                                                                       // 27\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 6195\n}).call(this);                                                       // 6196\n                                                                     // 6197\n                                                                     // 6198\n                                                                     // 6199\n                                                                     // 6200\n                                                                     // 6201\n                                                                     // 6202\n(function () {                                                       // 6203\n                                                                     // 6204\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/afQuickField/afQuickField.js                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate.afQuickField.helpers({                                                                                        // 1\n  isGroup: function afQuickFieldIsGroup(options) {                                                                     // 2\n    var c = AutoForm.Utility.normalizeContext(options.hash, \"afQuickField\");                                           // 3\n    // Render a group of fields if we expect an Object and we don't have options                                       // 4\n    // and we have not overridden the type                                                                             // 5\n    return (c.defs.type === Object && !c.atts.options && !c.atts.type);                                                // 6\n  },                                                                                                                   // 7\n  isFieldArray: function afQuickFieldIsFieldArray(options) {                                                           // 8\n    var c = AutoForm.Utility.normalizeContext(options.hash, \"afQuickField\");                                           // 9\n    // Render an array of fields if we expect an Array and we don't have options                                       // 10\n    // and we have not overridden the type                                                                             // 11\n    return (c.defs.type === Array && !c.atts.options && !c.atts.type);                                                 // 12\n  },                                                                                                                   // 13\n  groupAtts: function afQuickFieldGroupAtts() {                                                                        // 14\n    return _.omit(this, 'fields', 'omitFields');                                                                       // 15\n  }                                                                                                                    // 16\n});                                                                                                                    // 17\n                                                                                                                       // 18\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 6230\n}).call(this);                                                       // 6231\n                                                                     // 6232\n                                                                     // 6233\n                                                                     // 6234\n                                                                     // 6235\n                                                                     // 6236\n                                                                     // 6237\n(function () {                                                       // 6238\n                                                                     // 6239\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/afQuickFields/template.afQuickFields.js                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afQuickFields\");                                                                                 // 2\nTemplate[\"afQuickFields\"] = new Template(\"Template.afQuickFields\", (function() {                                       // 3\n  var view = this;                                                                                                     // 4\n  return Blaze.Each(function() {                                                                                       // 5\n    return Spacebars.dataMustache(view.lookup(\"afFieldNames\"), Spacebars.kw({                                          // 6\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                    // 7\n    }));                                                                                                               // 8\n  }, function() {                                                                                                      // 9\n    return [ \"\\n    \", Spacebars.With(function() {                                                                     // 10\n      return {                                                                                                         // 11\n        name: Spacebars.call(view.lookup(\".\"))                                                                         // 12\n      };                                                                                                               // 13\n    }, function() {                                                                                                    // 14\n      return [ \"\\n    \", Blaze._TemplateWith(function() {                                                              // 15\n        return Spacebars.call(view.lookup(\"quickFieldAtts\"));                                                          // 16\n      }, function() {                                                                                                  // 17\n        return Spacebars.include(view.lookupTemplate(\"afQuickField\"));                                                 // 18\n      }), \"\\n    \" ];                                                                                                  // 19\n    }), \"\\n  \" ];                                                                                                      // 20\n  });                                                                                                                  // 21\n}));                                                                                                                   // 22\n                                                                                                                       // 23\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 6270\n}).call(this);                                                       // 6271\n                                                                     // 6272\n                                                                     // 6273\n                                                                     // 6274\n                                                                     // 6275\n                                                                     // 6276\n                                                                     // 6277\n(function () {                                                       // 6278\n                                                                     // 6279\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/afQuickFields/afQuickFields.js                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate.afQuickFields.helpers({                                                                                       // 1\n  quickFieldAtts: function afQuickFieldsQuickFieldAtts() {                                                             // 2\n    // Get the attributes that were on the afQuickFields component                                                     // 3\n    var afQuickFieldsComponentAtts = Template.parentData(2);                                                           // 4\n    // It's possible to call {{> afQuickFields}} with no attributes, in which case we                                  // 5\n    // don't want the \"attributes\" because they're really just the parent context.                                     // 6\n    if (afQuickFieldsComponentAtts.atts) {                                                                             // 7\n      afQuickFieldsComponentAtts = {};                                                                                 // 8\n    }                                                                                                                  // 9\n    return _.extend({options: \"auto\"}, afQuickFieldsComponentAtts, this);                                              // 10\n  }                                                                                                                    // 11\n});                                                                                                                    // 12\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 6299\n}).call(this);                                                       // 6300\n                                                                     // 6301\n                                                                     // 6302\n                                                                     // 6303\n                                                                     // 6304\n                                                                     // 6305\n                                                                     // 6306\n(function () {                                                       // 6307\n                                                                     // 6308\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/autoform-events.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// all form events handled here                                                                                        // 1\nvar lastAutoSaveElement = null;                                                                                        // 2\n                                                                                                                       // 3\nfunction beginSubmit(formId, template) {                                                                               // 4\n  if (!template || !template.view._domrange)                                                                           // 5\n    return;                                                                                                            // 6\n  // Get user-defined hooks                                                                                            // 7\n  var hooks = Hooks.getHooks(formId, 'beginSubmit');                                                                   // 8\n  if (hooks.length) {                                                                                                  // 9\n    _.each(hooks, function beginSubmitHooks(hook) {                                                                    // 10\n      hook(formId, template);                                                                                          // 11\n    });                                                                                                                // 12\n  } else {                                                                                                             // 13\n    // If there are no user-defined hooks, by default we disable the submit button during submission                   // 14\n    var submitButton = template.find(\"button[type=submit]\") || template.find(\"input[type=submit]\");                    // 15\n    if (submitButton) {                                                                                                // 16\n      submitButton.disabled = true;                                                                                    // 17\n    }                                                                                                                  // 18\n  }                                                                                                                    // 19\n}                                                                                                                      // 20\n                                                                                                                       // 21\nfunction endSubmit(formId, template) {                                                                                 // 22\n  if (!template || !template.view._domrange)                                                                           // 23\n    return;                                                                                                            // 24\n  // Try to avoid incorrect reporting of which input caused autosave                                                   // 25\n  lastAutoSaveElement = null;                                                                                          // 26\n  // Get user-defined hooks                                                                                            // 27\n  var hooks = Hooks.getHooks(formId, 'endSubmit');                                                                     // 28\n  if (hooks.length) {                                                                                                  // 29\n    _.each(hooks, function endSubmitHooks(hook) {                                                                      // 30\n      hook(formId, template);                                                                                          // 31\n    });                                                                                                                // 32\n  } else {                                                                                                             // 33\n    // If there are no user-defined hooks, by default we disable the submit button during submission                   // 34\n    var submitButton = template.find(\"button[type=submit]\") || template.find(\"input[type=submit]\");                    // 35\n    if (submitButton) {                                                                                                // 36\n      submitButton.disabled = false;                                                                                   // 37\n    }                                                                                                                  // 38\n  }                                                                                                                    // 39\n}                                                                                                                      // 40\n                                                                                                                       // 41\nTemplate.autoForm.events({                                                                                             // 42\n  'submit form': function autoFormSubmitHandler(event, template) {                                                     // 43\n    // Gather necessary form info                                                                                      // 44\n    var formId = this.id || defaultFormId;                                                                             // 45\n    var data = formData[formId];                                                                                       // 46\n    var isInsert = (data.submitType === \"insert\");                                                                     // 47\n    var isUpdate = (data.submitType === \"update\");                                                                     // 48\n    var isMethod = (data.submitType === \"method\");                                                                     // 49\n    var method = data.submitMethod;                                                                                    // 50\n    var isNormalSubmit = (!isInsert && !isUpdate && !isMethod);                                                        // 51\n    // ss will be the schema for the `schema` attribute if present,                                                    // 52\n    // else the schema for the collection                                                                              // 53\n    var ss = data.ss;                                                                                                  // 54\n    var ssIsOverride = data.ssIsOverride;                                                                              // 55\n    var collection = data.collection;                                                                                  // 56\n    var currentDoc = data.doc;                                                                                         // 57\n    var docId = currentDoc ? currentDoc._id : null;                                                                    // 58\n    var isValid;                                                                                                       // 59\n                                                                                                                       // 60\n    // Make sure we have a collection if we need one for the requested submit type                                     // 61\n    if (!collection) {                                                                                                 // 62\n      if (isInsert)                                                                                                    // 63\n        throw new Error(\"AutoForm: You must specify a collection when form type is insert.\");                          // 64\n      else if (isUpdate)                                                                                               // 65\n        throw new Error(\"AutoForm: You must specify a collection when form type is update.\");                          // 66\n    }                                                                                                                  // 67\n                                                                                                                       // 68\n    // Prevent browser form submission if we're planning to do our own thing                                           // 69\n    if (!isNormalSubmit) {                                                                                             // 70\n      event.preventDefault();                                                                                          // 71\n    }                                                                                                                  // 72\n                                                                                                                       // 73\n    // Gather hooks                                                                                                    // 74\n    var onSuccess = Hooks.getHooks(formId, 'onSuccess');                                                               // 75\n    var onError = Hooks.getHooks(formId, 'onError');                                                                   // 76\n                                                                                                                       // 77\n    // Prep haltSubmission function                                                                                    // 78\n    function haltSubmission() {                                                                                        // 79\n      event.preventDefault();                                                                                          // 80\n      event.stopPropagation();                                                                                         // 81\n      // Run endSubmit hooks (re-enabled submit button or form, etc.)                                                  // 82\n      endSubmit(formId, template);                                                                                     // 83\n    }                                                                                                                  // 84\n                                                                                                                       // 85\n    function failedValidation() {                                                                                      // 86\n      var ec = ss.namedContext(formId);                                                                                // 87\n      var ik = ec.invalidKeys(), err;                                                                                  // 88\n      if (ik) {                                                                                                        // 89\n        if (ik.length) {                                                                                               // 90\n          // We add `message` prop to the invalidKeys.                                                                 // 91\n          // Maybe SS pkg should just add that property back in?                                                       // 92\n          ik = _.map(ik, function (o) {                                                                                // 93\n            return _.extend({message: ec.keyErrorMessage(o.name)}, o);                                                 // 94\n          });                                                                                                          // 95\n          err = new Error(ik[0].message);                                                                              // 96\n        } else {                                                                                                       // 97\n          err = new Error('form failed validation');                                                                   // 98\n        }                                                                                                              // 99\n        err.invalidKeys = ik;                                                                                          // 100\n      } else {                                                                                                         // 101\n        err = new Error('form failed validation');                                                                     // 102\n      }                                                                                                                // 103\n      _.each(onError, function onErrorEach(hook) {                                                                     // 104\n        hook('pre-submit validation', err, template);                                                                  // 105\n      });                                                                                                              // 106\n      haltSubmission();                                                                                                // 107\n    }                                                                                                                  // 108\n                                                                                                                       // 109\n    // Prep callback creator function                                                                                  // 110\n    function makeCallback(name) {                                                                                      // 111\n      var cbCtx = {                                                                                                    // 112\n        event: event,                                                                                                  // 113\n        template: template,                                                                                            // 114\n        formId: formId,                                                                                                // 115\n        docId: docId,                                                                                                  // 116\n        autoSaveChangedElement: lastAutoSaveElement,                                                                   // 117\n        resetForm: function () {                                                                                       // 118\n          AutoForm.resetForm(formId, template);                                                                        // 119\n        }                                                                                                              // 120\n      };                                                                                                               // 121\n      var afterHooks = Hooks.getHooks(formId, 'after', name);                                                          // 122\n      return function autoFormActionCallback(error, result) {                                                          // 123\n        if (error) {                                                                                                   // 124\n          if (onError && onError.length) {                                                                             // 125\n            _.each(onError, function onErrorEach(hook) {                                                               // 126\n              hook.call(cbCtx, name, error, template);                                                                 // 127\n            });                                                                                                        // 128\n          } else if ((!afterHooks || !afterHooks.length) && ss.namedContext(formId).isValid()) {                       // 129\n            // if there are no onError or \"after\" hooks or validation errors, throw the error                          // 130\n            // because it must be some other error from the server                                                     // 131\n            endSubmit(formId, template);                                                                               // 132\n            throw error;                                                                                               // 133\n          }                                                                                                            // 134\n        } else {                                                                                                       // 135\n          // By default, we reset form after successful submit, but                                                    // 136\n          // you can opt out.                                                                                          // 137\n          if (data.resetOnSuccess !== false) {                                                                         // 138\n            AutoForm.resetForm(formId, template);                                                                      // 139\n          }                                                                                                            // 140\n          // Set docId in the context for insert forms, too                                                            // 141\n          if (name === \"insert\") {                                                                                     // 142\n            cbCtx.docId = result;                                                                                      // 143\n          }                                                                                                            // 144\n          _.each(onSuccess, function onSuccessEach(hook) {                                                             // 145\n            hook.call(cbCtx, name, result, template);                                                                  // 146\n          });                                                                                                          // 147\n        }                                                                                                              // 148\n        _.each(afterHooks, function afterHooksEach(hook) {                                                             // 149\n          hook.call(cbCtx, error, result, template);                                                                   // 150\n        });                                                                                                            // 151\n        // Run endSubmit hooks (re-enabled submit button or form, etc.)                                                // 152\n        endSubmit(formId, template);                                                                                   // 153\n      };                                                                                                               // 154\n    }                                                                                                                  // 155\n                                                                                                                       // 156\n    // Prep function that calls before hooks.                                                                          // 157\n    // We pass the template instance in case the hook                                                                  // 158\n    // needs the data context.                                                                                         // 159\n    function doBefore(docId, doc, hooks, name, next) {                                                                 // 160\n      // We call the hooks recursively, in order added,                                                                // 161\n      // passing the result of the first hook to the                                                                   // 162\n      // second hook, etc.                                                                                             // 163\n      function runHook(i, doc) {                                                                                       // 164\n        hook = hooks[i];                                                                                               // 165\n                                                                                                                       // 166\n        if (!hook) {                                                                                                   // 167\n          // We've run all hooks; continue submission                                                                  // 168\n          next(doc);                                                                                                   // 169\n          return;                                                                                                      // 170\n        }                                                                                                              // 171\n                                                                                                                       // 172\n        // Set up before hook context                                                                                  // 173\n        var cb = function (d) {                                                                                        // 174\n          // If the hook returns false, we cancel                                                                      // 175\n          if (d === false) {                                                                                           // 176\n            // Run endSubmit hooks (re-enabled submit button or form, etc.)                                            // 177\n            endSubmit(formId, template);                                                                               // 178\n          } else {                                                                                                     // 179\n            if (!_.isObject(d)) {                                                                                      // 180\n              throw new Error(name + \" must return an object\");                                                        // 181\n            }                                                                                                          // 182\n            runHook(i+1, d);                                                                                           // 183\n          }                                                                                                            // 184\n        };                                                                                                             // 185\n        var ctx = {                                                                                                    // 186\n          event: event,                                                                                                // 187\n          template: template,                                                                                          // 188\n          formId: formId,                                                                                              // 189\n          docId: docId,                                                                                                // 190\n          autoSaveChangedElement: lastAutoSaveElement,                                                                 // 191\n          resetForm: function () {                                                                                     // 192\n            AutoForm.resetForm(formId, template);                                                                      // 193\n          },                                                                                                           // 194\n          result: _.once(cb)                                                                                           // 195\n        };                                                                                                             // 196\n                                                                                                                       // 197\n        var result;                                                                                                    // 198\n        if (docId) {                                                                                                   // 199\n          result = hook.call(ctx, docId, doc, template);                                                               // 200\n        } else {                                                                                                       // 201\n          result = hook.call(ctx, doc, template);                                                                      // 202\n        }                                                                                                              // 203\n        // If the hook returns undefined, we wait for it                                                               // 204\n        // to call this.result()                                                                                       // 205\n        if (result !== void 0) {                                                                                       // 206\n          ctx.result(result);                                                                                          // 207\n        }                                                                                                              // 208\n      }                                                                                                                // 209\n                                                                                                                       // 210\n      runHook(0, doc);                                                                                                 // 211\n    }                                                                                                                  // 212\n                                                                                                                       // 213\n    // Prep function that calls onSubmit hooks.                                                                        // 214\n    // We pass the template instance in case the hook                                                                  // 215\n    // needs the data context, and event in case they                                                                  // 216\n    // need to prevent default, etc.                                                                                   // 217\n    function doOnSubmit(hooks, insertDoc, updateDoc, currentDoc) {                                                     // 218\n      // These are called differently from the before hooks because                                                    // 219\n      // they run async, but they can run in parallel and we need the                                                  // 220\n      // result of all of them immediately because they can return                                                     // 221\n      // false to stop normal form submission.                                                                         // 222\n                                                                                                                       // 223\n      var hookCount = hooks.length, doneCount = 0, submitError, submitResult;                                          // 224\n                                                                                                                       // 225\n      if (hookCount === 0) {                                                                                           // 226\n        // Run endSubmit hooks (re-enabled submit button or form, etc.)                                                // 227\n        endSubmit(formId, template);                                                                                   // 228\n        return;                                                                                                        // 229\n      }                                                                                                                // 230\n                                                                                                                       // 231\n      // Set up onSubmit hook context                                                                                  // 232\n      var ctx = {                                                                                                      // 233\n        event: event,                                                                                                  // 234\n        template: template,                                                                                            // 235\n        formId: formId,                                                                                                // 236\n        docId: docId,                                                                                                  // 237\n        autoSaveChangedElement: lastAutoSaveElement,                                                                   // 238\n        resetForm: function () {                                                                                       // 239\n          AutoForm.resetForm(formId, template);                                                                        // 240\n        },                                                                                                             // 241\n        done: function (error, result) {                                                                               // 242\n          doneCount++;                                                                                                 // 243\n          if (!submitError && error) {                                                                                 // 244\n            submitError = error;                                                                                       // 245\n          }                                                                                                            // 246\n          if (!submitResult && result) {                                                                               // 247\n            submitResult = result;                                                                                     // 248\n          }                                                                                                            // 249\n          if (doneCount === hookCount) {                                                                               // 250\n            var submitCallback = makeCallback('submit');                                                               // 251\n            // run onError, onSuccess, endSubmit                                                                       // 252\n            submitCallback(submitError, submitResult);                                                                 // 253\n          }                                                                                                            // 254\n        }                                                                                                              // 255\n      };                                                                                                               // 256\n                                                                                                                       // 257\n      // Call all hooks at once.                                                                                       // 258\n      // Pass both types of doc plus the doc attached to the form.                                                     // 259\n      // If any return false, we stop normal submission, but we don't                                                  // 260\n      // run onError, onSuccess, endSubmit hooks until they all call this.done().                                      // 261\n      var shouldStop = false;                                                                                          // 262\n      _.each(hooks, function eachOnSubmit(hook) {                                                                      // 263\n        var result = hook.call(ctx, insertDoc, updateDoc, currentDoc);                                                 // 264\n        if (shouldStop === false && result === false) {                                                                // 265\n          shouldStop = true;                                                                                           // 266\n        }                                                                                                              // 267\n      });                                                                                                              // 268\n      if (shouldStop) {                                                                                                // 269\n        event.preventDefault();                                                                                        // 270\n        event.stopPropagation();                                                                                       // 271\n      }                                                                                                                // 272\n    }                                                                                                                  // 273\n                                                                                                                       // 274\n    // Gather all form values                                                                                          // 275\n    var formDocs = getFormValues(template, formId, ss);                                                                // 276\n    var insertDoc = formDocs.insertDoc;                                                                                // 277\n    var updateDoc = formDocs.updateDoc;                                                                                // 278\n                                                                                                                       // 279\n    // This validation pass happens before any \"before\" hooks run. It should happen                                    // 280\n    // only when there is both a collection AND a schema specified, in which case we                                   // 281\n    // validate first against the form schema. Then before hooks can add any missing                                   // 282\n    // properties before we validate against the full collection schema.                                               // 283\n    //                                                                                                                 // 284\n    // We also validate at this time if we're doing normal form submission, in which                                   // 285\n    // case there are no \"before\" hooks, and this is the only validation pass we do                                    // 286\n    // before running onSubmit hooks and potentially allowing the browser to submit.                                   // 287\n    if (data.validationType !== 'none' && (ssIsOverride || isNormalSubmit)) {                                          // 288\n      // Catch exceptions in validation functions which will bubble up here, cause a form with                         // 289\n      // onSubmit() to submit prematurely and prevent the error from being reported                                    // 290\n      // (due to a page refresh).                                                                                      // 291\n      try {                                                                                                            // 292\n        isValid = _validateForm(formId, data, formDocs);                                                               // 293\n      } catch (e) {                                                                                                    // 294\n        console.error('Validation error', e);                                                                          // 295\n        isValid = false;                                                                                               // 296\n      }                                                                                                                // 297\n      // If we failed pre-submit validation, we stop submission.                                                       // 298\n      if (isValid === false) {                                                                                         // 299\n        return failedValidation();                                                                                     // 300\n      }                                                                                                                // 301\n    }                                                                                                                  // 302\n                                                                                                                       // 303\n    // Run beginSubmit hooks (disable submit button or form, etc.)                                                     // 304\n    // NOTE: This needs to stay after getFormValues in case a                                                          // 305\n    // beginSubmit hook disables inputs. We don't get values for                                                       // 306\n    // disabled inputs, but if they are just disabling during submission,                                              // 307\n    // then we actually do want the values.                                                                            // 308\n    beginSubmit(formId, template);                                                                                     // 309\n                                                                                                                       // 310\n    // Now we will do the requested insert, update, method, or normal                                                  // 311\n    // browser form submission.                                                                                        // 312\n    var validationOptions = {                                                                                          // 313\n      validationContext: formId,                                                                                       // 314\n      filter: data.filter,                                                                                             // 315\n      autoConvert: data.autoConvert,                                                                                   // 316\n      removeEmptyStrings: data.removeEmptyStrings,                                                                     // 317\n      trimStrings: data.trimStrings                                                                                    // 318\n    };                                                                                                                 // 319\n                                                                                                                       // 320\n    // INSERT FORM SUBMIT                                                                                              // 321\n    if (isInsert) {                                                                                                    // 322\n      // Get \"before.insert\" hooks                                                                                     // 323\n      var beforeInsertHooks = Hooks.getHooks(formId, 'before', 'insert');                                              // 324\n      // Run \"before.insert\" hooks                                                                                     // 325\n      doBefore(null, insertDoc, beforeInsertHooks, 'before.insert hook', function (doc) {                              // 326\n        // Make callback for insert                                                                                    // 327\n        var insertCallback = makeCallback('insert');                                                                   // 328\n        // Perform insert                                                                                              // 329\n        if (typeof collection.simpleSchema === \"function\" && collection.simpleSchema() != null) {                      // 330\n          // If the collection2 pkg is used and a schema is attached, we pass a validationContext                      // 331\n          collection.insert(doc, validationOptions, insertCallback);                                                   // 332\n        } else {                                                                                                       // 333\n          // If the collection2 pkg is not used or no schema is attached, we don't pass options                        // 334\n          // because core Meteor's `insert` function does not accept                                                   // 335\n          // an options argument.                                                                                      // 336\n          collection.insert(doc, insertCallback);                                                                      // 337\n        }                                                                                                              // 338\n      });                                                                                                              // 339\n    }                                                                                                                  // 340\n                                                                                                                       // 341\n    // UPDATE FORM SUBMIT                                                                                              // 342\n    else if (isUpdate) {                                                                                               // 343\n      // Get \"before.update\" hooks                                                                                     // 344\n      var beforeUpdateHooks = Hooks.getHooks(formId, 'before', 'update');                                              // 345\n      // Run \"before.update\" hooks                                                                                     // 346\n      doBefore(docId, updateDoc, beforeUpdateHooks, 'before.update hook', function (modifier) {                        // 347\n        // Make callback for update                                                                                    // 348\n        var updateCallback = makeCallback('update');                                                                   // 349\n        if (_.isEmpty(modifier)) { // make sure this check stays after the before hooks                                // 350\n          // Nothing to update. Just treat it as a successful update.                                                  // 351\n          updateCallback(null, 0);                                                                                     // 352\n        } else {                                                                                                       // 353\n          // Perform update                                                                                            // 354\n          collection.update(docId, modifier, validationOptions, updateCallback);                                       // 355\n        }                                                                                                              // 356\n      });                                                                                                              // 357\n    }                                                                                                                  // 358\n                                                                                                                       // 359\n    // METHOD FORM SUBMIT                                                                                              // 360\n    else if (isMethod) {                                                                                               // 361\n      // Get \"before.methodName\" hooks                                                                                 // 362\n      if (!method) {                                                                                                   // 363\n        throw new Error('When form type is \"method\", you must also provide a \"meteormethod\" attribute');               // 364\n      }                                                                                                                // 365\n      var beforeMethodHooks = Hooks.getHooks(formId, 'before', method);                                                // 366\n      // Run \"before.methodName\" hooks                                                                                 // 367\n      doBefore(null, insertDoc, beforeMethodHooks, 'before.method hook', function (doc) {                              // 368\n        // Validate. If both schema and collection were provided, then we validate                                     // 369\n        // against the collection schema here. Otherwise we validate against whichever                                 // 370\n        // one was passed.                                                                                             // 371\n        isValid = _validateForm(formId, data, formDocs, ssIsOverride);                                                 // 372\n        if (isValid === false) {                                                                                       // 373\n          return failedValidation();                                                                                   // 374\n        }                                                                                                              // 375\n        // Make callback for Meteor.call                                                                               // 376\n        var methodCallback = makeCallback(method);                                                                     // 377\n        // Call the method                                                                                             // 378\n        Meteor.call(method, doc, updateDoc, docId, methodCallback);                                                    // 379\n      });                                                                                                              // 380\n    }                                                                                                                  // 381\n                                                                                                                       // 382\n    // NORMAL FORM SUBMIT                                                                                              // 383\n    else if (isNormalSubmit) {                                                                                         // 384\n      // Get onSubmit hooks                                                                                            // 385\n      var onSubmitHooks = Hooks.getHooks(formId, 'onSubmit');                                                          // 386\n      doOnSubmit(onSubmitHooks, insertDoc, updateDoc, currentDoc);                                                     // 387\n    }                                                                                                                  // 388\n  },                                                                                                                   // 389\n  'keyup [data-schema-key]': function autoFormKeyUpHandler(event, template) {                                          // 390\n    var validationType = template.data.validation || 'submitThenKeyup';                                                // 391\n    var onlyIfAlreadyInvalid = (validationType === 'submitThenKeyup');                                                 // 392\n    var skipEmpty = !(event.keyCode === 8 || event.keyCode === 46); //if deleting or backspacing, don't skip empty     // 393\n    if ((validationType === 'keyup' || validationType === 'submitThenKeyup')) {                                        // 394\n      validateField(event.currentTarget.getAttribute(\"data-schema-key\"), template, skipEmpty, onlyIfAlreadyInvalid);   // 395\n    }                                                                                                                  // 396\n  },                                                                                                                   // 397\n  'blur [data-schema-key]': function autoFormBlurHandler(event, template) {                                            // 398\n    var validationType = template.data.validation || 'submitThenKeyup';                                                // 399\n    var onlyIfAlreadyInvalid = (validationType === 'submitThenKeyup' || validationType === 'submitThenBlur');          // 400\n    if (validationType === 'keyup' || validationType === 'blur' || validationType === 'submitThenKeyup' || validationType === 'submitThenBlur') {\n      validateField(event.currentTarget.getAttribute(\"data-schema-key\"), template, false, onlyIfAlreadyInvalid);       // 402\n    }                                                                                                                  // 403\n  },                                                                                                                   // 404\n  'change form': function autoFormChangeHandler(event, template) {                                                     // 405\n    var self = this;                                                                                                   // 406\n                                                                                                                       // 407\n    var key = event.target.getAttribute(\"data-schema-key\");                                                            // 408\n    if (!key) {                                                                                                        // 409\n      key = $(event.target).closest('[data-schema-key]').attr(\"data-schema-key\");                                      // 410\n      if (!key) return;                                                                                                // 411\n    }                                                                                                                  // 412\n                                                                                                                       // 413\n    var formId = self.id || defaultFormId;                                                                             // 414\n    var data = formData[formId];                                                                                       // 415\n    if (!data)                                                                                                         // 416\n      return;                                                                                                          // 417\n                                                                                                                       // 418\n    // Mark field value as changed for reactive updates                                                                // 419\n    updateTrackedFieldValue(formId, key);                                                                              // 420\n                                                                                                                       // 421\n    // If the form should be auto-saved whenever updated, we do that on field                                          // 422\n    // changes instead of validating the field                                                                         // 423\n    if (data.autosave) {                                                                                               // 424\n      lastAutoSaveElement = event.target;                                                                              // 425\n      $(event.currentTarget).submit();                                                                                 // 426\n      return;                                                                                                          // 427\n    }                                                                                                                  // 428\n                                                                                                                       // 429\n    var validationType = data.validationType || 'submitThenKeyup';                                                     // 430\n    var onlyIfAlreadyInvalid = (validationType === 'submitThenKeyup' || validationType === 'submitThenBlur');          // 431\n    if (validationType === 'keyup' || validationType === 'blur' || validationType === 'submitThenKeyup' || validationType === 'submitThenBlur') {\n      validateField(key, template, false, onlyIfAlreadyInvalid);                                                       // 433\n    }                                                                                                                  // 434\n  },                                                                                                                   // 435\n  'reset form': function autoFormResetHandler(event, template) {                                                       // 436\n    var formId = this.id || defaultFormId;                                                                             // 437\n                                                                                                                       // 438\n    formPreserve.clearDocument(formId);                                                                                // 439\n                                                                                                                       // 440\n    // Reset array counts                                                                                              // 441\n    arrayTracker.resetForm(formId);                                                                                    // 442\n                                                                                                                       // 443\n    var fd = formData[formId];                                                                                         // 444\n                                                                                                                       // 445\n    if (!fd)                                                                                                           // 446\n      return;                                                                                                          // 447\n                                                                                                                       // 448\n    if (fd.ss) {                                                                                                       // 449\n      fd.ss.namedContext(formId).resetValidation();                                                                    // 450\n      // If simpleSchema is undefined, we haven't yet rendered the form, and therefore                                 // 451\n      // there is no need to reset validation for it. No error need be thrown.                                         // 452\n    }                                                                                                                  // 453\n                                                                                                                       // 454\n    if (this.doc) {                                                                                                    // 455\n      event.preventDefault();                                                                                          // 456\n                                                                                                                       // 457\n      // Use destroy form hack since Meteor doesn't give us an easy way to                                             // 458\n      // invalidate changed form attributes yet.                                                                       // 459\n      afDestroyUpdateForm.set(true);                                                                                   // 460\n      Tracker.flush();                                                                                                 // 461\n      afDestroyUpdateForm.set(false);                                                                                  // 462\n      Tracker.flush();                                                                                                 // 463\n                                                                                                                       // 464\n      template.$(\"[autofocus]\").focus();                                                                               // 465\n    } else {                                                                                                           // 466\n      // This must be done after we allow this event handler to return                                                 // 467\n      // because we have to let the browser reset all fields before we                                                 // 468\n      // update their values for deps.                                                                                 // 469\n      setTimeout(function () {                                                                                         // 470\n        // Mark all fields as changed                                                                                  // 471\n        updateAllTrackedFieldValues(formId);                                                                           // 472\n                                                                                                                       // 473\n        // Focus the autofocus element                                                                                 // 474\n        if (template && template.view._domrange && !template.view.isDestroyed) {                                       // 475\n          template.$(\"[autofocus]\").focus();                                                                           // 476\n        }                                                                                                              // 477\n      }, 0);                                                                                                           // 478\n    }                                                                                                                  // 479\n                                                                                                                       // 480\n  },                                                                                                                   // 481\n  'keydown .autoform-array-item input': function (event, template) {                                                   // 482\n    // When enter is pressed in an array item field, default behavior                                                  // 483\n    // seems to be to \"click\" the remove item button. This doesn't make                                                // 484\n    // sense so we stop it.                                                                                            // 485\n    if (event.keyCode === 13) {                                                                                        // 486\n      event.preventDefault();                                                                                          // 487\n    }                                                                                                                  // 488\n  },                                                                                                                   // 489\n  'click .autoform-remove-item': function autoFormClickRemoveItem(event, template) {                                   // 490\n    var self = this; // This type of button must be used within an afEachArrayItem block, so we know the context       // 491\n                                                                                                                       // 492\n    event.preventDefault();                                                                                            // 493\n                                                                                                                       // 494\n    var name = self.arrayFieldName;                                                                                    // 495\n    var minCount = self.minCount; // optional, overrides schema                                                        // 496\n    var maxCount = self.maxCount; // optional, overrides schema                                                        // 497\n    var index = self.index;                                                                                            // 498\n    var data = template.data;                                                                                          // 499\n    var formId = data && data.id || defaultFormId;                                                                     // 500\n    var ss = formData[formId].ss;                                                                                      // 501\n                                                                                                                       // 502\n    // remove the item we clicked                                                                                      // 503\n    arrayTracker.removeFromFieldAtIndex(formId, name, index, ss, minCount, maxCount);                                  // 504\n  },                                                                                                                   // 505\n  'click .autoform-add-item': function autoFormClickAddItem(event, template) {                                         // 506\n    event.preventDefault();                                                                                            // 507\n                                                                                                                       // 508\n    // We pull from data attributes because the button could be manually                                               // 509\n    // added anywhere, so we don't know the data context.                                                              // 510\n    var btn = $(event.currentTarget);                                                                                  // 511\n    var name = btn.attr(\"data-autoform-field\");                                                                        // 512\n    var minCount = btn.attr(\"data-autoform-minCount\"); // optional, overrides schema                                   // 513\n    var maxCount = btn.attr(\"data-autoform-maxCount\"); // optional, overrides schema                                   // 514\n    var data = template.data;                                                                                          // 515\n    var formId = data && data.id || defaultFormId;                                                                     // 516\n    var ss = formData[formId].ss;                                                                                      // 517\n                                                                                                                       // 518\n    arrayTracker.addOneToField(formId, name, ss, minCount, maxCount);                                                  // 519\n  }                                                                                                                    // 520\n});                                                                                                                    // 521\n                                                                                                                       // 522\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 6838\n}).call(this);                                                       // 6839\n                                                                     // 6840\n                                                                     // 6841\n                                                                     // 6842\n                                                                     // 6843\n                                                                     // 6844\n                                                                     // 6845\n(function () {                                                       // 6846\n                                                                     // 6847\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/template.bootstrap3.js                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"quickForm_bootstrap3\");                                                                          // 2\nTemplate[\"quickForm_bootstrap3\"] = new Template(\"Template.quickForm_bootstrap3\", (function() {                         // 3\n  var view = this;                                                                                                     // 4\n  return Blaze._TemplateWith(function() {                                                                              // 5\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"qfAutoFormContext\"));                                       // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.include(view.lookupTemplate(\"autoForm\"), function() {                                             // 8\n      return [ \"\\n    \", Spacebars.include(view.lookupTemplate(\"afQuickFields\")), \"\\n    \", Blaze.If(function() {      // 9\n        return Spacebars.call(view.lookup(\"qfShouldRenderButton\"));                                                    // 10\n      }, function() {                                                                                                  // 11\n        return [ \"\\n    \", HTML.DIV({                                                                                  // 12\n          \"class\": \"form-group\"                                                                                        // 13\n        }, \"\\n      \", HTML.BUTTON(HTML.Attrs({                                                                        // 14\n          type: \"submit\"                                                                                               // 15\n        }, function() {                                                                                                // 16\n          return Spacebars.attrMustache(view.lookup(\"submitButtonAtts\"));                                              // 17\n        }), \"\\n      \", Spacebars.With(function() {                                                                    // 18\n          return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"atts\", \"buttonContent\"));                            // 19\n        }, function() {                                                                                                // 20\n          return [ \"\\n      \", Blaze.View(function() {                                                                 // 21\n            return Spacebars.mustache(view.lookup(\".\"));                                                               // 22\n          }), \"\\n      \" ];                                                                                            // 23\n        }, function() {                                                                                                // 24\n          return \"\\n      Submit\\n      \";                                                                             // 25\n        }), \"\\n      \"), \"\\n    \"), \"\\n    \" ];                                                                        // 26\n      }), \"\\n  \" ];                                                                                                    // 27\n    });                                                                                                                // 28\n  });                                                                                                                  // 29\n}));                                                                                                                   // 30\n                                                                                                                       // 31\nTemplate.__checkName(\"afFormGroup_bootstrap3\");                                                                        // 32\nTemplate[\"afFormGroup_bootstrap3\"] = new Template(\"Template.afFormGroup_bootstrap3\", (function() {                     // 33\n  var view = this;                                                                                                     // 34\n  return HTML.DIV({                                                                                                    // 35\n    \"class\": function() {                                                                                              // 36\n      return [ \"form-group \", Blaze.If(function() {                                                                    // 37\n        return Spacebars.dataMustache(view.lookup(\"afFieldIsInvalid\"), Spacebars.kw({                                  // 38\n          name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                        // 39\n        }));                                                                                                           // 40\n      }, function() {                                                                                                  // 41\n        return \"has-error\";                                                                                            // 42\n      }) ];                                                                                                            // 43\n    }                                                                                                                  // 44\n  }, \"\\n    \", Blaze.Unless(function() {                                                                               // 45\n    return Spacebars.call(view.lookup(\"skipLabel\"));                                                                   // 46\n  }, function() {                                                                                                      // 47\n    return [ \"\\n    \", HTML.LABEL(HTML.Attrs(function() {                                                              // 48\n      return Spacebars.attrMustache(view.lookup(\"bsFieldLabelAtts\"));                                                  // 49\n    }), Blaze.If(function() {                                                                                          // 50\n      return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"labelText\"));                                             // 51\n    }, function() {                                                                                                    // 52\n      return Blaze.View(function() {                                                                                   // 53\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"labelText\"));                                       // 54\n      });                                                                                                              // 55\n    }, function() {                                                                                                    // 56\n      return Blaze.View(function() {                                                                                   // 57\n        return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                      // 58\n          name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                        // 59\n        }));                                                                                                           // 60\n      });                                                                                                              // 61\n    })), \"\\n    \" ];                                                                                                   // 62\n  }), \"\\n    \", Blaze._TemplateWith(function() {                                                                       // 63\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"afFieldInputAtts\"));                                        // 64\n  }, function() {                                                                                                      // 65\n    return Spacebars.include(view.lookupTemplate(\"afFieldInput\"));                                                     // 66\n  }), \"\\n    \", HTML.SPAN({                                                                                            // 67\n    \"class\": \"help-block\"                                                                                              // 68\n  }, Blaze.View(function() {                                                                                           // 69\n    return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"afFieldMessage\"), Spacebars.kw({                          // 70\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                            // 71\n    })));                                                                                                              // 72\n  })), \"\\n  \");                                                                                                        // 73\n}));                                                                                                                   // 74\n                                                                                                                       // 75\nTemplate.__checkName(\"afObjectField_bootstrap3\");                                                                      // 76\nTemplate[\"afObjectField_bootstrap3\"] = new Template(\"Template.afObjectField_bootstrap3\", (function() {                 // 77\n  var view = this;                                                                                                     // 78\n  return HTML.DIV({                                                                                                    // 79\n    \"class\": \"panel panel-default\"                                                                                     // 80\n  }, \"\\n    \", Spacebars.With(function() {                                                                             // 81\n    return Spacebars.dataMustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                      // 82\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                            // 83\n    }));                                                                                                               // 84\n  }, function() {                                                                                                      // 85\n    return [ \"\\n    \", HTML.DIV({                                                                                      // 86\n      \"class\": \"panel-heading\"                                                                                         // 87\n    }, \"\\n      \", HTML.H3({                                                                                           // 88\n      \"class\": \"panel-title\"                                                                                           // 89\n    }, Blaze.View(function() {                                                                                         // 90\n      return Spacebars.mustache(view.lookup(\".\"));                                                                     // 91\n    })), \"\\n    \"), \"\\n    \" ];                                                                                        // 92\n  }), \"\\n    \", HTML.DIV({                                                                                             // 93\n    \"class\": \"panel-body\"                                                                                              // 94\n  }, \"\\n      \", Blaze.If(function() {                                                                                 // 95\n    return Spacebars.dataMustache(view.lookup(\"afFieldIsInvalid\"), Spacebars.kw({                                      // 96\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                            // 97\n    }));                                                                                                               // 98\n  }, function() {                                                                                                      // 99\n    return [ \"\\n      \", HTML.SPAN({                                                                                   // 100\n      \"class\": \"help-block\"                                                                                            // 101\n    }, Blaze.View(function() {                                                                                         // 102\n      return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"afFieldMessage\"), Spacebars.kw({                        // 103\n        name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                          // 104\n      })));                                                                                                            // 105\n    })), \"\\n      \" ];                                                                                                 // 106\n  }), \"\\n      \", Blaze._TemplateWith(function() {                                                                     // 107\n    return {                                                                                                           // 108\n      name: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\"))                                            // 109\n    };                                                                                                                 // 110\n  }, function() {                                                                                                      // 111\n    return Spacebars.include(view.lookupTemplate(\"afQuickFields\"));                                                    // 112\n  }), \"\\n    \"), \"\\n  \");                                                                                              // 113\n}));                                                                                                                   // 114\n                                                                                                                       // 115\nTemplate.__checkName(\"afArrayField_bootstrap3\");                                                                       // 116\nTemplate[\"afArrayField_bootstrap3\"] = new Template(\"Template.afArrayField_bootstrap3\", (function() {                   // 117\n  var view = this;                                                                                                     // 118\n  return HTML.DIV({                                                                                                    // 119\n    \"class\": \"panel panel-default\"                                                                                     // 120\n  }, \"\\n    \", HTML.DIV({                                                                                              // 121\n    \"class\": \"panel-heading\"                                                                                           // 122\n  }, Blaze.View(function() {                                                                                           // 123\n    return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                          // 124\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                            // 125\n    }));                                                                                                               // 126\n  })), \"\\n    \", Blaze.If(function() {                                                                                 // 127\n    return Spacebars.dataMustache(view.lookup(\"afFieldIsInvalid\"), Spacebars.kw({                                      // 128\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                            // 129\n    }));                                                                                                               // 130\n  }, function() {                                                                                                      // 131\n    return [ \"\\n    \", HTML.DIV({                                                                                      // 132\n      \"class\": \"panel-body has-error\"                                                                                  // 133\n    }, \"\\n      \", HTML.SPAN({                                                                                         // 134\n      \"class\": \"help-block\"                                                                                            // 135\n    }, Blaze.View(function() {                                                                                         // 136\n      return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"afFieldMessage\"), Spacebars.kw({                        // 137\n        name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                          // 138\n      })));                                                                                                            // 139\n    })), \"\\n    \"), \"\\n    \" ];                                                                                        // 140\n  }), \"\\n    \", HTML.UL({                                                                                              // 141\n    \"class\": \"list-group\"                                                                                              // 142\n  }, \"\\n      \", Blaze._TemplateWith(function() {                                                                      // 143\n    return {                                                                                                           // 144\n      name: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")),                                           // 145\n      minCount: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"minCount\")),                                   // 146\n      maxCount: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"maxCount\"))                                    // 147\n    };                                                                                                                 // 148\n  }, function() {                                                                                                      // 149\n    return Spacebars.include(view.lookupTemplate(\"afEachArrayItem\"), function() {                                      // 150\n      return [ \"\\n      \", HTML.LI({                                                                                   // 151\n        \"class\": \"list-group-item autoform-array-item\"                                                                 // 152\n      }, \"\\n        \", HTML.DIV({                                                                                      // 153\n        \"class\": \"media\"                                                                                               // 154\n      }, \"\\n          \", Blaze.If(function() {                                                                         // 155\n        return Spacebars.dataMustache(view.lookup(\"afArrayFieldHasMoreThanMinimum\"), Spacebars.kw({                    // 156\n          name: Spacebars.dot(view.lookup(\"..\"), \"atts\", \"name\"),                                                      // 157\n          minCount: Spacebars.dot(view.lookup(\"..\"), \"atts\", \"minCount\"),                                              // 158\n          maxCount: Spacebars.dot(view.lookup(\"..\"), \"atts\", \"maxCount\")                                               // 159\n        }));                                                                                                           // 160\n      }, function() {                                                                                                  // 161\n        return [ \"\\n          \", HTML.BUTTON({                                                                         // 162\n          type: \"button\",                                                                                              // 163\n          \"class\": \"btn btn-primary autoform-remove-item pull-left\"                                                    // 164\n        }, HTML.SPAN({                                                                                                 // 165\n          \"class\": \"glyphicon glyphicon-minus\"                                                                         // 166\n        })), \"\\n          \" ];                                                                                         // 167\n      }), \"\\n          \", HTML.DIV({                                                                                   // 168\n        \"class\": \"media-body\"                                                                                          // 169\n      }, \"\\n            \", Blaze._TemplateWith(function() {                                                            // 170\n        return {                                                                                                       // 171\n          name: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"name\")),                                               // 172\n          label: Spacebars.call(false),                                                                                // 173\n          options: Spacebars.call(\"auto\")                                                                              // 174\n        };                                                                                                             // 175\n      }, function() {                                                                                                  // 176\n        return Spacebars.include(view.lookupTemplate(\"afQuickField\"));                                                 // 177\n      }), \"\\n          \"), \"\\n        \"), \"\\n      \"), \"\\n      \" ];                                                   // 178\n    });                                                                                                                // 179\n  }), \"\\n      \", Blaze.If(function() {                                                                                // 180\n    return Spacebars.dataMustache(view.lookup(\"afArrayFieldHasLessThanMaximum\"), Spacebars.kw({                        // 181\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\"),                                                           // 182\n      minCount: Spacebars.dot(view.lookup(\".\"), \"atts\", \"minCount\"),                                                   // 183\n      maxCount: Spacebars.dot(view.lookup(\".\"), \"atts\", \"maxCount\")                                                    // 184\n    }));                                                                                                               // 185\n  }, function() {                                                                                                      // 186\n    return [ \"\\n      \", HTML.LI({                                                                                     // 187\n      \"class\": \"list-group-item\"                                                                                       // 188\n    }, \"\\n        \", HTML.BUTTON({                                                                                     // 189\n      type: \"button\",                                                                                                  // 190\n      \"class\": \"btn btn-primary autoform-add-item\",                                                                    // 191\n      \"data-autoform-field\": function() {                                                                              // 192\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\"));                                    // 193\n      },                                                                                                               // 194\n      \"data-autoform-mincount\": function() {                                                                           // 195\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"atts\", \"minCount\"));                                // 196\n      },                                                                                                               // 197\n      \"data-autoform-maxcount\": function() {                                                                           // 198\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"atts\", \"maxCount\"));                                // 199\n      }                                                                                                                // 200\n    }, HTML.SPAN({                                                                                                     // 201\n      \"class\": \"glyphicon glyphicon-plus\"                                                                              // 202\n    })), \"\\n      \"), \"\\n      \" ];                                                                                    // 203\n  }), \"\\n    \"), \"\\n  \");                                                                                              // 204\n}));                                                                                                                   // 205\n                                                                                                                       // 206\nTemplate.__checkName(\"afCheckbox_bootstrap3\");                                                                         // 207\nTemplate[\"afCheckbox_bootstrap3\"] = new Template(\"Template.afCheckbox_bootstrap3\", (function() {                       // 208\n  var view = this;                                                                                                     // 209\n  return HTML.DIV({                                                                                                    // 210\n    \"class\": \"checkbox\"                                                                                                // 211\n  }, \"\\n    \", HTML.LABEL(\"\\n      \", HTML.INPUT(HTML.Attrs({                                                          // 212\n    type: \"checkbox\",                                                                                                  // 213\n    value: function() {                                                                                                // 214\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 215\n    }                                                                                                                  // 216\n  }, function() {                                                                                                      // 217\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 218\n  })), \"\\n      \", Blaze.View(function() {                                                                             // 219\n    return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                          // 220\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                    // 221\n    }));                                                                                                               // 222\n  }), \"\\n    \"), \"\\n  \");                                                                                              // 223\n}));                                                                                                                   // 224\n                                                                                                                       // 225\nTemplate.__checkName(\"afCheckboxGroup_bootstrap3\");                                                                    // 226\nTemplate[\"afCheckboxGroup_bootstrap3\"] = new Template(\"Template.afCheckboxGroup_bootstrap3\", (function() {             // 227\n  var view = this;                                                                                                     // 228\n  return HTML.DIV(HTML.Attrs({                                                                                         // 229\n    \"class\": \"af-checkbox-group\"                                                                                       // 230\n  }, function() {                                                                                                      // 231\n    return Spacebars.attrMustache(view.lookup(\"dsk\"));                                                                 // 232\n  }), \"\\n    \", Blaze.Each(function() {                                                                                // 233\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 234\n  }, function() {                                                                                                      // 235\n    return [ \"\\n      \", HTML.DIV({                                                                                    // 236\n      \"class\": \"checkbox\"                                                                                              // 237\n    }, \"\\n        \", HTML.LABEL(\"\\n          \", HTML.INPUT(HTML.Attrs({                                                // 238\n      type: \"checkbox\",                                                                                                // 239\n      value: function() {                                                                                              // 240\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                           // 241\n      }                                                                                                                // 242\n    }, function() {                                                                                                    // 243\n      return Spacebars.attrMustache(view.lookup(\"atts\"));                                                              // 244\n    })), \"\\n          \", Blaze.View(function() {                                                                       // 245\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                             // 246\n    }), \"\\n        \"), \"\\n      \"), \"\\n    \" ];                                                                        // 247\n  }), \"\\n  \");                                                                                                         // 248\n}));                                                                                                                   // 249\n                                                                                                                       // 250\nTemplate.__checkName(\"afCheckboxGroupInline_bootstrap3\");                                                              // 251\nTemplate[\"afCheckboxGroupInline_bootstrap3\"] = new Template(\"Template.afCheckboxGroupInline_bootstrap3\", (function() { // 252\n  var view = this;                                                                                                     // 253\n  return HTML.DIV(HTML.Attrs({                                                                                         // 254\n    \"class\": \"af-checkbox-group\"                                                                                       // 255\n  }, function() {                                                                                                      // 256\n    return Spacebars.attrMustache(view.lookup(\"dsk\"));                                                                 // 257\n  }), \"\\n    \", Blaze.Each(function() {                                                                                // 258\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 259\n  }, function() {                                                                                                      // 260\n    return [ \"\\n      \", HTML.LABEL({                                                                                  // 261\n      \"class\": \"checkbox-inline\"                                                                                       // 262\n    }, \"\\n        \", HTML.INPUT(HTML.Attrs({                                                                           // 263\n      type: \"checkbox\",                                                                                                // 264\n      value: function() {                                                                                              // 265\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                           // 266\n      }                                                                                                                // 267\n    }, function() {                                                                                                    // 268\n      return Spacebars.attrMustache(view.lookup(\"atts\"));                                                              // 269\n    })), \"\\n        \", Blaze.View(function() {                                                                         // 270\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                             // 271\n    }), \"\\n      \"), \"\\n    \" ];                                                                                       // 272\n  }), \"\\n  \");                                                                                                         // 273\n}));                                                                                                                   // 274\n                                                                                                                       // 275\nTemplate.__checkName(\"afRadio_bootstrap3\");                                                                            // 276\nTemplate[\"afRadio_bootstrap3\"] = new Template(\"Template.afRadio_bootstrap3\", (function() {                             // 277\n  var view = this;                                                                                                     // 278\n  return HTML.DIV({                                                                                                    // 279\n    \"class\": \"radio\"                                                                                                   // 280\n  }, \"\\n    \", HTML.LABEL(\"\\n      \", HTML.INPUT(HTML.Attrs({                                                          // 281\n    type: \"radio\",                                                                                                     // 282\n    value: function() {                                                                                                // 283\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 284\n    }                                                                                                                  // 285\n  }, function() {                                                                                                      // 286\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 287\n  })), \"\\n      \", Blaze.View(function() {                                                                             // 288\n    return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                          // 289\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                    // 290\n    }));                                                                                                               // 291\n  }), \"\\n    \"), \"\\n  \");                                                                                              // 292\n}));                                                                                                                   // 293\n                                                                                                                       // 294\nTemplate.__checkName(\"afRadioGroup_bootstrap3\");                                                                       // 295\nTemplate[\"afRadioGroup_bootstrap3\"] = new Template(\"Template.afRadioGroup_bootstrap3\", (function() {                   // 296\n  var view = this;                                                                                                     // 297\n  return HTML.DIV(HTML.Attrs({                                                                                         // 298\n    \"class\": \"af-radio-group\"                                                                                          // 299\n  }, function() {                                                                                                      // 300\n    return Spacebars.attrMustache(view.lookup(\"dsk\"));                                                                 // 301\n  }), \"\\n    \", Blaze.Each(function() {                                                                                // 302\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 303\n  }, function() {                                                                                                      // 304\n    return [ \"\\n      \", HTML.DIV({                                                                                    // 305\n      \"class\": \"radio\"                                                                                                 // 306\n    }, \"\\n        \", HTML.LABEL(\"\\n          \", HTML.INPUT(HTML.Attrs({                                                // 307\n      type: \"radio\",                                                                                                   // 308\n      value: function() {                                                                                              // 309\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                           // 310\n      }                                                                                                                // 311\n    }, function() {                                                                                                    // 312\n      return Spacebars.attrMustache(view.lookup(\"atts\"));                                                              // 313\n    })), \"\\n          \", Blaze.View(function() {                                                                       // 314\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                             // 315\n    }), \"\\n        \"), \"\\n      \"), \"\\n    \" ];                                                                        // 316\n  }), \"\\n  \");                                                                                                         // 317\n}));                                                                                                                   // 318\n                                                                                                                       // 319\nTemplate.__checkName(\"afRadioGroupInline_bootstrap3\");                                                                 // 320\nTemplate[\"afRadioGroupInline_bootstrap3\"] = new Template(\"Template.afRadioGroupInline_bootstrap3\", (function() {       // 321\n  var view = this;                                                                                                     // 322\n  return HTML.DIV(HTML.Attrs({                                                                                         // 323\n    \"class\": \"af-radio-group\"                                                                                          // 324\n  }, function() {                                                                                                      // 325\n    return Spacebars.attrMustache(view.lookup(\"dsk\"));                                                                 // 326\n  }), \"\\n    \", Blaze.Each(function() {                                                                                // 327\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 328\n  }, function() {                                                                                                      // 329\n    return [ \"\\n      \", HTML.LABEL({                                                                                  // 330\n      \"class\": \"radio-inline\"                                                                                          // 331\n    }, \"\\n        \", HTML.INPUT(HTML.Attrs({                                                                           // 332\n      type: \"radio\",                                                                                                   // 333\n      value: function() {                                                                                              // 334\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                           // 335\n      }                                                                                                                // 336\n    }, function() {                                                                                                    // 337\n      return Spacebars.attrMustache(view.lookup(\"atts\"));                                                              // 338\n    })), \"\\n        \", Blaze.View(function() {                                                                         // 339\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                             // 340\n    }), \"\\n      \"), \"\\n    \" ];                                                                                       // 341\n  }), \"\\n  \");                                                                                                         // 342\n}));                                                                                                                   // 343\n                                                                                                                       // 344\nTemplate.__checkName(\"afBooleanRadioGroup_bootstrap3\");                                                                // 345\nTemplate[\"afBooleanRadioGroup_bootstrap3\"] = new Template(\"Template.afBooleanRadioGroup_bootstrap3\", (function() {     // 346\n  var view = this;                                                                                                     // 347\n  return HTML.DIV(HTML.Attrs(function() {                                                                              // 348\n    return Spacebars.attrMustache(view.lookup(\"dsk\"));                                                                 // 349\n  }), \"\\n    \", HTML.DIV({                                                                                             // 350\n    \"class\": \"radio\"                                                                                                   // 351\n  }, \"\\n      \", HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                                    // 352\n    type: \"radio\",                                                                                                     // 353\n    value: \"false\",                                                                                                    // 354\n    name: function() {                                                                                                 // 355\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"name\"));                                              // 356\n    }                                                                                                                  // 357\n  }, function() {                                                                                                      // 358\n    return Spacebars.attrMustache(view.lookup(\"falseAtts\"));                                                           // 359\n  })), \" \", Spacebars.With(function() {                                                                                // 360\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"falseLabel\"));                                      // 361\n  }, function() {                                                                                                      // 362\n    return Blaze.View(function() {                                                                                     // 363\n      return Spacebars.mustache(view.lookup(\".\"));                                                                     // 364\n    });                                                                                                                // 365\n  }, function() {                                                                                                      // 366\n    return \"False\";                                                                                                    // 367\n  })), \"\\n    \"), \"\\n    \", HTML.DIV({                                                                                 // 368\n    \"class\": \"radio\"                                                                                                   // 369\n  }, \"\\n      \", HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                                    // 370\n    type: \"radio\",                                                                                                     // 371\n    value: \"true\",                                                                                                     // 372\n    name: function() {                                                                                                 // 373\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"name\"));                                              // 374\n    }                                                                                                                  // 375\n  }, function() {                                                                                                      // 376\n    return Spacebars.attrMustache(view.lookup(\"trueAtts\"));                                                            // 377\n  })), \" \", Spacebars.With(function() {                                                                                // 378\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"trueLabel\"));                                       // 379\n  }, function() {                                                                                                      // 380\n    return Blaze.View(function() {                                                                                     // 381\n      return Spacebars.mustache(view.lookup(\".\"));                                                                     // 382\n    });                                                                                                                // 383\n  }, function() {                                                                                                      // 384\n    return \"True\";                                                                                                     // 385\n  })), \"\\n    \"), \"\\n  \");                                                                                             // 386\n}));                                                                                                                   // 387\n                                                                                                                       // 388\nTemplate.__checkName(\"afSelect_bootstrap3\");                                                                           // 389\nTemplate[\"afSelect_bootstrap3\"] = new Template(\"Template.afSelect_bootstrap3\", (function() {                           // 390\n  var view = this;                                                                                                     // 391\n  return HTML.SELECT(HTML.Attrs(function() {                                                                           // 392\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 393\n  }), \"\\n    \", Blaze.Each(function() {                                                                                // 394\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 395\n  }, function() {                                                                                                      // 396\n    return [ \"\\n      \", Blaze.If(function() {                                                                         // 397\n      return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"optgroup\"));                                              // 398\n    }, function() {                                                                                                    // 399\n      return [ \"\\n        \", HTML.OPTGROUP({                                                                           // 400\n        label: function() {                                                                                            // 401\n          return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"optgroup\"));                                      // 402\n        }                                                                                                              // 403\n      }, \"\\n        \", Blaze.Each(function() {                                                                         // 404\n        return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                               // 405\n      }, function() {                                                                                                  // 406\n        return [ \"\\n        \", HTML.OPTION(HTML.Attrs(function() {                                                     // 407\n          return Spacebars.attrMustache(view.lookup(\"optionAtts\"));                                                    // 408\n        }), Blaze.View(function() {                                                                                    // 409\n          return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                         // 410\n        })), \"\\n        \" ];                                                                                           // 411\n      }), \"\\n        \"), \"\\n      \" ];                                                                                 // 412\n    }, function() {                                                                                                    // 413\n      return [ \"\\n        \", HTML.OPTION(HTML.Attrs(function() {                                                       // 414\n        return Spacebars.attrMustache(view.lookup(\"optionAtts\"));                                                      // 415\n      }), Blaze.View(function() {                                                                                      // 416\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                           // 417\n      })), \"\\n      \" ];                                                                                               // 418\n    }), \"\\n    \" ];                                                                                                    // 419\n  }), \"\\n  \");                                                                                                         // 420\n}));                                                                                                                   // 421\n                                                                                                                       // 422\nTemplate.__checkName(\"afBooleanSelect_bootstrap3\");                                                                    // 423\nTemplate[\"afBooleanSelect_bootstrap3\"] = new Template(\"Template.afBooleanSelect_bootstrap3\", (function() {             // 424\n  var view = this;                                                                                                     // 425\n  return HTML.SELECT(HTML.Attrs(function() {                                                                           // 426\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 427\n  }), \"\\n    \", Blaze.Each(function() {                                                                                // 428\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 429\n  }, function() {                                                                                                      // 430\n    return [ \"\\n      \", HTML.OPTION(HTML.Attrs(function() {                                                           // 431\n      return Spacebars.attrMustache(view.lookup(\"optionAtts\"));                                                        // 432\n    }), Blaze.View(function() {                                                                                        // 433\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                             // 434\n    })), \"\\n    \" ];                                                                                                   // 435\n  }), \"\\n  \");                                                                                                         // 436\n}));                                                                                                                   // 437\n                                                                                                                       // 438\nTemplate.__checkName(\"afSelectMultiple_bootstrap3\");                                                                   // 439\nTemplate[\"afSelectMultiple_bootstrap3\"] = new Template(\"Template.afSelectMultiple_bootstrap3\", (function() {           // 440\n  var view = this;                                                                                                     // 441\n  return HTML.SELECT(HTML.Attrs({                                                                                      // 442\n    multiple: \"\"                                                                                                       // 443\n  }, function() {                                                                                                      // 444\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 445\n  }), \"\\n    \", Blaze.Each(function() {                                                                                // 446\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 447\n  }, function() {                                                                                                      // 448\n    return [ \"\\n      \", Blaze.If(function() {                                                                         // 449\n      return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"optgroup\"));                                              // 450\n    }, function() {                                                                                                    // 451\n      return [ \"\\n        \", HTML.OPTGROUP({                                                                           // 452\n        label: function() {                                                                                            // 453\n          return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"optgroup\"));                                      // 454\n        }                                                                                                              // 455\n      }, \"\\n        \", Blaze.Each(function() {                                                                         // 456\n        return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                               // 457\n      }, function() {                                                                                                  // 458\n        return [ \"\\n        \", HTML.OPTION(HTML.Attrs(function() {                                                     // 459\n          return Spacebars.attrMustache(view.lookup(\"optionAtts\"));                                                    // 460\n        }), Blaze.View(function() {                                                                                    // 461\n          return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                         // 462\n        })), \"\\n        \" ];                                                                                           // 463\n      }), \"\\n        \"), \"\\n      \" ];                                                                                 // 464\n    }, function() {                                                                                                    // 465\n      return [ \"\\n        \", HTML.OPTION(HTML.Attrs(function() {                                                       // 466\n        return Spacebars.attrMustache(view.lookup(\"optionAtts\"));                                                      // 467\n      }), Blaze.View(function() {                                                                                      // 468\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                           // 469\n      })), \"\\n      \" ];                                                                                               // 470\n    }), \"\\n    \" ];                                                                                                    // 471\n  }), \"\\n  \");                                                                                                         // 472\n}));                                                                                                                   // 473\n                                                                                                                       // 474\nTemplate.__checkName(\"afTextarea_bootstrap3\");                                                                         // 475\nTemplate[\"afTextarea_bootstrap3\"] = new Template(\"Template.afTextarea_bootstrap3\", (function() {                       // 476\n  var view = this;                                                                                                     // 477\n  return HTML.TEXTAREA(HTML.Attrs(function() {                                                                         // 478\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 479\n  }, {                                                                                                                 // 480\n    value: function() {                                                                                                // 481\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 482\n    }                                                                                                                  // 483\n  }));                                                                                                                 // 484\n}));                                                                                                                   // 485\n                                                                                                                       // 486\nTemplate.__checkName(\"afInputText_bootstrap3\");                                                                        // 487\nTemplate[\"afInputText_bootstrap3\"] = new Template(\"Template.afInputText_bootstrap3\", (function() {                     // 488\n  var view = this;                                                                                                     // 489\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 490\n    type: \"text\",                                                                                                      // 491\n    value: function() {                                                                                                // 492\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 493\n    }                                                                                                                  // 494\n  }, function() {                                                                                                      // 495\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 496\n  }));                                                                                                                 // 497\n}));                                                                                                                   // 498\n                                                                                                                       // 499\nTemplate.__checkName(\"afInputPassword_bootstrap3\");                                                                    // 500\nTemplate[\"afInputPassword_bootstrap3\"] = new Template(\"Template.afInputPassword_bootstrap3\", (function() {             // 501\n  var view = this;                                                                                                     // 502\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 503\n    type: \"password\",                                                                                                  // 504\n    value: function() {                                                                                                // 505\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 506\n    }                                                                                                                  // 507\n  }, function() {                                                                                                      // 508\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 509\n  }));                                                                                                                 // 510\n}));                                                                                                                   // 511\n                                                                                                                       // 512\nTemplate.__checkName(\"afInputButton_bootstrap3\");                                                                      // 513\nTemplate[\"afInputButton_bootstrap3\"] = new Template(\"Template.afInputButton_bootstrap3\", (function() {                 // 514\n  var view = this;                                                                                                     // 515\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 516\n    type: \"button\",                                                                                                    // 517\n    value: function() {                                                                                                // 518\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 519\n    }                                                                                                                  // 520\n  }, function() {                                                                                                      // 521\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 522\n  }));                                                                                                                 // 523\n}));                                                                                                                   // 524\n                                                                                                                       // 525\nTemplate.__checkName(\"afInputSubmit_bootstrap3\");                                                                      // 526\nTemplate[\"afInputSubmit_bootstrap3\"] = new Template(\"Template.afInputSubmit_bootstrap3\", (function() {                 // 527\n  var view = this;                                                                                                     // 528\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 529\n    type: \"submit\",                                                                                                    // 530\n    value: function() {                                                                                                // 531\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 532\n    }                                                                                                                  // 533\n  }, function() {                                                                                                      // 534\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 535\n  }));                                                                                                                 // 536\n}));                                                                                                                   // 537\n                                                                                                                       // 538\nTemplate.__checkName(\"afInputReset_bootstrap3\");                                                                       // 539\nTemplate[\"afInputReset_bootstrap3\"] = new Template(\"Template.afInputReset_bootstrap3\", (function() {                   // 540\n  var view = this;                                                                                                     // 541\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 542\n    type: \"reset\",                                                                                                     // 543\n    value: function() {                                                                                                // 544\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 545\n    }                                                                                                                  // 546\n  }, function() {                                                                                                      // 547\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 548\n  }));                                                                                                                 // 549\n}));                                                                                                                   // 550\n                                                                                                                       // 551\nTemplate.__checkName(\"afInputDateTime_bootstrap3\");                                                                    // 552\nTemplate[\"afInputDateTime_bootstrap3\"] = new Template(\"Template.afInputDateTime_bootstrap3\", (function() {             // 553\n  var view = this;                                                                                                     // 554\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 555\n    type: \"datetime\",                                                                                                  // 556\n    value: function() {                                                                                                // 557\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 558\n    }                                                                                                                  // 559\n  }, function() {                                                                                                      // 560\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 561\n  }));                                                                                                                 // 562\n}));                                                                                                                   // 563\n                                                                                                                       // 564\nTemplate.__checkName(\"afInputDateTimeLocal_bootstrap3\");                                                               // 565\nTemplate[\"afInputDateTimeLocal_bootstrap3\"] = new Template(\"Template.afInputDateTimeLocal_bootstrap3\", (function() {   // 566\n  var view = this;                                                                                                     // 567\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 568\n    type: \"datetime-local\",                                                                                            // 569\n    value: function() {                                                                                                // 570\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 571\n    }                                                                                                                  // 572\n  }, function() {                                                                                                      // 573\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 574\n  }));                                                                                                                 // 575\n}));                                                                                                                   // 576\n                                                                                                                       // 577\nTemplate.__checkName(\"afInputDate_bootstrap3\");                                                                        // 578\nTemplate[\"afInputDate_bootstrap3\"] = new Template(\"Template.afInputDate_bootstrap3\", (function() {                     // 579\n  var view = this;                                                                                                     // 580\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 581\n    type: \"date\",                                                                                                      // 582\n    value: function() {                                                                                                // 583\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 584\n    }                                                                                                                  // 585\n  }, function() {                                                                                                      // 586\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 587\n  }));                                                                                                                 // 588\n}));                                                                                                                   // 589\n                                                                                                                       // 590\nTemplate.__checkName(\"afInputMonth_bootstrap3\");                                                                       // 591\nTemplate[\"afInputMonth_bootstrap3\"] = new Template(\"Template.afInputMonth_bootstrap3\", (function() {                   // 592\n  var view = this;                                                                                                     // 593\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 594\n    type: \"month\",                                                                                                     // 595\n    value: function() {                                                                                                // 596\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 597\n    }                                                                                                                  // 598\n  }, function() {                                                                                                      // 599\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 600\n  }));                                                                                                                 // 601\n}));                                                                                                                   // 602\n                                                                                                                       // 603\nTemplate.__checkName(\"afInputTime_bootstrap3\");                                                                        // 604\nTemplate[\"afInputTime_bootstrap3\"] = new Template(\"Template.afInputTime_bootstrap3\", (function() {                     // 605\n  var view = this;                                                                                                     // 606\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 607\n    type: \"time\",                                                                                                      // 608\n    value: function() {                                                                                                // 609\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 610\n    }                                                                                                                  // 611\n  }, function() {                                                                                                      // 612\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 613\n  }));                                                                                                                 // 614\n}));                                                                                                                   // 615\n                                                                                                                       // 616\nTemplate.__checkName(\"afInputWeek_bootstrap3\");                                                                        // 617\nTemplate[\"afInputWeek_bootstrap3\"] = new Template(\"Template.afInputWeek_bootstrap3\", (function() {                     // 618\n  var view = this;                                                                                                     // 619\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 620\n    type: \"week\",                                                                                                      // 621\n    value: function() {                                                                                                // 622\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 623\n    }                                                                                                                  // 624\n  }, function() {                                                                                                      // 625\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 626\n  }));                                                                                                                 // 627\n}));                                                                                                                   // 628\n                                                                                                                       // 629\nTemplate.__checkName(\"afInputNumber_bootstrap3\");                                                                      // 630\nTemplate[\"afInputNumber_bootstrap3\"] = new Template(\"Template.afInputNumber_bootstrap3\", (function() {                 // 631\n  var view = this;                                                                                                     // 632\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 633\n    type: \"number\",                                                                                                    // 634\n    value: function() {                                                                                                // 635\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 636\n    }                                                                                                                  // 637\n  }, function() {                                                                                                      // 638\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 639\n  }));                                                                                                                 // 640\n}));                                                                                                                   // 641\n                                                                                                                       // 642\nTemplate.__checkName(\"afInputRange_bootstrap3\");                                                                       // 643\nTemplate[\"afInputRange_bootstrap3\"] = new Template(\"Template.afInputRange_bootstrap3\", (function() {                   // 644\n  var view = this;                                                                                                     // 645\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 646\n    type: \"range\",                                                                                                     // 647\n    value: function() {                                                                                                // 648\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 649\n    }                                                                                                                  // 650\n  }, function() {                                                                                                      // 651\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 652\n  }));                                                                                                                 // 653\n}));                                                                                                                   // 654\n                                                                                                                       // 655\nTemplate.__checkName(\"afInputEmail_bootstrap3\");                                                                       // 656\nTemplate[\"afInputEmail_bootstrap3\"] = new Template(\"Template.afInputEmail_bootstrap3\", (function() {                   // 657\n  var view = this;                                                                                                     // 658\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 659\n    type: \"email\",                                                                                                     // 660\n    value: function() {                                                                                                // 661\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 662\n    }                                                                                                                  // 663\n  }, function() {                                                                                                      // 664\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 665\n  }));                                                                                                                 // 666\n}));                                                                                                                   // 667\n                                                                                                                       // 668\nTemplate.__checkName(\"afInputUrl_bootstrap3\");                                                                         // 669\nTemplate[\"afInputUrl_bootstrap3\"] = new Template(\"Template.afInputUrl_bootstrap3\", (function() {                       // 670\n  var view = this;                                                                                                     // 671\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 672\n    type: \"url\",                                                                                                       // 673\n    value: function() {                                                                                                // 674\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 675\n    }                                                                                                                  // 676\n  }, function() {                                                                                                      // 677\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 678\n  }));                                                                                                                 // 679\n}));                                                                                                                   // 680\n                                                                                                                       // 681\nTemplate.__checkName(\"afInputSearch_bootstrap3\");                                                                      // 682\nTemplate[\"afInputSearch_bootstrap3\"] = new Template(\"Template.afInputSearch_bootstrap3\", (function() {                 // 683\n  var view = this;                                                                                                     // 684\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 685\n    type: \"search\",                                                                                                    // 686\n    value: function() {                                                                                                // 687\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 688\n    }                                                                                                                  // 689\n  }, function() {                                                                                                      // 690\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 691\n  }));                                                                                                                 // 692\n}));                                                                                                                   // 693\n                                                                                                                       // 694\nTemplate.__checkName(\"afInputTel_bootstrap3\");                                                                         // 695\nTemplate[\"afInputTel_bootstrap3\"] = new Template(\"Template.afInputTel_bootstrap3\", (function() {                       // 696\n  var view = this;                                                                                                     // 697\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 698\n    type: \"tel\",                                                                                                       // 699\n    value: function() {                                                                                                // 700\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 701\n    }                                                                                                                  // 702\n  }, function() {                                                                                                      // 703\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 704\n  }));                                                                                                                 // 705\n}));                                                                                                                   // 706\n                                                                                                                       // 707\nTemplate.__checkName(\"afInputColor_bootstrap3\");                                                                       // 708\nTemplate[\"afInputColor_bootstrap3\"] = new Template(\"Template.afInputColor_bootstrap3\", (function() {                   // 709\n  var view = this;                                                                                                     // 710\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 711\n    type: \"color\",                                                                                                     // 712\n    value: function() {                                                                                                // 713\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 714\n    }                                                                                                                  // 715\n  }, function() {                                                                                                      // 716\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 717\n  }));                                                                                                                 // 718\n}));                                                                                                                   // 719\n                                                                                                                       // 720\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 7575\n}).call(this);                                                       // 7576\n                                                                     // 7577\n                                                                     // 7578\n                                                                     // 7579\n                                                                     // 7580\n                                                                     // 7581\n                                                                     // 7582\n(function () {                                                       // 7583\n                                                                     // 7584\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/bootstrap3.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*                                                                                                                     // 1\n * Template helpers for \"bootstrap3\" template                                                                          // 2\n */                                                                                                                    // 3\n                                                                                                                       // 4\nTemplate['quickForm_bootstrap3'].helpers({                                                                             // 5\n  submitButtonAtts: function bsQuickFormSubmitButtonAtts() {                                                           // 6\n    var qfAtts = this.atts;                                                                                            // 7\n    var atts = {};                                                                                                     // 8\n    if (typeof qfAtts.buttonClasses === \"string\") {                                                                    // 9\n      atts['class'] = qfAtts.buttonClasses;                                                                            // 10\n    } else {                                                                                                           // 11\n      atts['class'] = 'btn btn-primary';                                                                               // 12\n    }                                                                                                                  // 13\n    return atts;                                                                                                       // 14\n  }                                                                                                                    // 15\n});                                                                                                                    // 16\n                                                                                                                       // 17\nTemplate['afFormGroup_bootstrap3'].helpers({                                                                           // 18\n  skipLabel: function bsFormGroupSkipLabel() {                                                                         // 19\n    var self = this;                                                                                                   // 20\n                                                                                                                       // 21\n    var type = AutoForm.getInputType(self.afFieldInputAtts);                                                           // 22\n    return (self.skipLabel || type === \"boolean-checkbox\");                                                            // 23\n  },                                                                                                                   // 24\n  bsFieldLabelAtts: function bsFieldLabelAtts() {                                                                      // 25\n    var atts = _.clone(this.afFieldLabelAtts);                                                                         // 26\n    // Add bootstrap class                                                                                             // 27\n    atts = AutoForm.Utility.addClass(atts, \"control-label\");                                                           // 28\n    return atts;                                                                                                       // 29\n  }                                                                                                                    // 30\n});                                                                                                                    // 31\n                                                                                                                       // 32\n_.each([                                                                                                               // 33\n    \"afSelect_bootstrap3\",                                                                                             // 34\n    \"afBooleanSelect_bootstrap3\",                                                                                      // 35\n    \"afSelectMultiple_bootstrap3\",                                                                                     // 36\n    \"afTextarea_bootstrap3\",                                                                                           // 37\n    \"afInputText_bootstrap3\",                                                                                          // 38\n    \"afInputPassword_bootstrap3\",                                                                                      // 39\n    \"afInputDateTime_bootstrap3\",                                                                                      // 40\n    \"afInputDateTimeLocal_bootstrap3\",                                                                                 // 41\n    \"afInputDate_bootstrap3\",                                                                                          // 42\n    \"afInputMonth_bootstrap3\",                                                                                         // 43\n    \"afInputTime_bootstrap3\",                                                                                          // 44\n    \"afInputWeek_bootstrap3\",                                                                                          // 45\n    \"afInputNumber_bootstrap3\",                                                                                        // 46\n    \"afInputEmail_bootstrap3\",                                                                                         // 47\n    \"afInputUrl_bootstrap3\",                                                                                           // 48\n    \"afInputSearch_bootstrap3\",                                                                                        // 49\n    \"afInputTel_bootstrap3\",                                                                                           // 50\n    \"afInputColor_bootstrap3\"                                                                                          // 51\n  ], function (tmplName) {                                                                                             // 52\n  Template[tmplName].helpers({                                                                                         // 53\n    atts: function addFormControlAtts() {                                                                              // 54\n      var atts = _.clone(this.atts);                                                                                   // 55\n      // Add bootstrap class                                                                                           // 56\n      atts = AutoForm.Utility.addClass(atts, \"form-control\");                                                          // 57\n      return atts;                                                                                                     // 58\n    }                                                                                                                  // 59\n  });                                                                                                                  // 60\n});                                                                                                                    // 61\n                                                                                                                       // 62\n_.each([                                                                                                               // 63\n    \"afInputButton_bootstrap3\",                                                                                        // 64\n    \"afInputSubmit_bootstrap3\",                                                                                        // 65\n    \"afInputReset_bootstrap3\",                                                                                         // 66\n  ], function (tmplName) {                                                                                             // 67\n  Template[tmplName].helpers({                                                                                         // 68\n    atts: function addFormControlAtts() {                                                                              // 69\n      var atts = _.clone(this.atts);                                                                                   // 70\n      // Add bootstrap class                                                                                           // 71\n      atts = AutoForm.Utility.addClass(atts, \"btn\");                                                                   // 72\n      return atts;                                                                                                     // 73\n    }                                                                                                                  // 74\n  });                                                                                                                  // 75\n});                                                                                                                    // 76\n                                                                                                                       // 77\nTemplate[\"afRadio_bootstrap3\"].helpers({                                                                               // 78\n  atts: function selectedAttsAdjust() {                                                                                // 79\n    var atts = _.clone(this.atts);                                                                                     // 80\n    if (this.selected) {                                                                                               // 81\n      atts.checked = \"\";                                                                                               // 82\n    }                                                                                                                  // 83\n    return atts;                                                                                                       // 84\n  }                                                                                                                    // 85\n});                                                                                                                    // 86\n                                                                                                                       // 87\n_.each([                                                                                                               // 88\n    \"afCheckboxGroup_bootstrap3\",                                                                                      // 89\n    \"afRadioGroup_bootstrap3\",                                                                                         // 90\n    \"afCheckboxGroupInline_bootstrap3\",                                                                                // 91\n    \"afRadioGroupInline_bootstrap3\"                                                                                    // 92\n  ], function (tmplName) {                                                                                             // 93\n  Template[tmplName].helpers({                                                                                         // 94\n    atts: function selectedAttsAdjust() {                                                                              // 95\n      var atts = _.clone(this.atts);                                                                                   // 96\n      if (this.selected) {                                                                                             // 97\n        atts.checked = \"\";                                                                                             // 98\n      }                                                                                                                // 99\n      // remove data-schema-key attribute because we put it                                                            // 100\n      // on the entire group                                                                                           // 101\n      delete atts[\"data-schema-key\"];                                                                                  // 102\n      return atts;                                                                                                     // 103\n    },                                                                                                                 // 104\n    dsk: function dsk() {                                                                                              // 105\n      return {                                                                                                         // 106\n        \"data-schema-key\": this.atts[\"data-schema-key\"]                                                                // 107\n      }                                                                                                                // 108\n    }                                                                                                                  // 109\n  });                                                                                                                  // 110\n});                                                                                                                    // 111\n                                                                                                                       // 112\nvar selectHelpers = {                                                                                                  // 113\n  optionAtts: function afSelectOptionAtts() {                                                                          // 114\n    var item = this;                                                                                                   // 115\n    var atts = {                                                                                                       // 116\n      value: item.value                                                                                                // 117\n    };                                                                                                                 // 118\n    if (item.selected) {                                                                                               // 119\n      atts.selected = \"\";                                                                                              // 120\n    }                                                                                                                  // 121\n    return atts;                                                                                                       // 122\n  }                                                                                                                    // 123\n};                                                                                                                     // 124\nTemplate[\"afSelect_bootstrap3\"].helpers(selectHelpers);                                                                // 125\nTemplate[\"afSelectMultiple_bootstrap3\"].helpers(selectHelpers);                                                        // 126\nTemplate[\"afBooleanSelect_bootstrap3\"].helpers(selectHelpers);                                                         // 127\n                                                                                                                       // 128\nTemplate[\"afBooleanRadioGroup_bootstrap3\"].helpers({                                                                   // 129\n  falseAtts: function falseAtts() {                                                                                    // 130\n    var atts = _.omit(this.atts, 'trueLabel', 'falseLabel', 'data-schema-key');                                        // 131\n    if (this.value === false) {                                                                                        // 132\n      atts.checked = \"\";                                                                                               // 133\n    }                                                                                                                  // 134\n    return atts;                                                                                                       // 135\n  },                                                                                                                   // 136\n  trueAtts: function trueAtts() {                                                                                      // 137\n    var atts = _.omit(this.atts, 'trueLabel', 'falseLabel', 'data-schema-key');                                        // 138\n    if (this.value === true) {                                                                                         // 139\n      atts.checked = \"\";                                                                                               // 140\n    }                                                                                                                  // 141\n    return atts;                                                                                                       // 142\n  },                                                                                                                   // 143\n  dsk: function () {                                                                                                   // 144\n    return {'data-schema-key': this.atts['data-schema-key']};                                                          // 145\n  }                                                                                                                    // 146\n});                                                                                                                    // 147\n                                                                                                                       // 148\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 7740\n}).call(this);                                                       // 7741\n                                                                     // 7742\n                                                                     // 7743\n                                                                     // 7744\n                                                                     // 7745\n                                                                     // 7746\n                                                                     // 7747\n(function () {                                                       // 7748\n                                                                     // 7749\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3-horizontal/template.bootstrap3-horizontal.js                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"quickForm_bootstrap3-horizontal\");                                                               // 2\nTemplate[\"quickForm_bootstrap3-horizontal\"] = new Template(\"Template.quickForm_bootstrap3-horizontal\", (function() {   // 3\n  var view = this;                                                                                                     // 4\n  return Blaze._TemplateWith(function() {                                                                              // 5\n    return Spacebars.call(view.lookup(\"qfAutoFormContext\"));                                                           // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.include(view.lookupTemplate(\"autoForm\"), function() {                                             // 8\n      return [ \"\\n    \", Blaze._TemplateWith(function() {                                                              // 9\n        return {                                                                                                       // 10\n          \"input-col-class\": Spacebars.call(view.lookup(\"inputClass\")),                                                // 11\n          \"label-class\": Spacebars.call(view.lookup(\"labelClass\"))                                                     // 12\n        };                                                                                                             // 13\n      }, function() {                                                                                                  // 14\n        return Spacebars.include(view.lookupTemplate(\"afQuickFields\"));                                                // 15\n      }), \"\\n    \", Blaze.If(function() {                                                                              // 16\n        return Spacebars.call(view.lookup(\"qfShouldRenderButton\"));                                                    // 17\n      }, function() {                                                                                                  // 18\n        return [ \"\\n    \", HTML.DIV({                                                                                  // 19\n          \"class\": \"form-group\"                                                                                        // 20\n        }, \"\\n      \", HTML.DIV({                                                                                      // 21\n          \"class\": function() {                                                                                        // 22\n            return Spacebars.mustache(view.lookup(\"labelClass\"));                                                      // 23\n          }                                                                                                            // 24\n        }), \"\\n      \", HTML.DIV({                                                                                     // 25\n          \"class\": function() {                                                                                        // 26\n            return Spacebars.mustache(view.lookup(\"inputClass\"));                                                      // 27\n          }                                                                                                            // 28\n        }, \"\\n        \", HTML.BUTTON(HTML.Attrs({                                                                      // 29\n          type: \"submit\"                                                                                               // 30\n        }, function() {                                                                                                // 31\n          return Spacebars.attrMustache(view.lookup(\"submitButtonAtts\"));                                              // 32\n        }), \"\\n        \", Spacebars.With(function() {                                                                  // 33\n          return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"atts\", \"buttonContent\"));                            // 34\n        }, function() {                                                                                                // 35\n          return [ \"\\n        \", Blaze.View(function() {                                                               // 36\n            return Spacebars.mustache(view.lookup(\".\"));                                                               // 37\n          }), \"\\n        \" ];                                                                                          // 38\n        }, function() {                                                                                                // 39\n          return \"\\n        Submit\\n        \";                                                                         // 40\n        }), \"\\n        \"), \"\\n      \"), \"\\n    \"), \"\\n    \" ];                                                         // 41\n      }), \"\\n  \" ];                                                                                                    // 42\n    });                                                                                                                // 43\n  });                                                                                                                  // 44\n}));                                                                                                                   // 45\n                                                                                                                       // 46\nTemplate.__checkName(\"afFormGroup_bootstrap3-horizontal\");                                                             // 47\nTemplate[\"afFormGroup_bootstrap3-horizontal\"] = new Template(\"Template.afFormGroup_bootstrap3-horizontal\", (function() {\n  var view = this;                                                                                                     // 49\n  return HTML.DIV({                                                                                                    // 50\n    \"class\": function() {                                                                                              // 51\n      return [ \"form-group \", Blaze.If(function() {                                                                    // 52\n        return Spacebars.dataMustache(view.lookup(\"afFieldIsInvalid\"), Spacebars.kw({                                  // 53\n          name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                        // 54\n        }));                                                                                                           // 55\n      }, function() {                                                                                                  // 56\n        return \"has-error\";                                                                                            // 57\n      }) ];                                                                                                            // 58\n    }                                                                                                                  // 59\n  }, \"\\n    \", Blaze.If(function() {                                                                                   // 60\n    return Spacebars.call(view.lookup(\"skipLabel\"));                                                                   // 61\n  }, function() {                                                                                                      // 62\n    return [ \"\\n    \\n    \", HTML.LABEL(HTML.Attrs(function() {                                                        // 63\n      return Spacebars.attrMustache(view.lookup(\"afFieldLabelAtts\"));                                                  // 64\n    })), \"\\n    \" ];                                                                                                   // 65\n  }, function() {                                                                                                      // 66\n    return [ \"\\n    \", HTML.LABEL(HTML.Attrs(function() {                                                              // 67\n      return Spacebars.attrMustache(view.lookup(\"afFieldLabelAtts\"));                                                  // 68\n    }), Blaze.If(function() {                                                                                          // 69\n      return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"labelText\"));                                             // 70\n    }, function() {                                                                                                    // 71\n      return Blaze.View(function() {                                                                                   // 72\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"labelText\"));                                       // 73\n      });                                                                                                              // 74\n    }, function() {                                                                                                    // 75\n      return Blaze.View(function() {                                                                                   // 76\n        return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                      // 77\n          name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                        // 78\n        }));                                                                                                           // 79\n      });                                                                                                              // 80\n    })), \"\\n    \" ];                                                                                                   // 81\n  }), \"\\n    \", HTML.DIV({                                                                                             // 82\n    \"class\": function() {                                                                                              // 83\n      return Spacebars.mustache(view.lookup(\"rightColumnClass\"));                                                      // 84\n    }                                                                                                                  // 85\n  }, \"\\n      \", Blaze._TemplateWith(function() {                                                                      // 86\n    return Spacebars.call(view.lookup(\"afFieldInputAtts\"));                                                            // 87\n  }, function() {                                                                                                      // 88\n    return Spacebars.include(view.lookupTemplate(\"afFieldInput\"));                                                     // 89\n  }), \"\\n      \", HTML.SPAN({                                                                                          // 90\n    \"class\": \"help-block\"                                                                                              // 91\n  }, Blaze.View(function() {                                                                                           // 92\n    return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"afFieldMessage\"), Spacebars.kw({                          // 93\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                            // 94\n    })));                                                                                                              // 95\n  })), \"\\n    \"), \"\\n  \");                                                                                             // 96\n}));                                                                                                                   // 97\n                                                                                                                       // 98\nTemplate.__checkName(\"afObjectField_bootstrap3-horizontal\");                                                           // 99\nTemplate[\"afObjectField_bootstrap3-horizontal\"] = new Template(\"Template.afObjectField_bootstrap3-horizontal\", (function() {\n  var view = this;                                                                                                     // 101\n  return HTML.DIV({                                                                                                    // 102\n    \"class\": function() {                                                                                              // 103\n      return [ \"form-group \", Blaze.If(function() {                                                                    // 104\n        return Spacebars.dataMustache(view.lookup(\"afFieldIsInvalid\"), Spacebars.kw({                                  // 105\n          name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                        // 106\n        }));                                                                                                           // 107\n      }, function() {                                                                                                  // 108\n        return \"has-error\";                                                                                            // 109\n      }) ];                                                                                                            // 110\n    }                                                                                                                  // 111\n  }, \"\\n    \", HTML.LABEL(HTML.Attrs(function() {                                                                      // 112\n    return Spacebars.attrMustache(view.lookup(\"afFieldLabelAtts\"));                                                    // 113\n  }), Blaze.View(function() {                                                                                          // 114\n    return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                          // 115\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                            // 116\n    }));                                                                                                               // 117\n  })), \"\\n    \", HTML.DIV({                                                                                            // 118\n    \"class\": function() {                                                                                              // 119\n      return Spacebars.mustache(view.lookup(\"rightColumnClass\"));                                                      // 120\n    }                                                                                                                  // 121\n  }, \"\\n      \", HTML.DIV({                                                                                            // 122\n    \"class\": \"panel panel-default autoform-padding-fix\"                                                                // 123\n  }, \"\\n        \", HTML.DIV({                                                                                          // 124\n    \"class\": \"panel-body\"                                                                                              // 125\n  }, \"\\n        \\n        \", Blaze._TemplateWith(function() {                                                          // 126\n    return {                                                                                                           // 127\n      name: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")),                                           // 128\n      template: Spacebars.call(\"bootstrap3\")                                                                           // 129\n    };                                                                                                                 // 130\n  }, function() {                                                                                                      // 131\n    return Spacebars.include(view.lookupTemplate(\"afQuickFields\"));                                                    // 132\n  }), \"\\n        \"), \"\\n      \"), \"\\n    \"), \"\\n  \");                                                                  // 133\n}));                                                                                                                   // 134\n                                                                                                                       // 135\nTemplate.__checkName(\"afArrayField_bootstrap3-horizontal\");                                                            // 136\nTemplate[\"afArrayField_bootstrap3-horizontal\"] = new Template(\"Template.afArrayField_bootstrap3-horizontal\", (function() {\n  var view = this;                                                                                                     // 138\n  return HTML.DIV({                                                                                                    // 139\n    \"class\": function() {                                                                                              // 140\n      return [ \"form-group \", Blaze.If(function() {                                                                    // 141\n        return Spacebars.dataMustache(view.lookup(\"afFieldIsInvalid\"), Spacebars.kw({                                  // 142\n          name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                        // 143\n        }));                                                                                                           // 144\n      }, function() {                                                                                                  // 145\n        return \"has-error\";                                                                                            // 146\n      }) ];                                                                                                            // 147\n    }                                                                                                                  // 148\n  }, \"\\n    \", HTML.LABEL(HTML.Attrs(function() {                                                                      // 149\n    return Spacebars.attrMustache(view.lookup(\"afFieldLabelAtts\"));                                                    // 150\n  }), Blaze.View(function() {                                                                                          // 151\n    return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                          // 152\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                            // 153\n    }));                                                                                                               // 154\n  })), \"\\n    \", HTML.DIV({                                                                                            // 155\n    \"class\": function() {                                                                                              // 156\n      return Spacebars.mustache(view.lookup(\"rightColumnClass\"));                                                      // 157\n    }                                                                                                                  // 158\n  }, \"\\n      \", HTML.DIV({                                                                                            // 159\n    \"class\": \"panel panel-default autoform-padding-fix\"                                                                // 160\n  }, \"\\n        \", Blaze.If(function() {                                                                               // 161\n    return Spacebars.dataMustache(view.lookup(\"afFieldIsInvalid\"), Spacebars.kw({                                      // 162\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                            // 163\n    }));                                                                                                               // 164\n  }, function() {                                                                                                      // 165\n    return [ \"\\n        \", HTML.DIV({                                                                                  // 166\n      \"class\": \"panel-body has-error\"                                                                                  // 167\n    }, \"\\n          \", HTML.SPAN({                                                                                     // 168\n      \"class\": \"help-block\"                                                                                            // 169\n    }, Blaze.View(function() {                                                                                         // 170\n      return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"afFieldMessage\"), Spacebars.kw({                        // 171\n        name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                          // 172\n      })));                                                                                                            // 173\n    })), \"\\n        \"), \"\\n        \" ];                                                                                // 174\n  }), \"\\n        \", HTML.UL({                                                                                          // 175\n    \"class\": \"list-group\"                                                                                              // 176\n  }, \"\\n          \", Blaze._TemplateWith(function() {                                                                  // 177\n    return {                                                                                                           // 178\n      name: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")),                                           // 179\n      minCount: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"minCount\")),                                   // 180\n      maxCount: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"maxCount\"))                                    // 181\n    };                                                                                                                 // 182\n  }, function() {                                                                                                      // 183\n    return Spacebars.include(view.lookupTemplate(\"afEachArrayItem\"), function() {                                      // 184\n      return [ \"\\n          \", HTML.LI({                                                                               // 185\n        \"class\": \"list-group-item autoform-array-item\"                                                                 // 186\n      }, \"\\n            \", HTML.DIV({                                                                                  // 187\n        \"class\": \"media\"                                                                                               // 188\n      }, \"\\n              \", Blaze.If(function() {                                                                     // 189\n        return Spacebars.dataMustache(view.lookup(\"afArrayFieldHasMoreThanMinimum\"), Spacebars.kw({                    // 190\n          name: Spacebars.dot(view.lookup(\"..\"), \"atts\", \"name\"),                                                      // 191\n          minCount: Spacebars.dot(view.lookup(\"..\"), \"atts\", \"minCount\"),                                              // 192\n          maxCount: Spacebars.dot(view.lookup(\"..\"), \"atts\", \"maxCount\")                                               // 193\n        }));                                                                                                           // 194\n      }, function() {                                                                                                  // 195\n        return [ \"\\n              \", HTML.BUTTON({                                                                     // 196\n          type: \"button\",                                                                                              // 197\n          \"class\": \"btn btn-primary autoform-remove-item pull-left\"                                                    // 198\n        }, HTML.SPAN({                                                                                                 // 199\n          \"class\": \"glyphicon glyphicon-minus\"                                                                         // 200\n        })), \"\\n              \" ];                                                                                     // 201\n      }), \"\\n              \", HTML.DIV({                                                                               // 202\n        \"class\": \"media-body\"                                                                                          // 203\n      }, \"\\n                \", Blaze._TemplateWith(function() {                                                        // 204\n        return {                                                                                                       // 205\n          name: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"name\")),                                               // 206\n          label: Spacebars.call(false)                                                                                 // 207\n        };                                                                                                             // 208\n      }, function() {                                                                                                  // 209\n        return Spacebars.include(view.lookupTemplate(\"afQuickField\"));                                                 // 210\n      }), \"\\n              \"), \"\\n            \"), \"\\n          \"), \"\\n          \" ];                                   // 211\n    });                                                                                                                // 212\n  }), \"\\n          \", Blaze.If(function() {                                                                            // 213\n    return Spacebars.dataMustache(view.lookup(\"afArrayFieldHasLessThanMaximum\"), Spacebars.kw({                        // 214\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\"),                                                           // 215\n      minCount: Spacebars.dot(view.lookup(\".\"), \"atts\", \"minCount\"),                                                   // 216\n      maxCount: Spacebars.dot(view.lookup(\".\"), \"atts\", \"maxCount\")                                                    // 217\n    }));                                                                                                               // 218\n  }, function() {                                                                                                      // 219\n    return [ \"\\n          \", HTML.LI({                                                                                 // 220\n      \"class\": \"list-group-item\"                                                                                       // 221\n    }, \"\\n            \", HTML.BUTTON({                                                                                 // 222\n      type: \"button\",                                                                                                  // 223\n      \"class\": \"btn btn-primary autoform-add-item\",                                                                    // 224\n      \"data-autoform-field\": function() {                                                                              // 225\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\"));                                    // 226\n      },                                                                                                               // 227\n      \"data-autoform-mincount\": function() {                                                                           // 228\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"atts\", \"minCount\"));                                // 229\n      },                                                                                                               // 230\n      \"data-autoform-maxcount\": function() {                                                                           // 231\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"atts\", \"maxCount\"));                                // 232\n      }                                                                                                                // 233\n    }, HTML.SPAN({                                                                                                     // 234\n      \"class\": \"glyphicon glyphicon-plus\"                                                                              // 235\n    })), \"\\n          \"), \"\\n          \" ];                                                                            // 236\n  }), \"\\n        \"), \"\\n      \"), \"\\n    \"), \"\\n  \");                                                                  // 237\n}));                                                                                                                   // 238\n                                                                                                                       // 239\nTemplate.__checkName(\"afCheckbox_bootstrap3-horizontal\");                                                              // 240\nTemplate[\"afCheckbox_bootstrap3-horizontal\"] = new Template(\"Template.afCheckbox_bootstrap3-horizontal\", (function() { // 241\n  var view = this;                                                                                                     // 242\n  return Blaze.If(function() {                                                                                         // 243\n    return Spacebars.call(view.lookup(\"useLeftLabel\"));                                                                // 244\n  }, function() {                                                                                                      // 245\n    return [ \"\\n  \\n  \", HTML.DIV({                                                                                    // 246\n      \"class\": \"checkbox\"                                                                                              // 247\n    }, \"\\n    \", HTML.INPUT(HTML.Attrs({                                                                               // 248\n      type: \"checkbox\",                                                                                                // 249\n      value: function() {                                                                                              // 250\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                           // 251\n      }                                                                                                                // 252\n    }, function() {                                                                                                    // 253\n      return Spacebars.attrMustache(view.lookup(\"attsPlusSpecialClass\"));                                              // 254\n    })), \"\\n  \"), \"\\n  \" ];                                                                                            // 255\n  }, function() {                                                                                                      // 256\n    return [ \"\\n  \", HTML.DIV({                                                                                        // 257\n      \"class\": \"checkbox\"                                                                                              // 258\n    }, \"\\n    \", HTML.LABEL(\"\\n      \", HTML.INPUT(HTML.Attrs({                                                        // 259\n      type: \"checkbox\",                                                                                                // 260\n      value: function() {                                                                                              // 261\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                           // 262\n      }                                                                                                                // 263\n    }, function() {                                                                                                    // 264\n      return Spacebars.attrMustache(view.lookup(\"atts\"));                                                              // 265\n    })), \"\\n      \", Blaze.View(function() {                                                                           // 266\n      return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                        // 267\n        name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                  // 268\n      }));                                                                                                             // 269\n    }), \"\\n    \"), \"\\n  \"), \"\\n  \" ];                                                                                  // 270\n  });                                                                                                                  // 271\n}));                                                                                                                   // 272\n                                                                                                                       // 273\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 8030\n}).call(this);                                                       // 8031\n                                                                     // 8032\n                                                                     // 8033\n                                                                     // 8034\n                                                                     // 8035\n                                                                     // 8036\n                                                                     // 8037\n(function () {                                                       // 8038\n                                                                     // 8039\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3-horizontal/bootstrap3-horizontal.js                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nfunction findAtts() {                                                                                                  // 1\n  var c, n = 0;                                                                                                        // 2\n  do {                                                                                                                 // 3\n    c = Template.parentData(n++);                                                                                      // 4\n  } while (c && !c.atts);                                                                                              // 5\n  return c && c.atts;                                                                                                  // 6\n}                                                                                                                      // 7\n                                                                                                                       // 8\nTemplate['quickForm_bootstrap3-horizontal'].helpers({                                                                  // 9\n  inputClass: function () {                                                                                            // 10\n    var atts = findAtts();                                                                                             // 11\n    if (atts) {                                                                                                        // 12\n      return atts[\"input-col-class\"];                                                                                  // 13\n    }                                                                                                                  // 14\n  },                                                                                                                   // 15\n  labelClass: function () {                                                                                            // 16\n    var atts = findAtts();                                                                                             // 17\n    if (atts) {                                                                                                        // 18\n      return atts[\"label-class\"];                                                                                      // 19\n    }                                                                                                                  // 20\n  },                                                                                                                   // 21\n  submitButtonAtts: function () {                                                                                      // 22\n    var qfAtts = this.atts;                                                                                            // 23\n    var atts = {};                                                                                                     // 24\n    if (typeof qfAtts.buttonClasses === \"string\") {                                                                    // 25\n      atts['class'] = qfAtts.buttonClasses;                                                                            // 26\n    } else {                                                                                                           // 27\n      atts['class'] = 'btn btn-primary';                                                                               // 28\n    }                                                                                                                  // 29\n    return atts;                                                                                                       // 30\n  },                                                                                                                   // 31\n  qfAutoFormContext: function () {                                                                                     // 32\n    var ctx = _.clone(this.qfAutoFormContext || {});                                                                   // 33\n    ctx = AutoForm.Utility.addClass(ctx, \"form-horizontal\");                                                           // 34\n    if (ctx[\"input-col-class\"])                                                                                        // 35\n      delete ctx[\"input-col-class\"];                                                                                   // 36\n    if (ctx[\"label-class\"])                                                                                            // 37\n      delete ctx[\"label-class\"];                                                                                       // 38\n    return ctx;                                                                                                        // 39\n  }                                                                                                                    // 40\n});                                                                                                                    // 41\n                                                                                                                       // 42\nTemplate[\"afFormGroup_bootstrap3-horizontal\"].helpers({                                                                // 43\n  afFieldInputAtts: function () {                                                                                      // 44\n    var atts = _.clone(this.afFieldInputAtts || {});                                                                   // 45\n    if ('input-col-class' in atts) {                                                                                   // 46\n      delete atts['input-col-class'];                                                                                  // 47\n    }                                                                                                                  // 48\n    // We have a special template for check boxes, but otherwise we                                                    // 49\n    // want to use the same as those defined for bootstrap3 template.                                                  // 50\n    if (AutoForm.getInputType(this.afFieldInputAtts) === \"boolean-checkbox\") {                                         // 51\n      atts.template = \"bootstrap3-horizontal\";                                                                         // 52\n    } else {                                                                                                           // 53\n      atts.template = \"bootstrap3\";                                                                                    // 54\n    }                                                                                                                  // 55\n    return atts;                                                                                                       // 56\n  },                                                                                                                   // 57\n  afFieldLabelAtts: function () {                                                                                      // 58\n    var atts = _.clone(this.afFieldLabelAtts || {});                                                                   // 59\n    // Add bootstrap class                                                                                             // 60\n    atts = AutoForm.Utility.addClass(atts, \"control-label\");                                                           // 61\n    return atts;                                                                                                       // 62\n  },                                                                                                                   // 63\n  rightColumnClass: function () {                                                                                      // 64\n    var atts = this.afFieldInputAtts || {};                                                                            // 65\n    return atts['input-col-class'] || \"\";                                                                              // 66\n  },                                                                                                                   // 67\n  skipLabel: function () {                                                                                             // 68\n    var self = this;                                                                                                   // 69\n                                                                                                                       // 70\n    var type = AutoForm.getInputType(self.afFieldInputAtts);                                                           // 71\n    return (self.skipLabel || (type === \"boolean-checkbox\" && !self.afFieldInputAtts.leftLabel));                      // 72\n  }                                                                                                                    // 73\n});                                                                                                                    // 74\n                                                                                                                       // 75\nTemplate[\"afObjectField_bootstrap3-horizontal\"].helpers({                                                              // 76\n  rightColumnClass: function () {                                                                                      // 77\n    var atts = this.atts || {};                                                                                        // 78\n    return atts['input-col-class'] || \"\";                                                                              // 79\n  },                                                                                                                   // 80\n  afFieldLabelAtts: function () {                                                                                      // 81\n    // Use only atts beginning with label-                                                                             // 82\n    var labelAtts = {};                                                                                                // 83\n    _.each(this.atts, function (val, key) {                                                                            // 84\n      if (key.indexOf(\"label-\") === 0) {                                                                               // 85\n        labelAtts[key.substring(6)] = val;                                                                             // 86\n      }                                                                                                                // 87\n    });                                                                                                                // 88\n    // Add bootstrap class                                                                                             // 89\n    labelAtts = AutoForm.Utility.addClass(labelAtts, \"control-label\");                                                 // 90\n    return labelAtts;                                                                                                  // 91\n  }                                                                                                                    // 92\n});                                                                                                                    // 93\n                                                                                                                       // 94\nTemplate[\"afArrayField_bootstrap3-horizontal\"].helpers({                                                               // 95\n  rightColumnClass: function () {                                                                                      // 96\n    var atts = this.atts || {};                                                                                        // 97\n    return atts['input-col-class'] || \"\";                                                                              // 98\n  },                                                                                                                   // 99\n  afFieldLabelAtts: function () {                                                                                      // 100\n    // Use only atts beginning with label-                                                                             // 101\n    var labelAtts = {};                                                                                                // 102\n    _.each(this.atts, function (val, key) {                                                                            // 103\n      if (key.indexOf(\"label-\") === 0) {                                                                               // 104\n        labelAtts[key.substring(6)] = val;                                                                             // 105\n      }                                                                                                                // 106\n    });                                                                                                                // 107\n    // Add bootstrap class                                                                                             // 108\n    labelAtts = AutoForm.Utility.addClass(labelAtts, \"control-label\");                                                 // 109\n    return labelAtts;                                                                                                  // 110\n  }                                                                                                                    // 111\n});                                                                                                                    // 112\n                                                                                                                       // 113\nTemplate[\"afCheckbox_bootstrap3-horizontal\"].helpers({                                                                 // 114\n  attsPlusSpecialClass: function () {                                                                                  // 115\n    var atts = _.clone(this.atts);                                                                                     // 116\n    atts = AutoForm.Utility.addClass(atts, \"autoform-checkbox-margin-fix\");                                            // 117\n    return atts;                                                                                                       // 118\n  },                                                                                                                   // 119\n  useLeftLabel: function () {                                                                                          // 120\n    return this.atts.leftLabel;                                                                                        // 121\n  }                                                                                                                    // 122\n});                                                                                                                    // 123\n                                                                                                                       // 124\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 8171\n}).call(this);                                                       // 8172\n                                                                     // 8173\n                                                                     // 8174\n                                                                     // 8175\n                                                                     // 8176\n                                                                     // 8177\n                                                                     // 8178\n(function () {                                                       // 8179\n                                                                     // 8180\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3-inline/template.bootstrap3-inline.js                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"quickForm_bootstrap3-inline\");                                                                   // 2\nTemplate[\"quickForm_bootstrap3-inline\"] = new Template(\"Template.quickForm_bootstrap3-inline\", (function() {           // 3\n  var view = this;                                                                                                     // 4\n  return Blaze._TemplateWith(function() {                                                                              // 5\n    return Spacebars.call(view.lookup(\"qfAutoFormContext\"));                                                           // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.include(view.lookupTemplate(\"autoForm\"), function() {                                             // 8\n      return [ \"\\n    \", Blaze._TemplateWith(function() {                                                              // 9\n        return {                                                                                                       // 10\n          \"label-class\": Spacebars.call(view.lookup(\"labelClass\"))                                                     // 11\n        };                                                                                                             // 12\n      }, function() {                                                                                                  // 13\n        return Spacebars.include(view.lookupTemplate(\"afQuickFields\"));                                                // 14\n      }), \"\\n    \", Blaze.If(function() {                                                                              // 15\n        return Spacebars.call(view.lookup(\"qfShouldRenderButton\"));                                                    // 16\n      }, function() {                                                                                                  // 17\n        return [ \"\\n    \", HTML.BUTTON(HTML.Attrs({                                                                    // 18\n          type: \"submit\"                                                                                               // 19\n        }, function() {                                                                                                // 20\n          return Spacebars.attrMustache(view.lookup(\"submitButtonAtts\"));                                              // 21\n        }), \"\\n    \", Spacebars.With(function() {                                                                      // 22\n          return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"atts\", \"buttonContent\"));                            // 23\n        }, function() {                                                                                                // 24\n          return [ \"\\n    \", Blaze.View(function() {                                                                   // 25\n            return Spacebars.mustache(view.lookup(\".\"));                                                               // 26\n          }), \"\\n    \" ];                                                                                              // 27\n        }, function() {                                                                                                // 28\n          return \"\\n    Submit\\n    \";                                                                                 // 29\n        }), \"\\n    \"), \"\\n    \" ];                                                                                     // 30\n      }), \"\\n  \" ];                                                                                                    // 31\n    });                                                                                                                // 32\n  });                                                                                                                  // 33\n}));                                                                                                                   // 34\n                                                                                                                       // 35\nTemplate.__checkName(\"afFormGroup_bootstrap3-inline\");                                                                 // 36\nTemplate[\"afFormGroup_bootstrap3-inline\"] = new Template(\"Template.afFormGroup_bootstrap3-inline\", (function() {       // 37\n  var view = this;                                                                                                     // 38\n  return HTML.DIV({                                                                                                    // 39\n    \"class\": function() {                                                                                              // 40\n      return [ \"form-group \", Blaze.If(function() {                                                                    // 41\n        return Spacebars.dataMustache(view.lookup(\"afFieldIsInvalid\"), Spacebars.kw({                                  // 42\n          name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                        // 43\n        }));                                                                                                           // 44\n      }, function() {                                                                                                  // 45\n        return \"has-error\";                                                                                            // 46\n      }) ];                                                                                                            // 47\n    }                                                                                                                  // 48\n  }, \"\\n    \", Blaze.Unless(function() {                                                                               // 49\n    return Spacebars.call(view.lookup(\"skipLabel\"));                                                                   // 50\n  }, function() {                                                                                                      // 51\n    return [ \"\\n    \", HTML.LABEL(HTML.Attrs(function() {                                                              // 52\n      return Spacebars.attrMustache(view.lookup(\"afFieldLabelAtts\"));                                                  // 53\n    }), Blaze.If(function() {                                                                                          // 54\n      return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"labelText\"));                                             // 55\n    }, function() {                                                                                                    // 56\n      return Blaze.View(function() {                                                                                   // 57\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"labelText\"));                                       // 58\n      });                                                                                                              // 59\n    }, function() {                                                                                                    // 60\n      return Blaze.View(function() {                                                                                   // 61\n        return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                      // 62\n          name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                        // 63\n        }));                                                                                                           // 64\n      });                                                                                                              // 65\n    })), \"\\n    \" ];                                                                                                   // 66\n  }), \"\\n    \", Blaze._TemplateWith(function() {                                                                       // 67\n    return Spacebars.call(view.lookup(\"afFieldInputAtts\"));                                                            // 68\n  }, function() {                                                                                                      // 69\n    return Spacebars.include(view.lookupTemplate(\"afFieldInput\"));                                                     // 70\n  }), \"\\n    \", HTML.SPAN({                                                                                            // 71\n    \"class\": \"help-block\"                                                                                              // 72\n  }, Blaze.View(function() {                                                                                           // 73\n    return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"afFieldMessage\"), Spacebars.kw({                          // 74\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                            // 75\n    })));                                                                                                              // 76\n  })), \"\\n  \");                                                                                                        // 77\n}));                                                                                                                   // 78\n                                                                                                                       // 79\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 8267\n}).call(this);                                                       // 8268\n                                                                     // 8269\n                                                                     // 8270\n                                                                     // 8271\n                                                                     // 8272\n                                                                     // 8273\n                                                                     // 8274\n(function () {                                                       // 8275\n                                                                     // 8276\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3-inline/bootstrap3-inline.js                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nfunction findAtts() {                                                                                                  // 1\n  var c, n = 0;                                                                                                        // 2\n  do {                                                                                                                 // 3\n    c = Template.parentData(n++);                                                                                      // 4\n  } while (c && !c.atts);                                                                                              // 5\n  return c && c.atts;                                                                                                  // 6\n}                                                                                                                      // 7\n                                                                                                                       // 8\nTemplate['quickForm_bootstrap3-inline'].helpers({                                                                      // 9\n  labelClass: function () {                                                                                            // 10\n    return this.atts[\"label-class\"];                                                                                   // 11\n  },                                                                                                                   // 12\n  submitButtonAtts: function () {                                                                                      // 13\n    var qfAtts = this.atts;                                                                                            // 14\n    var atts = {};                                                                                                     // 15\n    if (typeof qfAtts.buttonClasses === \"string\") {                                                                    // 16\n      atts['class'] = qfAtts.buttonClasses;                                                                            // 17\n    } else {                                                                                                           // 18\n      atts['class'] = 'btn btn-primary autoform-inline-align';                                                         // 19\n    }                                                                                                                  // 20\n    return atts;                                                                                                       // 21\n  },                                                                                                                   // 22\n  qfAutoFormContext: function () {                                                                                     // 23\n    var ctx = _.clone(this.qfAutoFormContext || {});                                                                   // 24\n    ctx = AutoForm.Utility.addClass(ctx, \"form-inline\");                                                               // 25\n    if (ctx[\"label-class\"])                                                                                            // 26\n      delete ctx[\"label-class\"];                                                                                       // 27\n    return ctx;                                                                                                        // 28\n  }                                                                                                                    // 29\n});                                                                                                                    // 30\n                                                                                                                       // 31\nTemplate[\"afFormGroup_bootstrap3-inline\"].helpers({                                                                    // 32\n  afFieldInputAtts: function () {                                                                                      // 33\n    var atts = _.clone(this.afFieldInputAtts || {});                                                                   // 34\n    // Use the same templates as those defined for bootstrap3 template.                                                // 35\n    atts.template = \"bootstrap3\";                                                                                      // 36\n    return atts;                                                                                                       // 37\n  }                                                                                                                    // 38\n});                                                                                                                    // 39\n                                                                                                                       // 40\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 8324\n}).call(this);                                                       // 8325\n                                                                     // 8326\n                                                                     // 8327\n                                                                     // 8328\n                                                                     // 8329\n                                                                     // 8330\n                                                                     // 8331\n(function () {                                                       // 8332\n                                                                     // 8333\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/plain/template.plain.js                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"quickForm_plain\");                                                                               // 2\nTemplate[\"quickForm_plain\"] = new Template(\"Template.quickForm_plain\", (function() {                                   // 3\n  var view = this;                                                                                                     // 4\n  return Blaze._TemplateWith(function() {                                                                              // 5\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"qfAutoFormContext\"));                                       // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.include(view.lookupTemplate(\"autoForm\"), function() {                                             // 8\n      return [ \"\\n    \", Spacebars.include(view.lookupTemplate(\"afQuickFields\")), \"\\n    \", Blaze.If(function() {      // 9\n        return Spacebars.call(view.lookup(\"qfShouldRenderButton\"));                                                    // 10\n      }, function() {                                                                                                  // 11\n        return [ \"\\n    \", HTML.DIV(\"\\n      \", HTML.BUTTON(HTML.Attrs({                                               // 12\n          type: \"submit\"                                                                                               // 13\n        }, function() {                                                                                                // 14\n          return Spacebars.attrMustache(view.lookup(\"submitButtonAtts\"));                                              // 15\n        }), \"\\n      \", Spacebars.With(function() {                                                                    // 16\n          return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"atts\", \"buttonContent\"));                            // 17\n        }, function() {                                                                                                // 18\n          return [ \"\\n      \", Blaze.View(function() {                                                                 // 19\n            return Spacebars.mustache(view.lookup(\".\"));                                                               // 20\n          }), \"\\n      \" ];                                                                                            // 21\n        }, function() {                                                                                                // 22\n          return \"\\n      Submit\\n      \";                                                                             // 23\n        }), \"\\n      \"), \"\\n    \"), \"\\n    \" ];                                                                        // 24\n      }), \"\\n  \" ];                                                                                                    // 25\n    });                                                                                                                // 26\n  });                                                                                                                  // 27\n}));                                                                                                                   // 28\n                                                                                                                       // 29\nTemplate.__checkName(\"afFormGroup_plain\");                                                                             // 30\nTemplate[\"afFormGroup_plain\"] = new Template(\"Template.afFormGroup_plain\", (function() {                               // 31\n  var view = this;                                                                                                     // 32\n  return HTML.DIV({                                                                                                    // 33\n    \"class\": function() {                                                                                              // 34\n      return Blaze.If(function() {                                                                                     // 35\n        return Spacebars.dataMustache(view.lookup(\"afFieldIsInvalid\"), Spacebars.kw({                                  // 36\n          name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                        // 37\n        }));                                                                                                           // 38\n      }, function() {                                                                                                  // 39\n        return \"has-error\";                                                                                            // 40\n      });                                                                                                              // 41\n    }                                                                                                                  // 42\n  }, \"\\n    \", Blaze.Unless(function() {                                                                               // 43\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"skipLabel\"));                                               // 44\n  }, function() {                                                                                                      // 45\n    return [ \"\\n    \", HTML.LABEL(HTML.Attrs(function() {                                                              // 46\n      return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"afFieldLabelAtts\"));                              // 47\n    }), Blaze.If(function() {                                                                                          // 48\n      return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"labelText\"));                                             // 49\n    }, function() {                                                                                                    // 50\n      return Blaze.View(function() {                                                                                   // 51\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"labelText\"));                                       // 52\n      });                                                                                                              // 53\n    }, function() {                                                                                                    // 54\n      return Blaze.View(function() {                                                                                   // 55\n        return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                      // 56\n          name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                        // 57\n        }));                                                                                                           // 58\n      });                                                                                                              // 59\n    })), \"\\n    \" ];                                                                                                   // 60\n  }), \"\\n    \", Blaze._TemplateWith(function() {                                                                       // 61\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"afFieldInputAtts\"));                                        // 62\n  }, function() {                                                                                                      // 63\n    return Spacebars.include(view.lookupTemplate(\"afFieldInput\"));                                                     // 64\n  }), \"\\n    \", HTML.SPAN(Blaze.View(function() {                                                                      // 65\n    return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"afFieldMessage\"), Spacebars.kw({                          // 66\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                            // 67\n    })));                                                                                                              // 68\n  })), \"\\n  \");                                                                                                        // 69\n}));                                                                                                                   // 70\n                                                                                                                       // 71\nTemplate.__checkName(\"afObjectField_plain\");                                                                           // 72\nTemplate[\"afObjectField_plain\"] = new Template(\"Template.afObjectField_plain\", (function() {                           // 73\n  var view = this;                                                                                                     // 74\n  return HTML.FIELDSET(\"\\n    \", Spacebars.With(function() {                                                           // 75\n    return Spacebars.dataMustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                      // 76\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                            // 77\n    }));                                                                                                               // 78\n  }, function() {                                                                                                      // 79\n    return [ \"\\n    \", HTML.LEGEND(Blaze.View(function() {                                                             // 80\n      return Spacebars.mustache(view.lookup(\".\"));                                                                     // 81\n    })), \"\\n    \" ];                                                                                                   // 82\n  }), \"\\n    \", Blaze._TemplateWith(function() {                                                                       // 83\n    return {                                                                                                           // 84\n      name: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\"))                                            // 85\n    };                                                                                                                 // 86\n  }, function() {                                                                                                      // 87\n    return Spacebars.include(view.lookupTemplate(\"afQuickFields\"));                                                    // 88\n  }), \"\\n  \");                                                                                                         // 89\n}));                                                                                                                   // 90\n                                                                                                                       // 91\nTemplate.__checkName(\"afArrayField_plain\");                                                                            // 92\nTemplate[\"afArrayField_plain\"] = new Template(\"Template.afArrayField_plain\", (function() {                             // 93\n  var view = this;                                                                                                     // 94\n  return HTML.FIELDSET(\"\\n    \", HTML.LEGEND(Blaze.View(function() {                                                   // 95\n    return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                          // 96\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                            // 97\n    }));                                                                                                               // 98\n  })), \"\\n    \", Blaze.If(function() {                                                                                 // 99\n    return Spacebars.dataMustache(view.lookup(\"afFieldIsInvalid\"), Spacebars.kw({                                      // 100\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                            // 101\n    }));                                                                                                               // 102\n  }, function() {                                                                                                      // 103\n    return [ \"\\n    \", HTML.DIV({                                                                                      // 104\n      \"class\": \"autoform-array-field-error\"                                                                            // 105\n    }, \"\\n      \", Blaze.View(function() {                                                                             // 106\n      return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"afFieldMessage\"), Spacebars.kw({                        // 107\n        name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                          // 108\n      })));                                                                                                            // 109\n    }), \"\\n    \"), \"\\n    \" ];                                                                                         // 110\n  }), \"\\n    \", Blaze._TemplateWith(function() {                                                                       // 111\n    return {                                                                                                           // 112\n      name: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")),                                           // 113\n      minCount: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"minCount\")),                                   // 114\n      maxCount: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"maxCount\"))                                    // 115\n    };                                                                                                                 // 116\n  }, function() {                                                                                                      // 117\n    return Spacebars.include(view.lookupTemplate(\"afEachArrayItem\"), function() {                                      // 118\n      return [ \"\\n    \", HTML.DIV({                                                                                    // 119\n        \"class\": \"autoform-array-item\"                                                                                 // 120\n      }, \"\\n      \", Blaze._TemplateWith(function() {                                                                  // 121\n        return {                                                                                                       // 122\n          name: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"name\")),                                               // 123\n          label: Spacebars.call(false)                                                                                 // 124\n        };                                                                                                             // 125\n      }, function() {                                                                                                  // 126\n        return Spacebars.include(view.lookupTemplate(\"afQuickField\"));                                                 // 127\n      }), \"\\n      \", Blaze.If(function() {                                                                            // 128\n        return Spacebars.dataMustache(view.lookup(\"afArrayFieldHasMoreThanMinimum\"), Spacebars.kw({                    // 129\n          name: Spacebars.dot(view.lookup(\"..\"), \"atts\", \"name\"),                                                      // 130\n          minCount: Spacebars.dot(view.lookup(\"..\"), \"atts\", \"minCount\"),                                              // 131\n          maxCount: Spacebars.dot(view.lookup(\"..\"), \"atts\", \"maxCount\")                                               // 132\n        }));                                                                                                           // 133\n      }, function() {                                                                                                  // 134\n        return [ \"\\n      \", HTML.BUTTON({                                                                             // 135\n          type: \"button\",                                                                                              // 136\n          \"class\": \"autoform-remove-item\"                                                                              // 137\n        }, \"Remove\"), \"\\n      \" ];                                                                                    // 138\n      }), \"\\n    \"), \"\\n    \" ];                                                                                       // 139\n    });                                                                                                                // 140\n  }), \"\\n    \", Blaze.If(function() {                                                                                  // 141\n    return Spacebars.dataMustache(view.lookup(\"afArrayFieldHasLessThanMaximum\"), Spacebars.kw({                        // 142\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\"),                                                           // 143\n      minCount: Spacebars.dot(view.lookup(\".\"), \"atts\", \"minCount\"),                                                   // 144\n      maxCount: Spacebars.dot(view.lookup(\".\"), \"atts\", \"maxCount\")                                                    // 145\n    }));                                                                                                               // 146\n  }, function() {                                                                                                      // 147\n    return [ \"\\n    \", HTML.DIV({                                                                                      // 148\n      style: \"margin-top: 20px;\"                                                                                       // 149\n    }, \"\\n      \", HTML.BUTTON({                                                                                       // 150\n      type: \"button\",                                                                                                  // 151\n      \"class\": \"autoform-add-item\",                                                                                    // 152\n      \"data-autoform-field\": function() {                                                                              // 153\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\"));                                    // 154\n      },                                                                                                               // 155\n      \"data-autoform-mincount\": function() {                                                                           // 156\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"atts\", \"minCount\"));                                // 157\n      },                                                                                                               // 158\n      \"data-autoform-maxcount\": function() {                                                                           // 159\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"atts\", \"maxCount\"));                                // 160\n      }                                                                                                                // 161\n    }, \"Add\"), \"\\n    \"), \"\\n    \" ];                                                                                  // 162\n  }), \"\\n  \");                                                                                                         // 163\n}));                                                                                                                   // 164\n                                                                                                                       // 165\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 8506\n}).call(this);                                                       // 8507\n                                                                     // 8508\n                                                                     // 8509\n                                                                     // 8510\n                                                                     // 8511\n                                                                     // 8512\n                                                                     // 8513\n(function () {                                                       // 8514\n                                                                     // 8515\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/plain/plain.js                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*                                                                                                                     // 1\n * Template helpers for \"plain\" template                                                                               // 2\n */                                                                                                                    // 3\n                                                                                                                       // 4\nTemplate['quickForm_plain'].helpers({                                                                                  // 5\n  submitButtonAtts: function plQuickFormSubmitButtonAtts() {                                                           // 6\n    var qfAtts = this.atts;                                                                                            // 7\n    var atts = {};                                                                                                     // 8\n    if (typeof qfAtts.buttonClasses === \"string\") {                                                                    // 9\n      atts['class'] = qfAtts.buttonClasses;                                                                            // 10\n    }                                                                                                                  // 11\n    return atts;                                                                                                       // 12\n  }                                                                                                                    // 13\n});                                                                                                                    // 14\n                                                                                                                       // 15\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 8538\n}).call(this);                                                       // 8539\n                                                                     // 8540\n                                                                     // 8541\n                                                                     // 8542\n                                                                     // 8543\n                                                                     // 8544\n                                                                     // 8545\n(function () {                                                       // 8546\n                                                                     // 8547\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/plain-fieldset/template.plain-fieldset.js                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"quickForm_plain-fieldset\");                                                                      // 2\nTemplate[\"quickForm_plain-fieldset\"] = new Template(\"Template.quickForm_plain-fieldset\", (function() {                 // 3\n  var view = this;                                                                                                     // 4\n  return Blaze._TemplateWith(function() {                                                                              // 5\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"qfAutoFormContext\"));                                       // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.include(view.lookupTemplate(\"autoForm\"), function() {                                             // 8\n      return [ \"\\n    \", HTML.FIELDSET(\"\\n      \", Spacebars.With(function() {                                         // 9\n        return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"atts\", \"legend\"));                                     // 10\n      }, function() {                                                                                                  // 11\n        return [ \"\\n      \", HTML.LEGEND(Blaze.View(function() {                                                       // 12\n          return Spacebars.mustache(view.lookup(\".\"));                                                                 // 13\n        })), \"\\n      \" ];                                                                                             // 14\n      }), \"\\n      \", Spacebars.include(view.lookupTemplate(\"afQuickFields\")), \"\\n    \"), \"\\n    \", Blaze.If(function() {\n        return Spacebars.call(view.lookup(\"qfShouldRenderButton\"));                                                    // 16\n      }, function() {                                                                                                  // 17\n        return [ \"\\n    \", HTML.DIV(\"\\n      \", HTML.BUTTON(HTML.Attrs({                                               // 18\n          type: \"submit\"                                                                                               // 19\n        }, function() {                                                                                                // 20\n          return Spacebars.attrMustache(view.lookup(\"submitButtonAtts\"));                                              // 21\n        }), \"\\n        \", Spacebars.With(function() {                                                                  // 22\n          return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"atts\", \"buttonContent\"));                            // 23\n        }, function() {                                                                                                // 24\n          return [ \"\\n        \", Blaze.View(function() {                                                               // 25\n            return Spacebars.mustache(view.lookup(\".\"));                                                               // 26\n          }), \"\\n        \" ];                                                                                          // 27\n        }, function() {                                                                                                // 28\n          return \"\\n        Submit\\n        \";                                                                         // 29\n        }), \"\\n      \"), \"\\n    \"), \"\\n    \" ];                                                                        // 30\n      }), \"\\n  \" ];                                                                                                    // 31\n    });                                                                                                                // 32\n  });                                                                                                                  // 33\n}));                                                                                                                   // 34\n                                                                                                                       // 35\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 8590\n}).call(this);                                                       // 8591\n                                                                     // 8592\n                                                                     // 8593\n                                                                     // 8594\n                                                                     // 8595\n                                                                     // 8596\n                                                                     // 8597\n(function () {                                                       // 8598\n                                                                     // 8599\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/plain-fieldset/plain-fieldset.js                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate['quickForm_plain-fieldset'].helpers({                                                                         // 1\n  submitButtonAtts: function plfsQuickFormSubmitButtonAtts() {                                                         // 2\n    var qfAtts = this.atts;                                                                                            // 3\n    var atts = {};                                                                                                     // 4\n    if (typeof qfAtts.buttonClasses === \"string\") {                                                                    // 5\n      atts['class'] = qfAtts.buttonClasses;                                                                            // 6\n    }                                                                                                                  // 7\n    return atts;                                                                                                       // 8\n  }                                                                                                                    // 9\n});                                                                                                                    // 10\n                                                                                                                       // 11\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 8618\n}).call(this);                                                       // 8619\n                                                                     // 8620\n///////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['aldeed:autoform'] = {\n  AutoForm: AutoForm,\n  Utility: Utility\n};\n\n})();\n","servePath":"/packages/aldeed_autoform.js","sourceMap":{"version":3,"sources":["/packages/aldeed_autoform/packages/aldeed_autoform.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4E","file":"/packages/aldeed_autoform.js","sourcesContent":["(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/autoform-common.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// This is the only file that is run on the server, too                                                                // 1\n                                                                                                                       // 2\n// Extend the schema options allowed by SimpleSchema                                                                   // 3\nSimpleSchema.extendOptions({                                                                                           // 4\n  autoform: Match.Optional(Object)                                                                                     // 5\n});                                                                                                                    // 6\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/utility.js                                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nUtility = {                                                                                                            // 1\n  /**                                                                                                                  // 2\n   * @method Utility.cleanNulls                                                                                        // 3\n   * @private                                                                                                          // 4\n   * @param {Object} doc - Source object                                                                               // 5\n   * @returns {Object}                                                                                                 // 6\n   *                                                                                                                   // 7\n   * Returns an object in which all properties with null, undefined, or empty                                          // 8\n   * string values have been removed, recursively.                                                                     // 9\n   */                                                                                                                  // 10\n  cleanNulls: function cleanNulls(doc, isArray, keepEmptyStrings) {                                                    // 11\n    var newDoc = isArray ? [] : {};                                                                                    // 12\n    _.each(doc, function(val, key) {                                                                                   // 13\n      if (!_.isArray(val) && isBasicObject(val)) {                                                                     // 14\n        val = cleanNulls(val, false, keepEmptyStrings); //recurse into plain objects                                   // 15\n        if (!_.isEmpty(val)) {                                                                                         // 16\n          newDoc[key] = val;                                                                                           // 17\n        }                                                                                                              // 18\n      } else if (_.isArray(val)) {                                                                                     // 19\n        val = cleanNulls(val, true, keepEmptyStrings); //recurse into non-typed arrays                                 // 20\n        if (!_.isEmpty(val)) {                                                                                         // 21\n          newDoc[key] = val;                                                                                           // 22\n        }                                                                                                              // 23\n      } else if (!Utility.isNullUndefinedOrEmptyString(val)) {                                                         // 24\n        newDoc[key] = val;                                                                                             // 25\n      } else if (keepEmptyStrings && typeof val === \"string\" && val.length === 0) {                                    // 26\n        newDoc[key] = val;                                                                                             // 27\n      }                                                                                                                // 28\n    });                                                                                                                // 29\n    return newDoc;                                                                                                     // 30\n  },                                                                                                                   // 31\n  /**                                                                                                                  // 32\n   * @method Utility.reportNulls                                                                                       // 33\n   * @private                                                                                                          // 34\n   * @param {Object} flatDoc - An object with no properties that are also objects.                                     // 35\n   * @returns {Object} An object in which the keys represent the keys in the                                           // 36\n   * original object that were null, undefined, or empty strings, and the value                                        // 37\n   * of each key is \"\".                                                                                                // 38\n   */                                                                                                                  // 39\n  reportNulls: function reportNulls(flatDoc, keepEmptyStrings) {                                                       // 40\n    var nulls = {};                                                                                                    // 41\n    // Loop through the flat doc                                                                                       // 42\n    _.each(flatDoc, function(val, key) {                                                                               // 43\n      // If value is undefined, null, or an empty string, report this as null so it will be unset                      // 44\n      if (val === null) {                                                                                              // 45\n        nulls[key] = \"\";                                                                                               // 46\n      } else if (val === void 0) {                                                                                     // 47\n        nulls[key] = \"\";                                                                                               // 48\n      } else if (!keepEmptyStrings && typeof val === \"string\" && val.length === 0) {                                   // 49\n        nulls[key] = \"\";                                                                                               // 50\n      }                                                                                                                // 51\n      // If value is an array in which all the values recursively are undefined, null, or an empty string, report this as null so it will be unset\n      else if (_.isArray(val) && Utility.cleanNulls(val, true, keepEmptyStrings).length === 0) {                       // 53\n        nulls[key] = \"\";                                                                                               // 54\n      }                                                                                                                // 55\n    });                                                                                                                // 56\n    return nulls;                                                                                                      // 57\n  },                                                                                                                   // 58\n  /**                                                                                                                  // 59\n   * @method Utility.docToModifier                                                                                     // 60\n   * @private                                                                                                          // 61\n   * @param {Object} doc - An object to be converted into a MongoDB modifier                                           // 62\n   * @returns {Object} A MongoDB modifier.                                                                             // 63\n   *                                                                                                                   // 64\n   * Converts an object into a modifier by flattening it, putting keys with                                            // 65\n   * null, undefined, and empty string values into `modifier.$unset`, and                                              // 66\n   * putting the rest of the keys into `modifier.$set`.                                                                // 67\n   */                                                                                                                  // 68\n  docToModifier: function docToModifier(doc, keepEmptyStrings) {                                                       // 69\n    var modifier = {};                                                                                                 // 70\n                                                                                                                       // 71\n    // Flatten doc                                                                                                     // 72\n    var mDoc = new MongoObject(doc);                                                                                   // 73\n    var flatDoc = mDoc.getFlatObject({keepArrays: true});                                                              // 74\n    mDoc = null;                                                                                                       // 75\n    // Get a list of null, undefined, and empty string values so we can unset them instead                             // 76\n    var nulls = Utility.reportNulls(flatDoc, keepEmptyStrings);                                                        // 77\n    flatDoc = Utility.cleanNulls(flatDoc, false, keepEmptyStrings);                                                    // 78\n                                                                                                                       // 79\n    if (!_.isEmpty(flatDoc)) {                                                                                         // 80\n      modifier.$set = flatDoc;                                                                                         // 81\n    }                                                                                                                  // 82\n    if (!_.isEmpty(nulls)) {                                                                                           // 83\n      modifier.$unset = nulls;                                                                                         // 84\n    }                                                                                                                  // 85\n    return modifier;                                                                                                   // 86\n  },                                                                                                                   // 87\n  /**                                                                                                                  // 88\n   * @method Utility.getSelectValues                                                                                   // 89\n   * @private                                                                                                          // 90\n   * @param {Element} select - DOM Element from which to get current values                                            // 91\n   * @returns {string[]}                                                                                               // 92\n   *                                                                                                                   // 93\n   * Gets a string array of all the selected values in a given `select` DOM element.                                   // 94\n   */                                                                                                                  // 95\n  getSelectValues: function getSelectValues(select) {                                                                  // 96\n    var result = [];                                                                                                   // 97\n    var options = select && select.options || [];                                                                      // 98\n    var opt;                                                                                                           // 99\n                                                                                                                       // 100\n    for (var i = 0, ln = options.length; i < ln; i++) {                                                                // 101\n      opt = options[i];                                                                                                // 102\n                                                                                                                       // 103\n      if (opt.selected) {                                                                                              // 104\n        result.push(opt.value || opt.text);                                                                            // 105\n      }                                                                                                                // 106\n    }                                                                                                                  // 107\n    return result;                                                                                                     // 108\n  },                                                                                                                   // 109\n  /**                                                                                                                  // 110\n   * @method Utility.lookup                                                                                            // 111\n   * @private                                                                                                          // 112\n   * @param {Any} obj                                                                                                  // 113\n   * @returns {Any}                                                                                                    // 114\n   *                                                                                                                   // 115\n   * If `obj` is a string, returns the value of the property with that                                                 // 116\n   * name on the `window` object. Otherwise returns `obj`.                                                             // 117\n   */                                                                                                                  // 118\n  lookup: function lookup(obj) {                                                                                       // 119\n    var ref = window, arr;                                                                                             // 120\n    if (typeof obj === \"string\") {                                                                                     // 121\n      arr = obj.split(\".\");                                                                                            // 122\n      while(arr.length && (ref = ref[arr.shift()]));                                                                   // 123\n      if (!ref) {                                                                                                      // 124\n        throw new Error(obj + \" is not in the window scope\");                                                          // 125\n      }                                                                                                                // 126\n      return ref;                                                                                                      // 127\n    }                                                                                                                  // 128\n    return obj;                                                                                                        // 129\n  },                                                                                                                   // 130\n  /**                                                                                                                  // 131\n   * @method Utility.getDefs                                                                                           // 132\n   * @private                                                                                                          // 133\n   * @param {SimpleSchema} ss                                                                                          // 134\n   * @param {String} name                                                                                              // 135\n   * @return {Object} Schema definitions object                                                                        // 136\n   *                                                                                                                   // 137\n   * Returns the schema definitions object from a SimpleSchema instance. Equivalent to calling                         // 138\n   * `ss.schema(name)` but handles throwing errors if `name` is not a string or is not a valid                         // 139\n   * field name for this SimpleSchema instance.                                                                        // 140\n   */                                                                                                                  // 141\n  getDefs: function getDefs(ss, name) {                                                                                // 142\n    if (typeof name !== \"string\") {                                                                                    // 143\n      throw new Error(\"Invalid field name: (not a string)\");                                                           // 144\n    }                                                                                                                  // 145\n                                                                                                                       // 146\n    var defs = ss.schema(name);                                                                                        // 147\n    if (!defs)                                                                                                         // 148\n      throw new Error(\"Invalid field name: \" + name);                                                                  // 149\n    return defs;                                                                                                       // 150\n  },                                                                                                                   // 151\n  /**                                                                                                                  // 152\n   * @method Utility.objAffectsKey                                                                                     // 153\n   * @private                                                                                                          // 154\n   * @param  {Object} obj                                                                                              // 155\n   * @param  {String} key                                                                                              // 156\n   * @return {Boolean}                                                                                                 // 157\n   * @todo should make this a static method in MongoObject                                                             // 158\n   */                                                                                                                  // 159\n  objAffectsKey: function objAffectsKey(obj, key) {                                                                    // 160\n    var mDoc = new MongoObject(obj);                                                                                   // 161\n    return mDoc.affectsKey(key);                                                                                       // 162\n  },                                                                                                                   // 163\n  /**                                                                                                                  // 164\n   * @method Utility.expandObj                                                                                         // 165\n   * @private                                                                                                          // 166\n   * @param  {Object} doc                                                                                              // 167\n   * @return {Object}                                                                                                  // 168\n   *                                                                                                                   // 169\n   * Takes a flat object and returns an expanded version of it.                                                        // 170\n   */                                                                                                                  // 171\n  expandObj: function expandObj(doc) {                                                                                 // 172\n    var newDoc = {}, subkeys, subkey, subkeylen, nextPiece, current;                                                   // 173\n    _.each(doc, function(val, key) {                                                                                   // 174\n      subkeys = key.split(\".\");                                                                                        // 175\n      subkeylen = subkeys.length;                                                                                      // 176\n      current = newDoc;                                                                                                // 177\n      for (var i = 0; i < subkeylen; i++) {                                                                            // 178\n        subkey = subkeys[i];                                                                                           // 179\n        if (typeof current[subkey] !== \"undefined\" && !_.isObject(current[subkey])) {                                  // 180\n          break; //already set for some reason; leave it alone                                                         // 181\n        }                                                                                                              // 182\n        if (i === subkeylen - 1) {                                                                                     // 183\n          //last iteration; time to set the value                                                                      // 184\n          current[subkey] = val;                                                                                       // 185\n        } else {                                                                                                       // 186\n          //see if the next piece is a number                                                                          // 187\n          nextPiece = subkeys[i + 1];                                                                                  // 188\n          nextPiece = parseInt(nextPiece, 10);                                                                         // 189\n          if (isNaN(nextPiece) && !_.isObject(current[subkey])) {                                                      // 190\n            current[subkey] = {};                                                                                      // 191\n          } else if (!isNaN(nextPiece) && !_.isArray(current[subkey])) {                                               // 192\n            current[subkey] = [];                                                                                      // 193\n          }                                                                                                            // 194\n        }                                                                                                              // 195\n        current = current[subkey];                                                                                     // 196\n      }                                                                                                                // 197\n    });                                                                                                                // 198\n    return newDoc;                                                                                                     // 199\n  },                                                                                                                   // 200\n  /**                                                                                                                  // 201\n   * @method Utility.compactArrays                                                                                     // 202\n   * @private                                                                                                          // 203\n   * @param  {Object} obj                                                                                              // 204\n   * @return {undefined}                                                                                               // 205\n   *                                                                                                                   // 206\n   * Edits the object by reference, compacting any arrays at any level recursively.                                    // 207\n   */                                                                                                                  // 208\n  compactArrays: function compactArrays(obj) {                                                                         // 209\n    if (_.isObject(obj)) {                                                                                             // 210\n      _.each(obj, function (val, key) {                                                                                // 211\n        if (_.isArray(val)) {                                                                                          // 212\n          obj[key] = _.without(val, void 0, null);                                                                     // 213\n          _.each(obj[key], function (arrayItem) {                                                                      // 214\n            compactArrays(arrayItem);                                                                                  // 215\n          });                                                                                                          // 216\n        } else if (!(val instanceof Date) && _.isObject(val)) {                                                        // 217\n          //recurse into objects                                                                                       // 218\n          compactArrays(val);                                                                                          // 219\n        }                                                                                                              // 220\n      });                                                                                                              // 221\n    }                                                                                                                  // 222\n  },                                                                                                                   // 223\n  /**                                                                                                                  // 224\n   * @method Utility.bubbleEmpty                                                                                       // 225\n   * @private                                                                                                          // 226\n   * @param  {Object} obj                                                                                              // 227\n   * @return {undefined}                                                                                               // 228\n   *                                                                                                                   // 229\n   * Edits the object by reference.                                                                                    // 230\n   */                                                                                                                  // 231\n  bubbleEmpty: function bubbleEmpty(obj, keepEmptyStrings) {                                                           // 232\n    if (_.isObject(obj)) {                                                                                             // 233\n      _.each(obj, function (val, key) {                                                                                // 234\n        if (_.isArray(val)) {                                                                                          // 235\n          _.each(val, function (arrayItem) {                                                                           // 236\n            bubbleEmpty(arrayItem);                                                                                    // 237\n          });                                                                                                          // 238\n        } else if (isBasicObject(val)) {                                                                               // 239\n          var allEmpty = _.all(val, function (prop) {                                                                  // 240\n            return (prop === void 0 || prop === null || (!keepEmptyStrings && typeof prop === \"string\" && prop.length === 0));\n          });                                                                                                          // 242\n          if (_.isEmpty(val) || allEmpty) {                                                                            // 243\n            obj[key] = null;                                                                                           // 244\n          } else {                                                                                                     // 245\n            //recurse into objects                                                                                     // 246\n            bubbleEmpty(val);                                                                                          // 247\n          }                                                                                                            // 248\n        }                                                                                                              // 249\n      });                                                                                                              // 250\n    }                                                                                                                  // 251\n  },                                                                                                                   // 252\n  /**                                                                                                                  // 253\n   * @method Utility.getSimpleSchemaFromContext                                                                        // 254\n   * @private                                                                                                          // 255\n   * @param  {Object} context                                                                                          // 256\n   * @return {SimpleSchema}                                                                                            // 257\n   *                                                                                                                   // 258\n   * Given a context object that may or may not have schema and collection properties,                                 // 259\n   * returns a SimpleSchema instance or throws an error if one cannot be obtained.                                     // 260\n   */                                                                                                                  // 261\n  getSimpleSchemaFromContext: function getSimpleSchemaFromContext(context, formId) {                                   // 262\n    // If schema attribute, use that                                                                                   // 263\n    var ss = Utility.lookup(context.schema);                                                                           // 264\n    if (ss) {                                                                                                          // 265\n      if (ss instanceof SimpleSchema) {                                                                                // 266\n        return ss;                                                                                                     // 267\n      } else {                                                                                                         // 268\n        throw new Error('AutoForm: schema attribute for form with id \"' + formId + '\" is not a SimpleSchema instance');\n      }                                                                                                                // 270\n    }                                                                                                                  // 271\n    // If no schema attribute, use the schema attached to the collection                                               // 272\n    var collection = Utility.lookup(context.collection);                                                               // 273\n    if (collection) {                                                                                                  // 274\n      if (typeof collection.simpleSchema === 'function') {                                                             // 275\n        return collection.simpleSchema();                                                                              // 276\n      } else {                                                                                                         // 277\n        throw new Error('AutoForm: collection attribute for form with id \"' + formId + '\" refers to a collection that does not have a schema, or is not a collection. You might have forgotten to attach a schema to the collection or you might need to add the collection2 package to your app.');\n      }                                                                                                                // 279\n    }                                                                                                                  // 280\n    // If we got this far, we have no schema so throw an error                                                         // 281\n    throw new Error('AutoForm: form with id \"' + formId + '\" needs either \"schema\" or \"collection\" attribute');        // 282\n  },                                                                                                                   // 283\n  /**                                                                                                                  // 284\n   * @method Utility.isNullUndefinedOrEmptyString                                                                      // 285\n   * @private                                                                                                          // 286\n   * @param  {Any} val                                                                                                 // 287\n   * @return {Boolean}                                                                                                 // 288\n   *                                                                                                                   // 289\n   * Returns `true` if the value is null, undefined, or an empty string                                                // 290\n   */                                                                                                                  // 291\n  isNullUndefinedOrEmptyString: function isNullUndefinedOrEmptyString(val) {                                           // 292\n    return (val === void 0 || val === null || (typeof val === \"string\" && val.length === 0));                          // 293\n  },                                                                                                                   // 294\n  /**                                                                                                                  // 295\n   * @method Utility.isValidDateString                                                                                 // 296\n   * @private                                                                                                          // 297\n   * @param  {String}  dateString                                                                                      // 298\n   * @return {Boolean}                                                                                                 // 299\n   *                                                                                                                   // 300\n   * Returns `true` if dateString is a \"valid date string\"                                                             // 301\n   */                                                                                                                  // 302\n  isValidDateString: function isValidDateString(dateString) {                                                          // 303\n    var m = moment(dateString, 'YYYY-MM-DD', true);                                                                    // 304\n    return m && m.isValid();                                                                                           // 305\n  },                                                                                                                   // 306\n  /**                                                                                                                  // 307\n   * @method Utility.isValidTimeString                                                                                 // 308\n   * @private                                                                                                          // 309\n   * @param  {String}  timeString                                                                                      // 310\n   * @return {Boolean}                                                                                                 // 311\n   *                                                                                                                   // 312\n   * Returns `true` if timeString is a \"valid time string\"                                                             // 313\n   */                                                                                                                  // 314\n  isValidTimeString: function isValidTimeString(timeString) {                                                          // 315\n    if (typeof timeString !== \"string\")                                                                                // 316\n      return false;                                                                                                    // 317\n                                                                                                                       // 318\n    //this reg ex actually allows a few invalid hours/minutes/seconds, but                                             // 319\n    //we can catch that when parsing                                                                                   // 320\n    var regEx = /^[0-2][0-9]:[0-5][0-9](:[0-5][0-9](\\.[0-9]{1,3})?)?$/;                                                // 321\n    return regEx.test(timeString);                                                                                     // 322\n  },                                                                                                                   // 323\n  /**                                                                                                                  // 324\n   * @method  Utility.dateToDateString                                                                                 // 325\n   * @private                                                                                                          // 326\n   * @param  {Date} date                                                                                               // 327\n   * @return {String}                                                                                                  // 328\n   *                                                                                                                   // 329\n   * Returns a \"valid date string\" representing the local date.                                                        // 330\n   */                                                                                                                  // 331\n  dateToDateString: function dateToDateString(date) {                                                                  // 332\n    var m = (date.getMonth() + 1);                                                                                     // 333\n    if (m < 10) {                                                                                                      // 334\n      m = \"0\" + m;                                                                                                     // 335\n    }                                                                                                                  // 336\n    var d = date.getDate();                                                                                            // 337\n    if (d < 10) {                                                                                                      // 338\n      d = \"0\" + d;                                                                                                     // 339\n    }                                                                                                                  // 340\n    return date.getFullYear() + '-' + m + '-' + d;                                                                     // 341\n  },                                                                                                                   // 342\n  /**                                                                                                                  // 343\n   * @method  Utility.dateToDateStringUTC                                                                              // 344\n   * @private                                                                                                          // 345\n   * @param  {Date} date                                                                                               // 346\n   * @return {String}                                                                                                  // 347\n   *                                                                                                                   // 348\n   * Returns a \"valid date string\" representing the date converted to the UTC time zone.                               // 349\n   */                                                                                                                  // 350\n  dateToDateStringUTC: function dateToDateStringUTC(date) {                                                            // 351\n    var m = (date.getUTCMonth() + 1);                                                                                  // 352\n    if (m < 10) {                                                                                                      // 353\n      m = \"0\" + m;                                                                                                     // 354\n    }                                                                                                                  // 355\n    var d = date.getUTCDate();                                                                                         // 356\n    if (d < 10) {                                                                                                      // 357\n      d = \"0\" + d;                                                                                                     // 358\n    }                                                                                                                  // 359\n    return date.getUTCFullYear() + '-' + m + '-' + d;                                                                  // 360\n  },                                                                                                                   // 361\n  /**                                                                                                                  // 362\n   * @method  Utility.dateToNormalizedForcedUtcGlobalDateAndTimeString                                                 // 363\n   * @private                                                                                                          // 364\n   * @param  {Date} date                                                                                               // 365\n   * @return {String}                                                                                                  // 366\n   *                                                                                                                   // 367\n   * Returns a \"valid normalized forced-UTC global date and time string\" representing the time                         // 368\n   * converted to the UTC time zone and expressed as the shortest possible string for the given                        // 369\n   * time (e.g. omitting the seconds component entirely if the given time is zero seconds past the minute).            // 370\n   *                                                                                                                   // 371\n   * http://www.whatwg.org/specs/web-apps/current-work/multipage/states-of-the-type-attribute.html#date-and-time-state-(type=datetime)\n   * http://www.whatwg.org/specs/web-apps/current-work/multipage/common-microsyntaxes.html#valid-normalized-forced-utc-global-date-and-time-string\n   */                                                                                                                  // 374\n  dateToNormalizedForcedUtcGlobalDateAndTimeString: function dateToNormalizedForcedUtcGlobalDateAndTimeString(date) {  // 375\n    return moment(date).utc().format(\"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]\");                                                  // 376\n  },                                                                                                                   // 377\n  /**                                                                                                                  // 378\n   * @method  Utility.isValidNormalizedForcedUtcGlobalDateAndTimeString                                                // 379\n   * @private                                                                                                          // 380\n   * @param  {String} dateString                                                                                       // 381\n   * @return {Boolean}                                                                                                 // 382\n   *                                                                                                                   // 383\n   * Returns true if dateString is a \"valid normalized forced-UTC global date and time string\"                         // 384\n   */                                                                                                                  // 385\n  isValidNormalizedForcedUtcGlobalDateAndTimeString: function isValidNormalizedForcedUtcGlobalDateAndTimeString(dateString) {\n    if (typeof dateString !== \"string\")                                                                                // 387\n      return false;                                                                                                    // 388\n                                                                                                                       // 389\n    var datePart = dateString.substring(0, 10);                                                                        // 390\n    var tPart = dateString.substring(10, 11);                                                                          // 391\n    var timePart = dateString.substring(11, dateString.length - 1);                                                    // 392\n    var zPart = dateString.substring(dateString.length - 1);                                                           // 393\n    return Utility.isValidDateString(datePart) && tPart === \"T\" && Utility.isValidTimeString(timePart) && zPart === \"Z\";\n  },                                                                                                                   // 395\n  /**                                                                                                                  // 396\n   * @method Utility.dateToNormalizedLocalDateAndTimeString                                                            // 397\n   * @private                                                                                                          // 398\n   * @param {Date} date The Date object                                                                                // 399\n   * @param {String} [timezoneId] A valid timezoneId that moment-timezone understands, e.g., \"America/Los_Angeles\"     // 400\n   * @return {String}                                                                                                  // 401\n   *                                                                                                                   // 402\n   * Returns a \"valid normalized local date and time string\".                                                          // 403\n   */                                                                                                                  // 404\n  dateToNormalizedLocalDateAndTimeString: function dateToNormalizedLocalDateAndTimeString(date, timezoneId) {          // 405\n    var m = moment(date);                                                                                              // 406\n    // by default, we assume local timezone; add moment-timezone to app and pass timezoneId                            // 407\n    // to use a different timezone                                                                                     // 408\n    if (typeof timezoneId === \"string\") {                                                                              // 409\n      if (typeof m.tz !== \"function\") {                                                                                // 410\n        throw new Error(\"If you specify a timezoneId, make sure that you've added a moment-timezone package to your app\");\n      }                                                                                                                // 412\n      m.tz(timezoneId);                                                                                                // 413\n    }                                                                                                                  // 414\n    return m.format(\"YYYY-MM-DD[T]HH:mm:ss.SSS\");                                                                      // 415\n  },                                                                                                                   // 416\n  /**                                                                                                                  // 417\n   * @method  Utility.isValidNormalizedLocalDateAndTimeString                                                          // 418\n   * @private                                                                                                          // 419\n   * @param  {String} dtString                                                                                         // 420\n   * @return {Boolean}                                                                                                 // 421\n   *                                                                                                                   // 422\n   * Returns true if dtString is a \"valid normalized local date and time string\"                                       // 423\n   */                                                                                                                  // 424\n  isValidNormalizedLocalDateAndTimeString: function isValidNormalizedLocalDateAndTimeString(dtString) {                // 425\n    if (typeof dtString !== \"string\")                                                                                  // 426\n      return false;                                                                                                    // 427\n                                                                                                                       // 428\n    var datePart = dtString.substring(0, 10);                                                                          // 429\n    var tPart = dtString.substring(10, 11);                                                                            // 430\n    var timePart = dtString.substring(11, dtString.length);                                                            // 431\n    return Utility.isValidDateString(datePart) && tPart === \"T\" && Utility.isValidTimeString(timePart);                // 432\n  },                                                                                                                   // 433\n  /**                                                                                                                  // 434\n   * @method Utility.normalizeContext                                                                                  // 435\n   * @private                                                                                                          // 436\n   * @param  {Object} context A context object, potentially with an `atts` property.                                   // 437\n   * @param {String} name The name of the helper or component we're calling from.                                      // 438\n   * @return {Object} Normalized context object                                                                        // 439\n   *                                                                                                                   // 440\n   * Returns an object with `afc`, `af`, and `atts` properties, normalized from whatever object is passed in.          // 441\n   * This helps deal with the fact that we have to pass the ancestor autoform's context to different                   // 442\n   * helpers and components in different ways, but in all cases we want to get access to it and throw                  // 443\n   * an error if we can't find an autoform context.                                                                    // 444\n   */                                                                                                                  // 445\n  normalizeContext: function autoFormNormalizeContext(context, name) {                                                 // 446\n    var atts, autoform, defs, itemDefs, allowedValues, formComponentAttributes,                                        // 447\n      fieldAttributes, fieldAttributesForComponentType;                                                                // 448\n                                                                                                                       // 449\n    context = context || {};                                                                                           // 450\n    atts = context.atts ? _.clone(context.atts) : _.clone(context);                                                    // 451\n    autoform = AutoForm.find(name);                                                                                    // 452\n    defs = Utility.getDefs(autoform.ss, atts.name); //defs will not be undefined                                       // 453\n                                                                                                                       // 454\n    // For array fields, `allowedValues` is on the array item definition                                               // 455\n    if (defs.type === Array) {                                                                                         // 456\n      itemDefs = Utility.getDefs(autoform.ss, atts.name + \".$\");                                                       // 457\n      allowedValues = itemDefs.allowedValues;                                                                          // 458\n    } else {                                                                                                           // 459\n      allowedValues = defs.allowedValues;                                                                              // 460\n    }                                                                                                                  // 461\n                                                                                                                       // 462\n    // Look up the tree if we're in a helper, checking to see if any ancestor components                               // 463\n    // had a <componentType>-attribute specified.                                                                      // 464\n    formComponentAttributes = AutoForm.findAttributesWithPrefix(name + \"-\");                                           // 465\n                                                                                                                       // 466\n    // Get any field-specific attributes defined in the schema.                                                        // 467\n    // They can be in autoform.attrName or autoform.componentType.attrName, with                                       // 468\n    // the latter overriding the former.                                                                               // 469\n    fieldAttributes = _.clone(defs.autoform) || {};                                                                    // 470\n    fieldAttributesForComponentType = fieldAttributes[name] || {};                                                     // 471\n    fieldAttributes = _.omit(fieldAttributes, componentTypeList);                                                      // 472\n    fieldAttributes = _.extend({}, fieldAttributes, fieldAttributesForComponentType);                                  // 473\n                                                                                                                       // 474\n    // If options=\"auto\", we want to use defs.autoform.options                                                         // 475\n    // if specified and otherwise fall back to \"allowed\"                                                               // 476\n    if (fieldAttributes.options && atts.options === \"auto\")                                                            // 477\n      delete atts.options;                                                                                             // 478\n                                                                                                                       // 479\n    // \"autoform\" option in the schema provides default atts                                                           // 480\n    atts = _.extend({}, formComponentAttributes, fieldAttributes, atts);                                               // 481\n                                                                                                                       // 482\n    // If still set to \"auto\", then there were no options in defs, so we use \"allowed\"                                 // 483\n    if (atts.options === \"auto\") {                                                                                     // 484\n      if (allowedValues) {                                                                                             // 485\n        atts.options = \"allowed\";                                                                                      // 486\n      } else {                                                                                                         // 487\n        delete atts.options;                                                                                           // 488\n      }                                                                                                                // 489\n    }                                                                                                                  // 490\n                                                                                                                       // 491\n    return {                                                                                                           // 492\n      af: autoform,                                                                                                    // 493\n      atts: atts,                                                                                                      // 494\n      defs: defs                                                                                                       // 495\n    };                                                                                                                 // 496\n  },                                                                                                                   // 497\n  /**                                                                                                                  // 498\n   * @method Utility.stringToArray                                                                                     // 499\n   * @private                                                                                                          // 500\n   * @param {String|Array} s A variable that might be a string or an array.                                            // 501\n   * @param {String} errorMessage Error message to use if it's not a string or an array.                               // 502\n   * @return {Array} The array, building it from a comma-delimited string if necessary.                                // 503\n   */                                                                                                                  // 504\n  stringToArray: function stringToArray(s, errorMessage) {                                                             // 505\n    if (typeof s === \"string\") {                                                                                       // 506\n      return s.replace(/ /g, '').split(',');                                                                           // 507\n    } else if (!_.isArray(s)) {                                                                                        // 508\n      throw new Error(errorMessage);                                                                                   // 509\n    } else {                                                                                                           // 510\n      return s;                                                                                                        // 511\n    }                                                                                                                  // 512\n  },                                                                                                                   // 513\n  /**                                                                                                                  // 514\n   * @method Utility.stringToBool                                                                                      // 515\n   * @private                                                                                                          // 516\n   * @param {String} val A string or null or undefined.                                                                // 517\n   * @return {Boolean|String} The string converted to a Boolean.                                                       // 518\n   *                                                                                                                   // 519\n   * If the string is \"true\" or \"1\", returns `true`. If the string is \"false\" or \"0\", returns `false`. Otherwise returns the original string.\n   */                                                                                                                  // 521\n  stringToBool: function stringToBool(val) {                                                                           // 522\n    if (typeof val === \"string\" && val.length > 0) {                                                                   // 523\n      var lval = val.toLowerCase();                                                                                    // 524\n      if (lval === \"true\" || lval === \"1\") {                                                                           // 525\n        return true;                                                                                                   // 526\n      } else if (lval === \"false\" || lval === \"0\") {                                                                   // 527\n        return false;                                                                                                  // 528\n      }                                                                                                                // 529\n    }                                                                                                                  // 530\n    return val;                                                                                                        // 531\n  },                                                                                                                   // 532\n  /**                                                                                                                  // 533\n   * @method Utility.stringToNumber                                                                                    // 534\n   * @private                                                                                                          // 535\n   * @param {String} val A string or null or undefined.                                                                // 536\n   * @return {Number|String} The string converted to a Number or the original value.                                   // 537\n   *                                                                                                                   // 538\n   * Returns Number(val) unless the result is NaN.                                                                     // 539\n   */                                                                                                                  // 540\n  stringToNumber: function stringToNumber(val) {                                                                       // 541\n    if (typeof val === \"string\" && val.length > 0) {                                                                   // 542\n      var numVal = Number(val);                                                                                        // 543\n      if (!isNaN(numVal)) {                                                                                            // 544\n        return numVal;                                                                                                 // 545\n      }                                                                                                                // 546\n    }                                                                                                                  // 547\n    return val;                                                                                                        // 548\n  },                                                                                                                   // 549\n  /**                                                                                                                  // 550\n   * @method Utility.stringToDate                                                                                      // 551\n   * @private                                                                                                          // 552\n   * @param {String} val A string or null or undefined.                                                                // 553\n   * @return {Date|String} The string converted to a Date instance.                                                    // 554\n   *                                                                                                                   // 555\n   * Returns new Date(val) as long as val is a string with at least one character. Otherwise returns the original string.\n   */                                                                                                                  // 557\n  stringToDate: function stringToDate(val) {                                                                           // 558\n    if (typeof val === \"string\" && val.length > 0) {                                                                   // 559\n      return new Date(val);                                                                                            // 560\n    }                                                                                                                  // 561\n    return val;                                                                                                        // 562\n  },                                                                                                                   // 563\n  /**                                                                                                                  // 564\n   * @method Utility.addClass                                                                                          // 565\n   * @private                                                                                                          // 566\n   * @param {Object} atts An object that might have a \"class\" property                                                 // 567\n   * @param {String} klass The class string to add                                                                     // 568\n   * @return {Object} The object with klass added to the \"class\" property, creating the property if necessary          // 569\n   */                                                                                                                  // 570\n  addClass: function addClass(atts, klass) {                                                                           // 571\n    if (typeof atts[\"class\"] === \"string\") {                                                                           // 572\n      atts[\"class\"] += \" \" + klass;                                                                                    // 573\n    } else {                                                                                                           // 574\n      atts[\"class\"] = klass;                                                                                           // 575\n    }                                                                                                                  // 576\n    return atts;                                                                                                       // 577\n  }                                                                                                                    // 578\n};                                                                                                                     // 579\n                                                                                                                       // 580\n                                                                                                                       // 581\n// getPrototypeOf polyfill                                                                                             // 582\nif (typeof Object.getPrototypeOf !== \"function\") {                                                                     // 583\n  if (typeof \"\".__proto__ === \"object\") {                                                                              // 584\n    Object.getPrototypeOf = function(object) {                                                                         // 585\n      return object.__proto__;                                                                                         // 586\n    };                                                                                                                 // 587\n  } else {                                                                                                             // 588\n    Object.getPrototypeOf = function(object) {                                                                         // 589\n      // May break if the constructor has been tampered with                                                           // 590\n      return object.constructor.prototype;                                                                             // 591\n    };                                                                                                                 // 592\n  }                                                                                                                    // 593\n}                                                                                                                      // 594\n                                                                                                                       // 595\n/* Tests whether \"obj\" is an Object as opposed to                                                                      // 596\n * something that inherits from Object                                                                                 // 597\n *                                                                                                                     // 598\n * @param {any} obj                                                                                                    // 599\n * @returns {Boolean}                                                                                                  // 600\n */                                                                                                                    // 601\nvar isBasicObject = function(obj) {                                                                                    // 602\n  return _.isObject(obj) && Object.getPrototypeOf(obj) === Object.prototype;                                           // 603\n};                                                                                                                     // 604\n                                                                                                                       // 605\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/form-preserve.js                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * @constructor                                                                                                        // 2\n * @private                                                                                                            // 3\n * @param {String} migrationName                                                                                       // 4\n *                                                                                                                     // 5\n * Internal helper object to preserve form inputs across Hot Code Push                                                 // 6\n * and across \"pages\" navigation if the option is enabled.                                                             // 7\n */                                                                                                                    // 8\nFormPreserve = function formPreserveConstructor(migrationName) {                                                       // 9\n  var self = this;                                                                                                     // 10\n  if (! _.isString(migrationName))                                                                                     // 11\n    throw Error(\"You must define an unique migration name of type String\");                                            // 12\n  self.registeredForms = {};                                                                                           // 13\n  self.retrievedDocuments = {};                                                                                        // 14\n  if (Package.reload) {                                                                                                // 15\n    var Reload = Package.reload.Reload;                                                                                // 16\n    self.retrievedDocuments = Reload._migrationData(migrationName) || {};                                              // 17\n    Reload._onMigrate(migrationName, function () {                                                                     // 18\n      return [true, self._retrieveRegisteredDocuments()];                                                              // 19\n    });                                                                                                                // 20\n  }                                                                                                                    // 21\n};                                                                                                                     // 22\n                                                                                                                       // 23\nFormPreserve.prototype.getDocument = function (formId) {                                                               // 24\n  var self = this;                                                                                                     // 25\n  if (! _.has(self.retrievedDocuments, formId))                                                                        // 26\n    return false;                                                                                                      // 27\n  else                                                                                                                 // 28\n    return self.retrievedDocuments[formId];                                                                            // 29\n};                                                                                                                     // 30\n                                                                                                                       // 31\nFormPreserve.prototype.clearDocument = function (formId) {                                                             // 32\n  delete this.retrievedDocuments[formId];                                                                              // 33\n};                                                                                                                     // 34\n                                                                                                                       // 35\nFormPreserve.prototype.registerForm = function (formId, retrieveFunc) {                                                // 36\n  this.registeredForms[formId] = retrieveFunc;                                                                         // 37\n};                                                                                                                     // 38\n                                                                                                                       // 39\nFormPreserve.prototype.formIsRegistered = function (formId) {                                                          // 40\n  return !!this.registeredForms[formId];                                                                               // 41\n};                                                                                                                     // 42\n                                                                                                                       // 43\nFormPreserve.prototype.unregisterForm = function (formId) {                                                            // 44\n  delete this.registeredForms[formId];                                                                                 // 45\n  delete this.retrievedDocuments[formId];                                                                              // 46\n};                                                                                                                     // 47\n                                                                                                                       // 48\nFormPreserve.prototype.unregisterAllForms = function () {                                                              // 49\n  var self = this;                                                                                                     // 50\n  self.registeredForms = {};                                                                                           // 51\n  self.retrievedDocuments = {};                                                                                        // 52\n};                                                                                                                     // 53\n                                                                                                                       // 54\nFormPreserve.prototype._retrieveRegisteredDocuments = function () {                                                    // 55\n  var self = this;                                                                                                     // 56\n  res = {};                                                                                                            // 57\n  _.each(self.registeredForms, function (retrieveFunc, formId) {                                                       // 58\n    res[formId] = retrieveFunc();                                                                                      // 59\n  });                                                                                                                  // 60\n  return res;                                                                                                          // 61\n};                                                                                                                     // 62\n                                                                                                                       // 63\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/autoform-hooks.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// Manages all hooks, supporting append/replace, get                                                                   // 1\n                                                                                                                       // 2\nHooks = {                                                                                                              // 3\n  form: {},                                                                                                            // 4\n  global: {                                                                                                            // 5\n    before: {},                                                                                                        // 6\n    after: {},                                                                                                         // 7\n    formToDoc: [],                                                                                                     // 8\n    docToForm: [],                                                                                                     // 9\n    onSubmit: [],                                                                                                      // 10\n    onSuccess: [],                                                                                                     // 11\n    onError: [],                                                                                                       // 12\n    beginSubmit: [],                                                                                                   // 13\n    endSubmit: []                                                                                                      // 14\n  }                                                                                                                    // 15\n};                                                                                                                     // 16\n                                                                                                                       // 17\nHooks.addHooksToList = function addHooksToList(hooksList, hooks, replace) {                                            // 18\n  // Add before hooks                                                                                                  // 19\n  hooks.before && _.each(hooks.before, function autoFormBeforeHooksEach(func, type) {                                  // 20\n    if (typeof func !== \"function\") {                                                                                  // 21\n      throw new Error(\"AutoForm before hook must be a function, not \" + typeof func);                                  // 22\n    }                                                                                                                  // 23\n    hooksList.before[type] = (!replace && hooksList.before[type]) ? hooksList.before[type] : [];                       // 24\n    hooksList.before[type].push(func);                                                                                 // 25\n  });                                                                                                                  // 26\n                                                                                                                       // 27\n  // Add after hooks                                                                                                   // 28\n  hooks.after && _.each(hooks.after, function autoFormAfterHooksEach(func, type) {                                     // 29\n    if (typeof func !== \"function\") {                                                                                  // 30\n      throw new Error(\"AutoForm after hook must be a function, not \" + typeof func);                                   // 31\n    }                                                                                                                  // 32\n    hooksList.after[type] = (!replace && hooksList.after[type]) ? hooksList.after[type] : [];                          // 33\n    hooksList.after[type].push(func);                                                                                  // 34\n  });                                                                                                                  // 35\n                                                                                                                       // 36\n  // Add all other hooks                                                                                               // 37\n  _.each(['formToDoc', 'docToForm', 'onSubmit', 'onSuccess', 'onError', 'beginSubmit', 'endSubmit'], function autoFormHooksEach(name) {\n    if (hooks[name]) {                                                                                                 // 39\n      if (typeof hooks[name] !== \"function\") {                                                                         // 40\n        throw new Error(\"AutoForm \" + name + \" hook must be a function, not \" + typeof hooks[name]);                   // 41\n      }                                                                                                                // 42\n                                                                                                                       // 43\n      if(replace) {                                                                                                    // 44\n          hooksList[name] = [];                                                                                        // 45\n      }                                                                                                                // 46\n                                                                                                                       // 47\n      hooksList[name].push(hooks[name]);                                                                               // 48\n    }                                                                                                                  // 49\n  });                                                                                                                  // 50\n};                                                                                                                     // 51\n                                                                                                                       // 52\nHooks.getHooks = function getHooks(formId, type, subtype) {                                                            // 53\n  var f, g;                                                                                                            // 54\n  if (subtype) {                                                                                                       // 55\n    f = Hooks.form[formId] && Hooks.form[formId][type] && Hooks.form[formId][type][subtype] || [];                     // 56\n    g = Hooks.global[type] && Hooks.global[type][subtype] || [];                                                       // 57\n  } else {                                                                                                             // 58\n    f = Hooks.form[formId] && Hooks.form[formId][type] || [];                                                          // 59\n    g = Hooks.global[type] || [];                                                                                      // 60\n  }                                                                                                                    // 61\n  return f.concat(g);                                                                                                  // 62\n};                                                                                                                     // 63\n                                                                                                                       // 64\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/autoform-formdata.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// Tracks form data; particularly needed to track the number of items in arrays in the doc                             // 1\n                                                                                                                       // 2\nFormData = function afFormData() {                                                                                     // 3\n\tvar self = this;                                                                                                      // 4\n\tself.forms = {};                                                                                                      // 5\n};                                                                                                                     // 6\n                                                                                                                       // 7\nFormData.prototype.initForm = function fdInitForm(formId) {                                                            // 8\n\tvar self = this;                                                                                                      // 9\n                                                                                                                       // 10\n\tif (self.forms[formId])                                                                                               // 11\n\t\treturn;                                                                                                              // 12\n                                                                                                                       // 13\n\tself.forms[formId] = {                                                                                                // 14\n\t\tsourceDoc: null,                                                                                                     // 15\n\t\tdeps: {                                                                                                              // 16\n\t\t\tsourceDoc: new Tracker.Dependency()                                                                                 // 17\n\t\t}                                                                                                                    // 18\n\t};                                                                                                                    // 19\n};                                                                                                                     // 20\n                                                                                                                       // 21\nFormData.prototype.sourceDoc = function fdSourceDoc(formId, sourceDoc) {                                               // 22\n\tvar self = this;                                                                                                      // 23\n\tself.initForm(formId);                                                                                                // 24\n                                                                                                                       // 25\n\tif (sourceDoc) {                                                                                                      // 26\n\t\t//setter                                                                                                             // 27\n\t\tself.forms[formId].sourceDoc = sourceDoc;                                                                            // 28\n\t\tself.forms[formId].deps.sourceDoc.changed();                                                                         // 29\n\t} else {                                                                                                              // 30\n\t\t//getter                                                                                                             // 31\n\t\tself.forms[formId].deps.sourceDoc.depend();                                                                          // 32\n\t\treturn self.forms[formId].sourceDoc;                                                                                 // 33\n\t}                                                                                                                     // 34\n};                                                                                                                     // 35\n                                                                                                                       // 36\nFormData.prototype.getDocCountForField = function fdGetDocCountForField(formId, field) {                               // 37\n\tvar self = this;                                                                                                      // 38\n\tvar mDoc = self.sourceDoc(formId);                                                                                    // 39\n\tvar docCount;                                                                                                         // 40\n\tif (mDoc) {                                                                                                           // 41\n\t\tvar keyInfo = mDoc.getInfoForKey(field);                                                                             // 42\n\t\tif (keyInfo && _.isArray(keyInfo.value)) {                                                                           // 43\n\t\t\tdocCount = keyInfo.value.length                                                                                     // 44\n\t\t}                                                                                                                    // 45\n\t}                                                                                                                     // 46\n\treturn docCount;                                                                                                      // 47\n};                                                                                                                     // 48\n                                                                                                                       // 49\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/autoform-arrays.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// Track arrays; this allows us to add/remove fields or groups of fields for an array                                  // 1\n// but still easily respect minCount and maxCount, and properly add/remove the same                                    // 2\n// items from the database once the form is submitted.                                                                 // 3\n                                                                                                                       // 4\nArrayTracker = function afArrayTracker() {                                                                             // 5\n  var self = this;                                                                                                     // 6\n  self.info = {};                                                                                                      // 7\n};                                                                                                                     // 8\n                                                                                                                       // 9\nArrayTracker.prototype.getMinMax = function atGetMinMax(ss, field, overrideMinCount, overrideMaxCount) {               // 10\n  var defs = AutoForm.Utility.getDefs(ss, field);                                                                      // 11\n                                                                                                                       // 12\n  // minCount is set by the schema, but can be set higher on the field attribute                                       // 13\n  overrideMinCount = overrideMinCount || 0;                                                                            // 14\n  var minCount = defs.minCount || 0;                                                                                   // 15\n  minCount = Math.max(overrideMinCount, minCount);                                                                     // 16\n                                                                                                                       // 17\n  // maxCount is set by the schema, but can be set lower on the field attribute                                        // 18\n  overrideMaxCount = overrideMaxCount || Infinity;                                                                     // 19\n  var maxCount = defs.maxCount || Infinity;                                                                            // 20\n  maxCount = Math.min(overrideMaxCount, maxCount);                                                                     // 21\n                                                                                                                       // 22\n  return {minCount: minCount, maxCount: maxCount};                                                                     // 23\n};                                                                                                                     // 24\n                                                                                                                       // 25\nArrayTracker.prototype.initForm = function atInitForm(formId) {                                                        // 26\n\tvar self = this;                                                                                                      // 27\n                                                                                                                       // 28\n\tif (self.info[formId])                                                                                                // 29\n\t\treturn;                                                                                                              // 30\n                                                                                                                       // 31\n\tself.info[formId] = {};                                                                                               // 32\n};                                                                                                                     // 33\n                                                                                                                       // 34\nArrayTracker.prototype.getForm = function atInitForm(formId) {                                                         // 35\n\tvar self = this;                                                                                                      // 36\n\tself.initForm(formId);                                                                                                // 37\n\treturn self.info[formId];                                                                                             // 38\n};                                                                                                                     // 39\n                                                                                                                       // 40\nArrayTracker.prototype.ensureField = function atEnsureField(formId, field) {                                           // 41\n\tvar self = this;                                                                                                      // 42\n\tself.initForm(formId);                                                                                                // 43\n                                                                                                                       // 44\n\tif (!self.info[formId][field]) {                                                                                      // 45\n\t\tself.resetField(formId, field);                                                                                      // 46\n\t}                                                                                                                     // 47\n};                                                                                                                     // 48\n                                                                                                                       // 49\nArrayTracker.prototype.initField = function atInitField(formId, field, ss, docCount, overrideMinCount, overrideMaxCount) {\n\tvar self = this;                                                                                                      // 51\n\tself.ensureField(formId, field);                                                                                      // 52\n                                                                                                                       // 53\n\tif (self.info[formId][field].array != null)                                                                           // 54\n\t\treturn;                                                                                                              // 55\n                                                                                                                       // 56\n\t// If we have a doc: The count should be the maximum of docCount or schema minCount or field minCount or 1.           // 57\n\t// If we don't have a doc: The count should be the maximum of schema minCount or field minCount or 1.                 // 58\n\tvar range = self.getMinMax(ss, field, overrideMinCount, overrideMaxCount);                                            // 59\n\tvar arrayCount = Math.max(range.minCount, (docCount == null) ? 1 : docCount);                                         // 60\n                                                                                                                       // 61\n\t// If this is an array of objects, collect names of object props                                                      // 62\n\tvar childKeys = [];                                                                                                   // 63\n\tif (ss.schema(field + '.$').type === Object) {                                                                        // 64\n    childKeys = ss.objectKeys(SimpleSchema._makeGeneric(field) + '.$');                                                // 65\n\t}                                                                                                                     // 66\n                                                                                                                       // 67\n\tvar loopArray = [];                                                                                                   // 68\n\tfor (var i = 0; i < arrayCount; i++) {                                                                                // 69\n\t\tvar loopCtx = createLoopCtx(formId, field, i, childKeys, overrideMinCount, overrideMaxCount);                        // 70\n\t\tloopArray.push(loopCtx);                                                                                             // 71\n\t};                                                                                                                    // 72\n                                                                                                                       // 73\n\tself.info[formId][field].array = loopArray;                                                                           // 74\n\tvar count = loopArray.length;                                                                                         // 75\n\tself.info[formId][field].count = count;                                                                               // 76\n\tself.info[formId][field].visibleCount = count;                                                                        // 77\n\tself.info[formId][field].deps.changed();                                                                              // 78\n};                                                                                                                     // 79\n                                                                                                                       // 80\nArrayTracker.prototype.resetField = function atResetField(formId, field) {                                             // 81\n\tvar self = this;                                                                                                      // 82\n\tself.initForm(formId);                                                                                                // 83\n                                                                                                                       // 84\n\tif (!self.info[formId][field]) {                                                                                      // 85\n\t\tself.info[formId][field] = {                                                                                         // 86\n\t\t\tdeps: new Tracker.Dependency()                                                                                      // 87\n\t\t};                                                                                                                   // 88\n\t}                                                                                                                     // 89\n                                                                                                                       // 90\n\tself.info[formId][field].array = null;                                                                                // 91\n\tself.info[formId][field].count = 0;                                                                                   // 92\n\tself.info[formId][field].visibleCount = 0;                                                                            // 93\n\tself.info[formId][field].deps.changed();                                                                              // 94\n};                                                                                                                     // 95\n                                                                                                                       // 96\nArrayTracker.prototype.resetForm = function atResetForm(formId) {                                                      // 97\n\tvar self = this;                                                                                                      // 98\n\t_.each(self.info[formId], function (info, field) {                                                                    // 99\n\t\tself.resetField(formId, field);                                                                                      // 100\n\t});                                                                                                                   // 101\n};                                                                                                                     // 102\n                                                                                                                       // 103\nArrayTracker.prototype.untrackForm = function atUntrackForm(formId) {                                                  // 104\n\tvar self = this;                                                                                                      // 105\n\tself.info[formId] = {};                                                                                               // 106\n};                                                                                                                     // 107\n                                                                                                                       // 108\nArrayTracker.prototype.tracksField = function atTracksField(formId, field) {                                           // 109\n\tvar self = this;                                                                                                      // 110\n\tself.ensureField(formId, field);                                                                                      // 111\n\tself.info[formId][field].deps.depend();                                                                               // 112\n\treturn !!self.info[formId][field].array;                                                                              // 113\n};                                                                                                                     // 114\n                                                                                                                       // 115\nArrayTracker.prototype.getField = function atGetField(formId, field) {                                                 // 116\n\tvar self = this;                                                                                                      // 117\n\tself.ensureField(formId, field);                                                                                      // 118\n\tself.info[formId][field].deps.depend();                                                                               // 119\n\treturn self.info[formId][field].array;                                                                                // 120\n};                                                                                                                     // 121\n                                                                                                                       // 122\nArrayTracker.prototype.getCount = function atGetCount(formId, field) {                                                 // 123\n\tvar self = this;                                                                                                      // 124\n\tself.ensureField(formId, field);                                                                                      // 125\n\tself.info[formId][field].deps.depend();                                                                               // 126\n\treturn self.info[formId][field].count;                                                                                // 127\n};                                                                                                                     // 128\n                                                                                                                       // 129\nArrayTracker.prototype.getVisibleCount = function atGetVisibleCount(formId, field) {                                   // 130\n\tvar self = this;                                                                                                      // 131\n\tself.ensureField(formId, field);                                                                                      // 132\n\tself.info[formId][field].deps.depend();                                                                               // 133\n\treturn self.info[formId][field].visibleCount;                                                                         // 134\n};                                                                                                                     // 135\n                                                                                                                       // 136\nArrayTracker.prototype.isFirstFieldlVisible = function atIsFirstFieldlVisible(formId, field, currentIndex) {           // 137\n\tvar self = this;                                                                                                      // 138\n\tself.ensureField(formId, field);                                                                                      // 139\n\tself.info[formId][field].deps.depend();                                                                               // 140\n\tvar firstVisibleField = _.find(self.info[formId][field].array, function(currentField) {                               // 141\n\t\treturn !currentField.removed;                                                                                        // 142\n\t});                                                                                                                   // 143\n\treturn (firstVisibleField && firstVisibleField.index === currentIndex);                                               // 144\n};                                                                                                                     // 145\n                                                                                                                       // 146\nArrayTracker.prototype.isLastFieldlVisible = function atIsLastFieldlVisible(formId, field, currentIndex) {             // 147\n\tvar self = this;                                                                                                      // 148\n\tself.ensureField(formId, field);                                                                                      // 149\n\tself.info[formId][field].deps.depend();                                                                               // 150\n\tvar lastVisibleField = _.last(_.filter(self.info[formId][field].array, function(currentField) {                       // 151\n\t\treturn !currentField.removed;                                                                                        // 152\n\t}));                                                                                                                  // 153\n\treturn (lastVisibleField && lastVisibleField.index === currentIndex);                                                 // 154\n};                                                                                                                     // 155\n                                                                                                                       // 156\nArrayTracker.prototype.addOneToField = function atAddOneToField(formId, field, ss, overrideMinCount, overrideMaxCount) {\n  var self = this;                                                                                                     // 158\n  self.ensureField(formId, field);                                                                                     // 159\n                                                                                                                       // 160\n  if (!self.info[formId][field].array) {                                                                               // 161\n  \treturn;                                                                                                             // 162\n  }                                                                                                                    // 163\n                                                                                                                       // 164\n  var currentCount = self.info[formId][field].visibleCount                                                             // 165\n  var maxCount = self.getMinMax(ss, field, overrideMinCount, overrideMaxCount).maxCount;                               // 166\n                                                                                                                       // 167\n  if (currentCount < maxCount) {                                                                                       // 168\n\t  var i = self.info[formId][field].array.length;                                                                      // 169\n                                                                                                                       // 170\n\t  // If this is an array of objects, collect names of object props                                                    // 171\n\t  var childKeys = [];                                                                                                 // 172\n\t  if (ss.schema(field + '.$').type === Object) {                                                                      // 173\n      childKeys = ss.objectKeys(SimpleSchema._makeGeneric(field) + '.$');                                              // 174\n\t  }                                                                                                                   // 175\n                                                                                                                       // 176\n\t  var loopCtx = createLoopCtx(formId, field, i, childKeys, overrideMinCount, overrideMaxCount);                       // 177\n                                                                                                                       // 178\n\t  self.info[formId][field].array.push(loopCtx);                                                                       // 179\n\t  self.info[formId][field].count++;                                                                                   // 180\n\t  self.info[formId][field].visibleCount++;                                                                            // 181\n\t  self.info[formId][field].deps.changed();                                                                            // 182\n  }                                                                                                                    // 183\n};                                                                                                                     // 184\n                                                                                                                       // 185\nArrayTracker.prototype.removeFromFieldAtIndex = function atRemoveFromFieldAtIndex(formId, field, index, ss, overrideMinCount, overrideMaxCount) {\n  var self = this;                                                                                                     // 187\n  self.ensureField(formId, field);                                                                                     // 188\n                                                                                                                       // 189\n  if (!self.info[formId][field].array) {                                                                               // 190\n  \treturn;                                                                                                             // 191\n  }                                                                                                                    // 192\n                                                                                                                       // 193\n  var currentCount = self.info[formId][field].visibleCount;                                                            // 194\n  var minCount = self.getMinMax(ss, field, overrideMinCount, overrideMaxCount).minCount;                               // 195\n                                                                                                                       // 196\n  if (currentCount > minCount) {                                                                                       // 197\n    self.info[formId][field].array[index].removed = true;                                                              // 198\n    self.info[formId][field].count--;                                                                                  // 199\n    self.info[formId][field].visibleCount--;                                                                           // 200\n    self.info[formId][field].deps.changed();                                                                           // 201\n  }                                                                                                                    // 202\n}                                                                                                                      // 203\n                                                                                                                       // 204\n/*                                                                                                                     // 205\n * PRIVATE                                                                                                             // 206\n */                                                                                                                    // 207\nvar createLoopCtx = function(formId, field, index, childKeys, overrideMinCount, overrideMaxCount) {                    // 208\n  var loopCtx = {                                                                                                      // 209\n  \tformId:         formId,                                                                                             // 210\n  \tarrayFieldName: field,                                                                                              // 211\n  \tname:           field + '.' + index,                                                                                // 212\n  \tindex:          index,                                                                                              // 213\n  \tminCount:       overrideMinCount,                                                                                   // 214\n  \tmaxCount:       overrideMaxCount                                                                                    // 215\n  };                                                                                                                   // 216\n                                                                                                                       // 217\n  // If this is an array of objects, add child key names under loopCtx.current[childName] = fullKeyName                // 218\n  if (childKeys.length) {                                                                                              // 219\n    loopCtx.current = {};                                                                                              // 220\n\t_.each(childKeys, function (k) {                                                                                      // 221\n\t  loopCtx.current[k] = field + '.' + index + '.' + k;                                                                 // 222\n    });                                                                                                                // 223\n  }                                                                                                                    // 224\n                                                                                                                       // 225\n  return loopCtx;                                                                                                      // 226\n}                                                                                                                      // 227\n                                                                                                                       // 228\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/autoform.js                                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\ndefaultFormId = \"_afGenericID\";                                                                                        // 1\nformPreserve = new FormPreserve(\"autoforms\");                                                                          // 2\nformData = {}; //for looking up autoform data by form ID                                                               // 3\ntemplatesById = {}; //keep a reference of autoForm templates by form `id` for AutoForm.getFormValues                   // 4\nformValues = {}; //for reactive show/hide based on current value of a field                                            // 5\nformDeps = {}; //for invalidating the form inner context and causing rerender                                          // 6\ninputTypeDefinitions = {}; //for storing input type definitions added by AutoForm.addInputType                         // 7\nfd = new FormData();                                                                                                   // 8\narrayTracker = new ArrayTracker();                                                                                     // 9\ncomponentTypeList = ['afArrayField', 'afEachArrayItem', 'afFieldInput', 'afFormGroup', 'afObjectField', 'afQuickField', 'afQuickFields', 'autoForm', 'quickForm'];\n                                                                                                                       // 11\n// backwards compatibility                                                                                             // 12\nif (typeof Tracker === \"undefined\" && typeof Deps !== \"undefined\") {                                                   // 13\n  Tracker = Deps;                                                                                                      // 14\n}                                                                                                                      // 15\n                                                                                                                       // 16\nafDestroyUpdateForm = new ReactiveVar(false);                                                                          // 17\n                                                                                                                       // 18\n// reactive templates                                                                                                  // 19\nglobalDefaultTemplate = \"bootstrap3\"                                                                                   // 20\ndefaultTypeTemplates = {};                                                                                             // 21\ndeps = {                                                                                                               // 22\n  defaultTemplate: new Tracker.Dependency,                                                                             // 23\n  defaultTypeTemplates: {}                                                                                             // 24\n};                                                                                                                     // 25\n                                                                                                                       // 26\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/autoform-helpers.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// Global template helpers (exported)                                                                                  // 1\n                                                                                                                       // 2\nvar regHelper = Template.registerHelper;                                                                               // 3\nif (typeof regHelper !== \"function\") {                                                                                 // 4\n  regHelper = UI.registerHelper;                                                                                       // 5\n}                                                                                                                      // 6\n                                                                                                                       // 7\n/*                                                                                                                     // 8\n * afFieldMessage                                                                                                      // 9\n */                                                                                                                    // 10\nregHelper('afFieldMessage', function autoFormFieldMessage(options) {                                                   // 11\n  options = parseOptions(options, 'afFieldMessage');                                                                   // 12\n                                                                                                                       // 13\n  return options.ss.namedContext(options.formId).keyErrorMessage(options.name);                                        // 14\n});                                                                                                                    // 15\n                                                                                                                       // 16\n/*                                                                                                                     // 17\n * afFieldIsInvalid                                                                                                    // 18\n */                                                                                                                    // 19\nregHelper('afFieldIsInvalid', function autoFormFieldIsInvalid(options) {                                               // 20\n  options = parseOptions(options, 'afFieldIsInvalid');                                                                 // 21\n                                                                                                                       // 22\n  return options.ss.namedContext(options.formId).keyIsInvalid(options.name);                                           // 23\n});                                                                                                                    // 24\n                                                                                                                       // 25\n/*                                                                                                                     // 26\n * afArrayFieldHasMoreThanMinimum                                                                                      // 27\n */                                                                                                                    // 28\nregHelper('afArrayFieldHasMoreThanMinimum', function autoFormArrayFieldHasMoreThanMinimum(options) {                   // 29\n  options = parseOptions(options, 'afArrayFieldHasMoreThanMinimum');                                                   // 30\n                                                                                                                       // 31\n  var range = arrayTracker.getMinMax(options.ss, options.name, options.minCount, options.maxCount);                    // 32\n  var visibleCount = arrayTracker.getVisibleCount(options.formId, options.name);                                       // 33\n  return (visibleCount > range.minCount);                                                                              // 34\n});                                                                                                                    // 35\n                                                                                                                       // 36\n/*                                                                                                                     // 37\n * afArrayFieldHasLessThanMaximum                                                                                      // 38\n */                                                                                                                    // 39\nregHelper('afArrayFieldHasLessThanMaximum', function autoFormArrayFieldHasLessThanMaximum(options) {                   // 40\n  options = parseOptions(options, 'afArrayFieldHasLessThanMaximum');                                                   // 41\n                                                                                                                       // 42\n  var range = arrayTracker.getMinMax(options.ss, options.name, options.minCount, options.maxCount);                    // 43\n  var visibleCount = arrayTracker.getVisibleCount(options.formId, options.name);                                       // 44\n  return (visibleCount < range.maxCount);                                                                              // 45\n});                                                                                                                    // 46\n                                                                                                                       // 47\n/*                                                                                                                     // 48\n * afFieldValueIs                                                                                                      // 49\n */                                                                                                                    // 50\nregHelper('afFieldValueIs', function autoFormFieldValueIs(options) {                                                   // 51\n  options = parseOptions(options, 'afFieldValueIs');                                                                   // 52\n                                                                                                                       // 53\n  var currentValue = AutoForm.getFieldValue(options.formId, options.name);                                             // 54\n  return currentValue === options.value;                                                                               // 55\n});                                                                                                                    // 56\n                                                                                                                       // 57\n/*                                                                                                                     // 58\n * afArrayFieldIsFirstVisible                                                                                          // 59\n */                                                                                                                    // 60\nregHelper('afArrayFieldIsFirstVisible', function autoFormArrayFieldIsFirstVisible() {                                  // 61\n  var context = this;                                                                                                  // 62\n  return arrayTracker.isFirstFieldlVisible(context.formId, context.arrayFieldName, context.index);                     // 63\n});                                                                                                                    // 64\n                                                                                                                       // 65\n/*                                                                                                                     // 66\n * afArrayFieldIsLastVisible                                                                                           // 67\n */                                                                                                                    // 68\nregHelper('afArrayFieldIsLastVisible', function autoFormArrayFieldIsLastVisible() {                                    // 69\n  var context = this;                                                                                                  // 70\n  return arrayTracker.isLastFieldlVisible(context.formId, context.arrayFieldName, context.index);                      // 71\n});                                                                                                                    // 72\n                                                                                                                       // 73\n/*                                                                                                                     // 74\n * afFieldValueContains                                                                                                // 75\n */                                                                                                                    // 76\nregHelper('afFieldValueContains', function autoFormFieldValueContains(options) {                                       // 77\n  options = parseOptions(options, 'afFieldValueContains');                                                             // 78\n                                                                                                                       // 79\n  var currentValue = AutoForm.getFieldValue(options.formId, options.name);                                             // 80\n  return _.isArray(currentValue) && (_.contains(currentValue, options.value) || options.values && _.intersection(currentValue, options.values.split(\",\")));\n});                                                                                                                    // 82\n                                                                                                                       // 83\n/*                                                                                                                     // 84\n * afFieldLabelText                                                                                                    // 85\n */                                                                                                                    // 86\nregHelper('afFieldLabelText', function autoFormFieldLabelText(options) {                                               // 87\n  options = parseOptions(options, 'afFieldLabelText');                                                                 // 88\n                                                                                                                       // 89\n  if (SimpleSchema._makeGeneric(options.name).slice(-1) === \"$\") {                                                     // 90\n    // for array items we don't want to inflect the label because                                                      // 91\n    // we will end up with a number                                                                                    // 92\n    var label = options.ss.label(options.name);                                                                        // 93\n    if (!isNaN(parseInt(label, 10))) {                                                                                 // 94\n      return null;                                                                                                     // 95\n    } else {                                                                                                           // 96\n      return label;                                                                                                    // 97\n    }                                                                                                                  // 98\n  } else {                                                                                                             // 99\n    return options.ss.label(options.name);                                                                             // 100\n  }                                                                                                                    // 101\n});                                                                                                                    // 102\n                                                                                                                       // 103\n/*                                                                                                                     // 104\n * afFieldNames                                                                                                        // 105\n */                                                                                                                    // 106\nregHelper(\"afFieldNames\", function autoFormFieldNames(options) {                                                       // 107\n  options = parseOptions(options, 'afFieldNames');                                                                     // 108\n  var ss = options.ss, name = options.name, namePlusDot, genericName, genericNamePlusDot;                              // 109\n                                                                                                                       // 110\n  if (name) {                                                                                                          // 111\n    namePlusDot = name + \".\";                                                                                          // 112\n    genericName = SimpleSchema._makeGeneric(name);                                                                     // 113\n    genericNamePlusDot = genericName + \".\";                                                                            // 114\n  }                                                                                                                    // 115\n                                                                                                                       // 116\n  // Get the list of fields we want included                                                                           // 117\n  var fieldList = options.fields || AutoForm.findAttribute(\"fields\");                                                  // 118\n  if (fieldList) {                                                                                                     // 119\n    fieldList = AutoForm.Utility.stringToArray(fieldList, 'AutoForm: fields attribute must be an array or a string containing a comma-delimited list of fields');\n                                                                                                                       // 121\n    // Take only those fields in the fieldList that are descendants of the `name` field                                // 122\n    if (name) {                                                                                                        // 123\n      // Replace generic name with real name. We assume that field names                                               // 124\n      // with $ apply to all array items. Field list will not have the                                                 // 125\n      // correct array field item number instead of $.                                                                 // 126\n      if (genericName !== name) {                                                                                      // 127\n        fieldList = _.map(fieldList, function (field) {                                                                // 128\n          if (field.indexOf(genericNamePlusDot) === 0) {                                                               // 129\n            return namePlusDot + field.slice(genericNamePlusDot.length);                                               // 130\n          }                                                                                                            // 131\n          return field;                                                                                                // 132\n        });                                                                                                            // 133\n      }                                                                                                                // 134\n                                                                                                                       // 135\n      fieldList = _.filter(fieldList, function filterFieldsByName(field) {                                             // 136\n        return field.indexOf(namePlusDot) === 0;                                                                       // 137\n      });                                                                                                              // 138\n    }                                                                                                                  // 139\n                                                                                                                       // 140\n    // If top level fields, be sure to remove any with $ in them                                                       // 141\n    else {                                                                                                             // 142\n      fieldList = _.filter(fieldList, function filterFieldsByName(field) {                                             // 143\n        return (field.slice(-2) !== '.$' && field.indexOf('.$.') === -1);                                              // 144\n      });                                                                                                              // 145\n    }                                                                                                                  // 146\n                                                                                                                       // 147\n    // First we filter out any fields that are subobjects where the                                                    // 148\n    // parent object is also in the fieldList and is NOT the current                                                   // 149\n    // field name.                                                                                                     // 150\n    // This means that if you do `fields=\"address,address.city\"` we                                                    // 151\n    // will use an afObjectField for address and include only the                                                      // 152\n    // \"city\" field within that, but if you instead do `fields=\"address.city\"`                                         // 153\n    // we will use a single field for the city, with no afObjectField                                                  // 154\n    // template around it.                                                                                             // 155\n    fieldList = _.reject(fieldList, function (field) {                                                                 // 156\n      var lastDotPos = field.lastIndexOf(\".\");                                                                         // 157\n      if (lastDotPos === -1) {                                                                                         // 158\n        return false; //keep                                                                                           // 159\n      }                                                                                                                // 160\n                                                                                                                       // 161\n      var parentField = field.slice(0, lastDotPos);                                                                    // 162\n      if (parentField.slice(-2) === \".$\") {                                                                            // 163\n        parentField = parentField.slice(0, -2);                                                                        // 164\n      }                                                                                                                // 165\n      return _.contains(fieldList, parentField) && parentField !== name && parentField !== genericName;                // 166\n    });                                                                                                                // 167\n  }                                                                                                                    // 168\n                                                                                                                       // 169\n  if (!fieldList || fieldList.length === 0) {                                                                          // 170\n    // Get list of field names that are descendants of this field's name.                                              // 171\n    // If name/genericName is undefined, this will return top-level                                                    // 172\n    // schema keys.                                                                                                    // 173\n    fieldList = ss.objectKeys(genericName);                                                                            // 174\n                                                                                                                       // 175\n    if (name) {                                                                                                        // 176\n      // Tack child field name on to end of parent field name. This                                                    // 177\n      // ensures that we keep the desired array index for array items.                                                 // 178\n      fieldList = _.map(fieldList, function (field) {                                                                  // 179\n        return name + \".\" + field;                                                                                     // 180\n      });                                                                                                              // 181\n    }                                                                                                                  // 182\n  }                                                                                                                    // 183\n                                                                                                                       // 184\n  // If user wants to omit some fields, remove those from the array                                                    // 185\n  var omitFields = options.omitFields || AutoForm.findAttribute(\"omitFields\");                                         // 186\n  if (omitFields) {                                                                                                    // 187\n    omitFields = AutoForm.Utility.stringToArray(omitFields, 'AutoForm: omitFields attribute must be an array or a string containing a comma-delimited list of fields');\n    fieldList = _.difference(fieldList, omitFields);                                                                   // 189\n    // If omitFields contains generic field names (with $) we omit those too                                           // 190\n    fieldList = _.reject(fieldList, function (f) {                                                                     // 191\n      return _.contains(omitFields, SimpleSchema._makeGeneric(f));                                                     // 192\n    });                                                                                                                // 193\n  }                                                                                                                    // 194\n                                                                                                                       // 195\n  // Filter out fields we never want                                                                                   // 196\n  fieldList = _.filter(fieldList, function shouldIncludeField(field) {                                                 // 197\n    var fieldDefs = ss.schema(field);                                                                                  // 198\n                                                                                                                       // 199\n    // Don't include fields with autoform.omit=true                                                                    // 200\n    if (fieldDefs.autoform && fieldDefs.autoform.omit === true)                                                        // 201\n      return false;                                                                                                    // 202\n                                                                                                                       // 203\n    // Don't include fields with denyInsert=true when it's an insert form                                              // 204\n    if (fieldDefs.denyInsert && options.submitType === \"insert\")                                                       // 205\n      return false;                                                                                                    // 206\n                                                                                                                       // 207\n    // Don't include fields with denyUpdate=true when it's an update form                                              // 208\n    if (fieldDefs.denyUpdate && options.submitType === \"update\")                                                       // 209\n      return false;                                                                                                    // 210\n                                                                                                                       // 211\n    return true;                                                                                                       // 212\n  });                                                                                                                  // 213\n                                                                                                                       // 214\n  // Ensure fields are not added more than once                                                                        // 215\n  fieldList = _.unique(fieldList);                                                                                     // 216\n                                                                                                                       // 217\n  return fieldList;                                                                                                    // 218\n});                                                                                                                    // 219\n                                                                                                                       // 220\n/*                                                                                                                     // 221\n * afTemplateName                                                                                                      // 222\n *                                                                                                                     // 223\n * Returns the full template name. In the simplest scenario, this is templateType_templateName                         // 224\n * as passed in. However, if templateName is not provided, it is looked up in the following                            // 225\n * manner:                                                                                                             // 226\n *                                                                                                                     // 227\n * 1. autoform.<componentType>.template from the schema (field+type override for all forms)                            // 228\n * 2. autoform.template from the schema (field override for all forms)                                                 // 229\n * 3. template-<componentType> attribute on an ancestor component within the same form (form+type for all fields)      // 230\n * 4. template attribute on an ancestor component within the same form (form specificity for all types and fields)     // 231\n * 5. Default template for component type, as set by AutoForm.setDefaultTemplateForType                                // 232\n * 6. Default template, as set by AutoForm.setDefaultTemplate.                                                         // 233\n * 7. Built-in default template, currently bootstrap-3.                                                                // 234\n */                                                                                                                    // 235\nregHelper('afTemplateName', function afTemplateNameHelper(templateType, templateName) {                                // 236\n  var self = this, result, schemaAutoFormDefs, templateFromAncestor, defaultTemplate;                                  // 237\n                                                                                                                       // 238\n  var result = templateType + '_' + templateName; // templateName might be undefined, but the result will be the same  // 239\n  if (Template[result]) {                                                                                              // 240\n    return result;                                                                                                     // 241\n  }                                                                                                                    // 242\n                                                                                                                       // 243\n  // If the attributes provided a templateName but that template didn't exist, show a warning                          // 244\n  if (templateName && AutoForm._debug) {                                                                               // 245\n    console.warn(templateType + ': \"' + templateName + '\" is not a valid template name. Falling back to a different template.');\n  }                                                                                                                    // 247\n                                                                                                                       // 248\n  // Get `autoform` object from the schema, if present.                                                                // 249\n  // Skip for quickForm because it renders a form and not a field.                                                     // 250\n  if (templateType !== 'quickForm' && self.atts && self.atts.name) {                                                   // 251\n    schemaAutoFormDefs = AutoForm.getSchemaForField(self.atts.name).autoform;                                          // 252\n  }                                                                                                                    // 253\n                                                                                                                       // 254\n  // Fallback #1: autoform.<componentType>.template from the schema                                                    // 255\n  if (schemaAutoFormDefs && schemaAutoFormDefs[templateType] && schemaAutoFormDefs[templateType].template && Template[templateType + '_' + schemaAutoFormDefs[templateType].template]) {\n    return templateType + '_' + schemaAutoFormDefs[templateType].template;                                             // 257\n  }                                                                                                                    // 258\n                                                                                                                       // 259\n  // Fallback #2: autoform.template from the schema                                                                    // 260\n  if (schemaAutoFormDefs && schemaAutoFormDefs.template && Template[templateType + '_' + schemaAutoFormDefs.template]) {\n    return templateType + '_' + schemaAutoFormDefs.template;                                                           // 262\n  }                                                                                                                    // 263\n                                                                                                                       // 264\n  // Fallback #3: template-<componentType> attribute on an ancestor component within the same form                     // 265\n  templateFromAncestor = AutoForm.findAttribute(\"template-\" + templateType);                                           // 266\n  if (templateFromAncestor && Template[templateType + '_' + templateFromAncestor]) {                                   // 267\n    return templateType + '_' + templateFromAncestor;                                                                  // 268\n  }                                                                                                                    // 269\n                                                                                                                       // 270\n  // Fallback #4: template attribute on an ancestor component within the same form                                     // 271\n  templateFromAncestor = AutoForm.findAttribute(\"template\");                                                           // 272\n  if (templateFromAncestor && Template[templateType + '_' + templateFromAncestor]) {                                   // 273\n    return templateType + '_' + templateFromAncestor;                                                                  // 274\n  }                                                                                                                    // 275\n                                                                                                                       // 276\n  // Fallback #5: Default template for component type, as set by AutoForm.setDefaultTemplateForType                    // 277\n  defaultTemplate = AutoForm.getDefaultTemplateForType(templateType);                                                  // 278\n  if (defaultTemplate && Template[templateType + '_' + defaultTemplate]) {                                             // 279\n    return templateType + '_' + defaultTemplate;                                                                       // 280\n  }                                                                                                                    // 281\n                                                                                                                       // 282\n  // Fallback #6: Default template, as set by AutoForm.setDefaultTemplate                                              // 283\n  defaultTemplate = AutoForm.getDefaultTemplate();                                                                     // 284\n  if (defaultTemplate && Template[templateType + '_' + defaultTemplate]) {                                             // 285\n    return templateType + '_' + defaultTemplate;                                                                       // 286\n  }                                                                                                                    // 287\n                                                                                                                       // 288\n  // Fallback #7: hard-coded default                                                                                   // 289\n  return \"bootstrap3\";                                                                                                 // 290\n});                                                                                                                    // 291\n                                                                                                                       // 292\n/*                                                                                                                     // 293\n * PRIVATE                                                                                                             // 294\n */                                                                                                                    // 295\n                                                                                                                       // 296\nfunction parseOptions(options, helperName) {                                                                           // 297\n  var hash = (options || {}).hash || {};                                                                               // 298\n  // Find the autoform context                                                                                         // 299\n  var afContext = AutoForm.find(helperName);                                                                           // 300\n  // Call getDefs for side effect of throwing errors when name is not in schema                                        // 301\n  hash.name && AutoForm.Utility.getDefs(afContext.ss, hash.name);                                                      // 302\n  return _.extend({}, afContext, hash);                                                                                // 303\n}                                                                                                                      // 304\n                                                                                                                       // 305\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/autoform-validation.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*                                                                                                                     // 1\n * all form validation logic is here                                                                                   // 2\n */                                                                                                                    // 3\n                                                                                                                       // 4\nvalidateFormDoc = function validateFormDoc(doc, isModifier, formId, ss, docId, key) {                                  // 5\n  var ec = {                                                                                                           // 6\n    userId: (Meteor.userId && Meteor.userId()) || null,                                                                // 7\n    isInsert: !isModifier,                                                                                             // 8\n    isUpdate: !!isModifier,                                                                                            // 9\n    isUpsert: false,                                                                                                   // 10\n    isFromTrustedCode: false,                                                                                          // 11\n    docId: docId                                                                                                       // 12\n  };                                                                                                                   // 13\n                                                                                                                       // 14\n  // Get a version of the doc that has auto values to validate here. We                                                // 15\n  // don't want to actually send any auto values to the server because                                                 // 16\n  // we ultimately want them generated on the server                                                                   // 17\n  var docForValidation = ss.clean(_.clone(doc), {                                                                      // 18\n    isModifier: isModifier,                                                                                            // 19\n    filter: false,                                                                                                     // 20\n    autoConvert: false,                                                                                                // 21\n    trimStrings: false,                                                                                                // 22\n    extendAutoValueContext: ec                                                                                         // 23\n  });                                                                                                                  // 24\n                                                                                                                       // 25\n  // Validate                                                                                                          // 26\n  // If `key` is provided, we validate that key/field only                                                             // 27\n  if (key) {                                                                                                           // 28\n    return ss.namedContext(formId).validateOne(docForValidation, key, {                                                // 29\n      modifier: isModifier,                                                                                            // 30\n      extendedCustomContext: ec                                                                                        // 31\n    });                                                                                                                // 32\n  } else {                                                                                                             // 33\n    return ss.namedContext(formId).validate(docForValidation, {                                                        // 34\n      modifier: isModifier,                                                                                            // 35\n      extendedCustomContext: ec                                                                                        // 36\n    });                                                                                                                // 37\n  }                                                                                                                    // 38\n};                                                                                                                     // 39\n                                                                                                                       // 40\n_validateForm = function _validateForm(formId, formDetails, formDocs, useCollectionSchema) {                           // 41\n  var ss, docId, isValid;                                                                                              // 42\n                                                                                                                       // 43\n  if (formDetails.validationType === 'none')                                                                           // 44\n    return true;                                                                                                       // 45\n                                                                                                                       // 46\n  // We use the schema for the `schema` attribute if present,                                                          // 47\n  // else the schema for the collection. If there is a `schema`                                                        // 48\n  // attribute but you want to force validation against the                                                            // 49\n  // collection's schema instead, pass useCollectionSchema=true                                                        // 50\n  ss = (useCollectionSchema && formDetails.collection) ? formDetails.collection.simpleSchema() : formDetails.ss;       // 51\n                                                                                                                       // 52\n  docId = formDetails.doc && formDetails.doc._id || null;                                                              // 53\n                                                                                                                       // 54\n  // Perform validation                                                                                                // 55\n  if (formDetails.submitType === \"update\") {                                                                           // 56\n    // For a type=\"update\" form, we validate the modifier. We don't want to throw                                      // 57\n    // errors about missing required fields, etc.                                                                      // 58\n    isValid = validateFormDoc(formDocs.updateDoc, true, formId, ss, docId);                                            // 59\n  } else {                                                                                                             // 60\n    // For any other type of form, we validate the document.                                                           // 61\n    isValid = validateFormDoc(formDocs.insertDoc, false, formId, ss, docId);                                           // 62\n  }                                                                                                                    // 63\n                                                                                                                       // 64\n  if (!isValid) {                                                                                                      // 65\n    selectFirstInvalidField(formId, ss);                                                                               // 66\n  }                                                                                                                    // 67\n                                                                                                                       // 68\n  return isValid;                                                                                                      // 69\n};                                                                                                                     // 70\n                                                                                                                       // 71\n_validateField = function _validateField(key, template, skipEmpty, onlyIfAlreadyInvalid) {                             // 72\n  // Due to throttling, this can be called after the autoForm template is destroyed.                                   // 73\n  // If that happens, we exit without error.                                                                           // 74\n  if (!template || !template.view._domrange || template.view.isDestroyed) {                                            // 75\n    return;                                                                                                            // 76\n  }                                                                                                                    // 77\n                                                                                                                       // 78\n  var context = template.data;                                                                                         // 79\n  var formId = context.id || defaultFormId;                                                                            // 80\n  var formDetails = formData[formId];                                                                                  // 81\n  var docId = formDetails.doc && formDetails.doc._id || null;                                                          // 82\n  var ss = formDetails.ss;                                                                                             // 83\n                                                                                                                       // 84\n  if (onlyIfAlreadyInvalid && ss.namedContext(formId).isValid()) {                                                     // 85\n    return; //skip validation                                                                                          // 86\n  }                                                                                                                    // 87\n                                                                                                                       // 88\n  // Create a document based on all the values of all the inputs on the form                                           // 89\n  var formDocs = getFormValues(template, formId, ss);                                                                  // 90\n                                                                                                                       // 91\n  // Clean and validate doc                                                                                            // 92\n  if (formDetails.submitType === \"update\") {                                                                           // 93\n    var docToValidate = formDocs.updateDoc;                                                                            // 94\n    var isModifier = true;                                                                                             // 95\n  } else {                                                                                                             // 96\n    var docToValidate = formDocs.insertDoc;                                                                            // 97\n    var isModifier = false;                                                                                            // 98\n  }                                                                                                                    // 99\n                                                                                                                       // 100\n  // Skip validation if skipEmpty is true and the field we're validating                                               // 101\n  // has no value.                                                                                                     // 102\n  if (skipEmpty && !AutoForm.Utility.objAffectsKey(docToValidate, key))                                                // 103\n    return true; //skip validation                                                                                     // 104\n                                                                                                                       // 105\n  return validateFormDoc(docToValidate, isModifier, formId, ss, docId, key);                                           // 106\n};                                                                                                                     // 107\n                                                                                                                       // 108\n// Throttle field validation to occur at most every 300ms,                                                             // 109\n// with leading and trailing calls.                                                                                    // 110\nvalidateField = _.throttle(_validateField, 300);                                                                       // 111\n                                                                                                                       // 112\n// Selects the focus the first field with an error                                                                     // 113\nselectFirstInvalidField = function selectFirstInvalidField(formId, ss) {                                               // 114\n  var ctx = ss.namedContext(formId), template, fields;                                                                 // 115\n  if (!ctx.isValid()) {                                                                                                // 116\n    template = templatesById[formId];                                                                                  // 117\n    fields = getAllFieldsInForm(template);                                                                             // 118\n    fields.each(function () {                                                                                          // 119\n      var f = $(this);                                                                                                 // 120\n      if (ctx.keyIsInvalid(f.attr('data-schema-key'))) {                                                               // 121\n        f.focus();                                                                                                     // 122\n        return false;                                                                                                  // 123\n      }                                                                                                                // 124\n    });                                                                                                                // 125\n  }                                                                                                                    // 126\n};                                                                                                                     // 127\n                                                                                                                       // 128\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/autoform-inputs.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm */                                                                                                  // 1\n/* global getInputType:true */                                                                                         // 2\n/* global getFieldValue:true */                                                                                        // 3\n/* global getFormValues:true */                                                                                        // 4\n/* global formData */                                                                                                  // 5\n/* global getInputValue:true */                                                                                        // 6\n/* global getFieldsValues:true */                                                                                      // 7\n/* global getAllFieldsInForm:true */                                                                                   // 8\n/* global Hooks */                                                                                                     // 9\n/* global getInputData:true */                                                                                         // 10\n/* global updateTrackedFieldValue:true */                                                                              // 11\n/* global updateAllTrackedFieldValues:true */                                                                          // 12\n/* global formValues */                                                                                                // 13\n                                                                                                                       // 14\nfunction getFieldsValues(fields, ss) {                                                                                 // 15\n  var doc = {};                                                                                                        // 16\n  fields.each(function formValuesEach() {                                                                              // 17\n    var fieldName, val = AutoForm.getInputValue(this, ss);                                                             // 18\n    if (val !== void 0) {                                                                                              // 19\n      // Get the field/schema key name                                                                                 // 20\n      fieldName = $(this).attr(\"data-schema-key\");                                                                     // 21\n      doc[fieldName] = val;                                                                                            // 22\n    }                                                                                                                  // 23\n  });                                                                                                                  // 24\n  return doc;                                                                                                          // 25\n}                                                                                                                      // 26\n                                                                                                                       // 27\n/*                                                                                                                     // 28\n * package scope functions                                                                                             // 29\n */                                                                                                                    // 30\n                                                                                                                       // 31\n// Determines based on different options what type of input/control should be used                                     // 32\ngetInputType = function getInputType(atts) {                                                                           // 33\n\tvar expectsArray = false, defs, schemaType;                                                                           // 34\n                                                                                                                       // 35\n  atts = AutoForm.Utility.normalizeContext(atts, 'afFieldInput').atts;                                                 // 36\n                                                                                                                       // 37\n  // If a `type` attribute is specified, we just use that                                                              // 38\n  if (atts.type) {                                                                                                     // 39\n    return atts.type;                                                                                                  // 40\n  }                                                                                                                    // 41\n                                                                                                                       // 42\n\t// Get schema definition, using the item definition for array fields                                                  // 43\n\tdefs = AutoForm.getSchemaForField(atts.name);                                                                         // 44\n  schemaType = defs.type;                                                                                              // 45\n  if (schemaType === Array) {                                                                                          // 46\n    expectsArray = true;                                                                                               // 47\n    defs = AutoForm.getSchemaForField(atts.name + \".$\");                                                               // 48\n    schemaType = defs.type;                                                                                            // 49\n  }                                                                                                                    // 50\n                                                                                                                       // 51\n  // Based on the `type` attribute, the `type` from the schema, and/or                                                 // 52\n  // other characteristics such as regEx and whether an array is expected,                                             // 53\n  // choose which type string to return.                                                                               // 54\n  // TODO allow outside packages to extend/override this logic.                                                        // 55\n  var type = \"text\";                                                                                                   // 56\n  if (atts.options) {                                                                                                  // 57\n    if (atts.noselect) {                                                                                               // 58\n      // Does the schema expect the value of the field to be an array?                                                 // 59\n      // If so, use a check box group, which will return an array value.                                               // 60\n      if (expectsArray) {                                                                                              // 61\n        type = \"select-checkbox\";                                                                                      // 62\n      } else {                                                                                                         // 63\n        type = \"select-radio\";                                                                                         // 64\n      }                                                                                                                // 65\n    } else {                                                                                                           // 66\n      if (expectsArray) {                                                                                              // 67\n        type = \"select-multiple\";                                                                                      // 68\n      } else {                                                                                                         // 69\n        type = \"select\";                                                                                               // 70\n      }                                                                                                                // 71\n    }                                                                                                                  // 72\n  } else if (schemaType === String && atts.rows) {                                                                     // 73\n    type = \"textarea\";                                                                                                 // 74\n  } else if (schemaType === Number) {                                                                                  // 75\n    type = \"number\";                                                                                                   // 76\n  } else if (schemaType === Date) {                                                                                    // 77\n    type = \"date\";                                                                                                     // 78\n  } else if (schemaType === Boolean) {                                                                                 // 79\n    type = \"boolean-checkbox\";                                                                                         // 80\n  }                                                                                                                    // 81\n  return type;                                                                                                         // 82\n};                                                                                                                     // 83\n                                                                                                                       // 84\ngetFieldValue = function getFieldValue(template, key) {                                                                // 85\n  var formInfo = formData[template.data.id];                                                                           // 86\n  var doc = getFieldsValues(getAllFieldsInForm(template).filter('[data-schema-key=\"' + key + '\"], [data-schema-key^=\"' + key + '.\"]'), formInfo.ss);\n  return doc && doc[key];                                                                                              // 88\n};                                                                                                                     // 89\n                                                                                                                       // 90\ngetFormValues = function getFormValues(template, formId, ss) {                                                         // 91\n  var formInfo = formData[formId];                                                                                     // 92\n  // By default, we do not keep empty strings                                                                          // 93\n  var keepEmptyStrings = false;                                                                                        // 94\n  if (formInfo.removeEmptyStrings === false) {                                                                         // 95\n    keepEmptyStrings = true;                                                                                           // 96\n  }                                                                                                                    // 97\n  // By default, we do filter                                                                                          // 98\n  var filter = true;                                                                                                   // 99\n  if (formInfo.filter === false) {                                                                                     // 100\n    filter = false;                                                                                                    // 101\n  }                                                                                                                    // 102\n  // By default, we do autoConvert                                                                                     // 103\n  var autoConvert = true;                                                                                              // 104\n  if (formInfo.autoConvert === false) {                                                                                // 105\n    autoConvert = false;                                                                                               // 106\n  }                                                                                                                    // 107\n  // By default, we do trimStrings                                                                                     // 108\n  var trimStrings = true;                                                                                              // 109\n  if (formInfo.trimStrings === false) {                                                                                // 110\n    trimStrings = false;                                                                                               // 111\n  }                                                                                                                    // 112\n                                                                                                                       // 113\n  // Build doc from field values                                                                                       // 114\n  var doc = getFieldsValues(getAllFieldsInForm(template), ss);                                                         // 115\n                                                                                                                       // 116\n  // Expand the object                                                                                                 // 117\n  doc = AutoForm.Utility.expandObj(doc);                                                                               // 118\n                                                                                                                       // 119\n  // As array items are removed, gaps can appear in the numbering,                                                     // 120\n  // which results in arrays that have undefined items. Here we                                                        // 121\n  // remove any array items that are undefined.                                                                        // 122\n  AutoForm.Utility.compactArrays(doc);                                                                                 // 123\n                                                                                                                       // 124\n  // When all fields that comprise a sub-object are empty, we should unset                                             // 125\n  // the whole subobject and not complain about required fields in it. For example,                                    // 126\n  // if `profile.address` has several properties but they are all null or undefined,                                   // 127\n  // we will set `profile.address=null`. This ensures that we don't get incorrect validation                           // 128\n  // errors about required fields that are children of optional objects.                                               // 129\n  AutoForm.Utility.bubbleEmpty(doc, keepEmptyStrings);                                                                 // 130\n                                                                                                                       // 131\n  // Pass expanded doc through formToDoc hooks                                                                         // 132\n  var hookCtx = {                                                                                                      // 133\n    template: template,                                                                                                // 134\n    formId: formId                                                                                                     // 135\n  };                                                                                                                   // 136\n  var transforms = Hooks.getHooks(formId, 'formToDoc');                                                                // 137\n  _.each(transforms, function formValuesTransform(transform) {                                                         // 138\n    doc = transform.call(hookCtx, doc, ss, formId);                                                                    // 139\n  });                                                                                                                  // 140\n                                                                                                                       // 141\n  // We return doc, insertDoc, and updateDoc.                                                                          // 142\n  // For insertDoc, delete any properties that are null, undefined, or empty strings.                                  // 143\n  // For updateDoc, convert to modifier object with $set and $unset.                                                   // 144\n  // Do not add auto values to either.                                                                                 // 145\n  var result = {                                                                                                       // 146\n    insertDoc: ss.clean(AutoForm.Utility.cleanNulls(doc, false, keepEmptyStrings), {                                   // 147\n      isModifier: false,                                                                                               // 148\n      getAutoValues: false,                                                                                            // 149\n      filter: filter,                                                                                                  // 150\n      autoConvert: autoConvert,                                                                                        // 151\n      trimStrings: trimStrings                                                                                         // 152\n    }),                                                                                                                // 153\n    updateDoc: ss.clean(AutoForm.Utility.docToModifier(doc, keepEmptyStrings), {                                       // 154\n      isModifier: true,                                                                                                // 155\n      getAutoValues: false,                                                                                            // 156\n      filter: filter,                                                                                                  // 157\n      autoConvert: autoConvert,                                                                                        // 158\n      trimStrings: trimStrings                                                                                         // 159\n    })                                                                                                                 // 160\n  };                                                                                                                   // 161\n  return result;                                                                                                       // 162\n};                                                                                                                     // 163\n                                                                                                                       // 164\n/*                                                                                                                     // 165\n * Gets the value that should be shown/selected in the input. Returns                                                  // 166\n * a string, a boolean, or an array of strings. The value used,                                                        // 167\n * in order of preference, is one of:                                                                                  // 168\n * * The `value` attribute provided                                                                                    // 169\n * * The value that is set in the `doc` provided on the containing autoForm                                            // 170\n * * The `defaultValue` from the schema                                                                                // 171\n */                                                                                                                    // 172\ngetInputValue = function getInputValue(atts, value, mDoc, defaultValue, typeDefs) {                                    // 173\n  if (typeof value === \"undefined\") {                                                                                  // 174\n    // Get the value for this key in the current document                                                              // 175\n    if (mDoc) {                                                                                                        // 176\n      var valueInfo = mDoc.getInfoForKey(atts.name);                                                                   // 177\n      if (valueInfo) {                                                                                                 // 178\n        value = valueInfo.value;                                                                                       // 179\n      }                                                                                                                // 180\n    }                                                                                                                  // 181\n                                                                                                                       // 182\n    // Only if there is no current document, use the schema defaultValue                                               // 183\n    else {                                                                                                             // 184\n      value = defaultValue;                                                                                            // 185\n    }                                                                                                                  // 186\n  }                                                                                                                    // 187\n                                                                                                                       // 188\n  // Change null or undefined to an empty string                                                                       // 189\n  value = (value === null || value === void 0) ? '' : value;                                                           // 190\n                                                                                                                       // 191\n  // If the component expects the value to be an array, and it's not, make it one                                      // 192\n  if (typeDefs.valueIsArray && !_.isArray(value)) {                                                                    // 193\n    if (typeof value === \"string\") {                                                                                   // 194\n      value = value.split(',');                                                                                        // 195\n    } else {                                                                                                           // 196\n      value = [value];                                                                                                 // 197\n    }                                                                                                                  // 198\n  }                                                                                                                    // 199\n                                                                                                                       // 200\n  // At this point we have a value or an array of values.                                                              // 201\n  // Run through the components valueIn function if we have one.                                                       // 202\n  // It should then be in whatever format the component expects.                                                       // 203\n  if (typeof typeDefs.valueIn === \"function\") {                                                                        // 204\n    value = typeDefs.valueIn(value, atts);                                                                             // 205\n  }                                                                                                                    // 206\n                                                                                                                       // 207\n  return value;                                                                                                        // 208\n};                                                                                                                     // 209\n                                                                                                                       // 210\n/*                                                                                                                     // 211\n * Builds the data context that the input component will have.                                                         // 212\n */                                                                                                                    // 213\ngetInputData = function getInputData(defs, hash, value, label, submitType) {                                           // 214\n  var schemaType = defs.type;                                                                                          // 215\n                                                                                                                       // 216\n  /*                                                                                                                   // 217\n   * Get HTML attributes                                                                                               // 218\n   */                                                                                                                  // 219\n                                                                                                                       // 220\n  // We don't want to alter the original hash, so we clone it and                                                      // 221\n  // remove some stuff that should not be HTML attributes.                                                             // 222\n  var inputAtts = _.omit(hash,                                                                                         // 223\n          \"autoform\",                                                                                                  // 224\n          \"type\",                                                                                                      // 225\n          \"value\",                                                                                                     // 226\n          \"noselect\",                                                                                                  // 227\n          \"options\",                                                                                                   // 228\n          \"template\");                                                                                                 // 229\n                                                                                                                       // 230\n  // Add required if required                                                                                          // 231\n  if (typeof inputAtts.required === \"undefined\" && !defs.optional) {                                                   // 232\n    inputAtts.required = \"\";                                                                                           // 233\n  }                                                                                                                    // 234\n                                                                                                                       // 235\n  // Add disabled or readonly if the form has that submit type                                                         // 236\n  if (submitType === \"disabled\") {                                                                                     // 237\n    inputAtts.disabled = \"\";                                                                                           // 238\n  } else if (submitType === \"readonly\") {                                                                              // 239\n    inputAtts.readonly = \"\";                                                                                           // 240\n  }                                                                                                                    // 241\n                                                                                                                       // 242\n   // Add data-schema-key to every type of element                                                                     // 243\n  inputAtts['data-schema-key'] = inputAtts.name;                                                                       // 244\n                                                                                                                       // 245\n  // Set placeholder to label from schema if requested.                                                                // 246\n  // We check hash.placeholder instead of inputAtts.placeholder because                                                // 247\n  // we're setting inputAtts.placeholder, so it wouldn't be the same on                                                // 248\n  // subsequent reactive runs of this function.                                                                        // 249\n  if (hash.placeholder === \"schemaLabel\") {                                                                            // 250\n    inputAtts.placeholder = label;                                                                                     // 251\n  }                                                                                                                    // 252\n                                                                                                                       // 253\n  // To enable reactively toggling boolean attributes                                                                  // 254\n  // in a simple way, we add the attributes to the HTML                                                                // 255\n  // only if their value is `true`. That is, unlike in                                                                 // 256\n  // HTML, their mere presence does not matter.                                                                        // 257\n  _.each([\"disabled\", \"readonly\", \"checked\", \"required\", \"autofocus\"], function (booleanProp) {                        // 258\n    if (!_.has(hash, booleanProp)) {                                                                                   // 259\n      return;                                                                                                          // 260\n    }                                                                                                                  // 261\n                                                                                                                       // 262\n    // For historical reasons, we treat the string \"true\" and an empty string as `true`, too.                          // 263\n    // But an empty string value results in the cleanest rendered output for boolean props,                            // 264\n    // so we standardize as that.                                                                                      // 265\n    if (hash[booleanProp] === true || hash[booleanProp] === \"true\" || hash[booleanProp] === \"\") {                      // 266\n      inputAtts[booleanProp] = \"\";                                                                                     // 267\n    } else {                                                                                                           // 268\n      // If the value is anything else, we don't render it                                                             // 269\n      delete inputAtts[booleanProp];                                                                                   // 270\n    }                                                                                                                  // 271\n  });                                                                                                                  // 272\n                                                                                                                       // 273\n  /*                                                                                                                   // 274\n   * Get select options                                                                                                // 275\n   */                                                                                                                  // 276\n                                                                                                                       // 277\n  var selectOptions = hash.options;                                                                                    // 278\n                                                                                                                       // 279\n  // Handle options=\"allowed\"                                                                                          // 280\n  if (selectOptions === \"allowed\") {                                                                                   // 281\n    selectOptions = _.map(defs.allowedValues, function(v) {                                                            // 282\n      var label = v;                                                                                                   // 283\n      if (hash.capitalize && v.length > 0 && schemaType === String) {                                                  // 284\n        label = v.charAt(0).toUpperCase() + v.slice(1).toLowerCase();                                                  // 285\n      }                                                                                                                // 286\n                                                                                                                       // 287\n      return {label: label, value: v};                                                                                 // 288\n    });                                                                                                                // 289\n  }                                                                                                                    // 290\n  // If options are specified in the schema, they may be a function                                                    // 291\n  // that has not yet been evaluated.                                                                                  // 292\n  else if (typeof selectOptions === \"function\") {                                                                      // 293\n    selectOptions = selectOptions();                                                                                   // 294\n  }                                                                                                                    // 295\n  // Hashtable                                                                                                         // 296\n  if (_.isObject(selectOptions) && !_.isArray(selectOptions)) {                                                        // 297\n    selectOptions = _.map(selectOptions, function(v, k) {                                                              // 298\n      return {label: v, value: schemaType(k)};                                                                         // 299\n    });                                                                                                                // 300\n  }                                                                                                                    // 301\n                                                                                                                       // 302\n  /*                                                                                                                   // 303\n   * Return the context. This is the object that becomes `this` in the                                                 // 304\n   * input type template.                                                                                              // 305\n   */                                                                                                                  // 306\n                                                                                                                       // 307\n  return {                                                                                                             // 308\n    name: inputAtts.name,                                                                                              // 309\n    schemaType: schemaType,                                                                                            // 310\n    min: (typeof defs.min === \"function\") ? defs.min() : defs.min,                                                     // 311\n    max: (typeof defs.max === \"function\") ? defs.max() : defs.max,                                                     // 312\n    decimal: defs.decimal,                                                                                             // 313\n    value: value,                                                                                                      // 314\n    atts: inputAtts,                                                                                                   // 315\n    selectOptions: selectOptions                                                                                       // 316\n  };                                                                                                                   // 317\n};                                                                                                                     // 318\n                                                                                                                       // 319\nupdateTrackedFieldValue = function updateTrackedFieldValue(formId, key) {                                              // 320\n  formValues[formId] = formValues[formId] || {};                                                                       // 321\n  formValues[formId][key] = formValues[formId][key] || new Tracker.Dependency();                                       // 322\n  formValues[formId][key].changed();                                                                                   // 323\n};                                                                                                                     // 324\n                                                                                                                       // 325\nupdateAllTrackedFieldValues = function updateAllTrackedFieldValues(formId) {                                           // 326\n  _.each(formValues[formId], function (o, key) {                                                                       // 327\n    updateTrackedFieldValue(formId, key);                                                                              // 328\n  });                                                                                                                  // 329\n};                                                                                                                     // 330\n                                                                                                                       // 331\ngetAllFieldsInForm = function getAllFieldsInForm(template) {                                                           // 332\n  // Get all elements with `data-schema-key` attribute, unless disabled                                                // 333\n  return template.$(\"[data-schema-key]\").not(\"[disabled]\");                                                            // 334\n  // Exclude fields in sub-forms, since they will belong to a different AutoForm and schema.                           // 335\n  // TODO need some selector/filter that actually works correctly for excluding subforms                               // 336\n  // return template.$('[data-schema-key]').not(\"[disabled]\").not(template.$('form form [data-schema-key]'));          // 337\n};                                                                                                                     // 338\n                                                                                                                       // 339\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/autoform-api.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global AutoForm:true */                                                                                             // 1\n/* global formPreserve */                                                                                              // 2\n/* global Utility */                                                                                                   // 3\n/* global Hooks */                                                                                                     // 4\n/* global templatesById */                                                                                             // 5\n/* global deps */                                                                                                      // 6\n/* global globalDefaultTemplate:true */                                                                                // 7\n/* global defaultTypeTemplates:true */                                                                                 // 8\n/* global SimpleSchema */                                                                                              // 9\n/* global getFormValues */                                                                                             // 10\n/* global formValues */                                                                                                // 11\n/* global formData */                                                                                                  // 12\n/* global inputTypeDefinitions */                                                                                      // 13\n/* global _validateField */                                                                                            // 14\n/* global _validateForm */                                                                                             // 15\n/* global arrayTracker */                                                                                              // 16\n/* global getInputType */                                                                                              // 17\n/* global formDeps */                                                                                                  // 18\n                                                                                                                       // 19\n// This file defines the public, exported API                                                                          // 20\n                                                                                                                       // 21\nAutoForm = AutoForm || {}; //exported                                                                                  // 22\n                                                                                                                       // 23\nAutoForm.formPreserve = formPreserve;                                                                                  // 24\n                                                                                                                       // 25\nAutoForm.Utility = Utility;                                                                                            // 26\n                                                                                                                       // 27\n/**                                                                                                                    // 28\n * @method AutoForm.addHooks                                                                                           // 29\n * @public                                                                                                             // 30\n * @param {String[]|String|null} formIds Form `id` or array of form IDs to which these hooks apply. Specify `null` to add hooks that will run for every form.\n * @param {Object} hooks Hooks to add, where supported names are \"before\", \"after\", \"formToDoc\", \"docToForm\", \"onSubmit\", \"onSuccess\", and \"onError\".\n * @returns {undefined}                                                                                                // 33\n *                                                                                                                     // 34\n * Defines hooks to be used by one or more forms. Extends hooks lists if called multiple times for the same            // 35\n * form.                                                                                                               // 36\n */                                                                                                                    // 37\nAutoForm.addHooks = function autoFormAddHooks(formIds, hooks, replace) {                                               // 38\n  if (typeof formIds === \"string\") {                                                                                   // 39\n    formIds = [formIds];                                                                                               // 40\n  }                                                                                                                    // 41\n                                                                                                                       // 42\n  // If formIds is null, add global hooks                                                                              // 43\n  if (!formIds) {                                                                                                      // 44\n    Hooks.addHooksToList(Hooks.global, hooks, replace);                                                                // 45\n  } else {                                                                                                             // 46\n    _.each(formIds, function (formId) {                                                                                // 47\n                                                                                                                       // 48\n      // Init the hooks object if not done yet                                                                         // 49\n      Hooks.form[formId] = Hooks.form[formId] || {                                                                     // 50\n        before: {},                                                                                                    // 51\n        after: {},                                                                                                     // 52\n        formToDoc: [],                                                                                                 // 53\n        docToForm: [],                                                                                                 // 54\n        onSubmit: [],                                                                                                  // 55\n        onSuccess: [],                                                                                                 // 56\n        onError: [],                                                                                                   // 57\n        beginSubmit: [],                                                                                               // 58\n        endSubmit: []                                                                                                  // 59\n      };                                                                                                               // 60\n                                                                                                                       // 61\n      Hooks.addHooksToList(Hooks.form[formId], hooks, replace);                                                        // 62\n    });                                                                                                                // 63\n  }                                                                                                                    // 64\n};                                                                                                                     // 65\n                                                                                                                       // 66\n/**                                                                                                                    // 67\n * @method AutoForm.hooks                                                                                              // 68\n * @public                                                                                                             // 69\n * @param {Object} hooks                                                                                               // 70\n * @returns {undefined}                                                                                                // 71\n *                                                                                                                     // 72\n * Defines hooks by form id. Extends hooks lists if called multiple times for the same                                 // 73\n * form.                                                                                                               // 74\n */                                                                                                                    // 75\nAutoForm.hooks = function autoFormHooks(hooks, replace) {                                                              // 76\n  _.each(hooks, function(hooksObj, formId) {                                                                           // 77\n    AutoForm.addHooks(formId, hooksObj, replace);                                                                      // 78\n  });                                                                                                                  // 79\n};                                                                                                                     // 80\n                                                                                                                       // 81\n/**                                                                                                                    // 82\n * @method AutoForm.resetForm                                                                                          // 83\n * @public                                                                                                             // 84\n * @param {String} formId                                                                                              // 85\n * @param {TemplateInstance} [template] Looked up if not provided. Pass in for efficiency.                             // 86\n * @returns {undefined}                                                                                                // 87\n *                                                                                                                     // 88\n * Resets an autoform, including resetting validation errors. The same as clicking the reset button for an autoform.   // 89\n */                                                                                                                    // 90\nAutoForm.resetForm = function autoFormResetForm(formId, template) {                                                    // 91\n  template = template || templatesById[formId];                                                                        // 92\n                                                                                                                       // 93\n  if (template && template.view._domrange) {                                                                           // 94\n    template.$(\"form\")[0].reset();                                                                                     // 95\n  }                                                                                                                    // 96\n};                                                                                                                     // 97\n                                                                                                                       // 98\n/**                                                                                                                    // 99\n * @method AutoForm.setDefaultTemplate                                                                                 // 100\n * @public                                                                                                             // 101\n * @param {String} template                                                                                            // 102\n */                                                                                                                    // 103\nAutoForm.setDefaultTemplate = function autoFormSetDefaultTemplate(template) {                                          // 104\n  globalDefaultTemplate = template;                                                                                    // 105\n  deps.defaultTemplate.changed();                                                                                      // 106\n};                                                                                                                     // 107\n                                                                                                                       // 108\n/**                                                                                                                    // 109\n * @method AutoForm.getDefaultTemplate                                                                                 // 110\n * @public                                                                                                             // 111\n *                                                                                                                     // 112\n * Reactive.                                                                                                           // 113\n */                                                                                                                    // 114\nAutoForm.getDefaultTemplate = function autoFormGetDefaultTemplate() {                                                  // 115\n  deps.defaultTemplate.depend();                                                                                       // 116\n  return globalDefaultTemplate;                                                                                        // 117\n};                                                                                                                     // 118\n                                                                                                                       // 119\n/**                                                                                                                    // 120\n * @method AutoForm.setDefaultTemplateForType                                                                          // 121\n * @public                                                                                                             // 122\n * @param {String} type                                                                                                // 123\n * @param {String} template                                                                                            // 124\n */                                                                                                                    // 125\nAutoForm.setDefaultTemplateForType = function autoFormSetDefaultTemplateForType(type, template) {                      // 126\n  if (!deps.defaultTypeTemplates[type]) {                                                                              // 127\n    deps.defaultTypeTemplates[type] = new Tracker.Dependency();                                                        // 128\n  }                                                                                                                    // 129\n  if (template !== null && !Template[type + \"_\" + template]) {                                                         // 130\n    throw new Error(\"setDefaultTemplateForType can't set default template to \\\"\" + template + \"\\\" for type \\\"\" + type + \"\\\" because there is no defined template with the name \\\"\" + type + \"_\" + template + \"\\\"\");\n  }                                                                                                                    // 132\n  defaultTypeTemplates[type] = template;                                                                               // 133\n  deps.defaultTypeTemplates[type].changed();                                                                           // 134\n};                                                                                                                     // 135\n                                                                                                                       // 136\n/**                                                                                                                    // 137\n * @method AutoForm.getDefaultTemplateForType                                                                          // 138\n * @public                                                                                                             // 139\n * @param {String} type                                                                                                // 140\n * @return {String} Template name                                                                                      // 141\n *                                                                                                                     // 142\n * Reactive.                                                                                                           // 143\n */                                                                                                                    // 144\nAutoForm.getDefaultTemplateForType = function autoFormGetDefaultTemplateForType(type) {                                // 145\n  if (!deps.defaultTypeTemplates[type]) {                                                                              // 146\n    deps.defaultTypeTemplates[type] = new Tracker.Dependency();                                                        // 147\n  }                                                                                                                    // 148\n  deps.defaultTypeTemplates[type].depend();                                                                            // 149\n  return defaultTypeTemplates[type];                                                                                   // 150\n};                                                                                                                     // 151\n                                                                                                                       // 152\n/**                                                                                                                    // 153\n * @method AutoForm.getFormValues                                                                                      // 154\n * @public                                                                                                             // 155\n * @param {String} formId The `id` attribute of the `autoForm` you want current values for.                            // 156\n * @return {Object}                                                                                                    // 157\n *                                                                                                                     // 158\n * Returns an object representing the current values of all schema-based fields in the form.                           // 159\n * The returned object contains two properties, \"insertDoc\" and \"updateDoc\", which represent                           // 160\n * the field values as a normal object and as a MongoDB modifier, respectively.                                        // 161\n */                                                                                                                    // 162\nAutoForm.getFormValues = function autoFormGetFormValues(formId) {                                                      // 163\n  var template = templatesById[formId];                                                                                // 164\n  if (!template || !template.view._domrange) {                                                                         // 165\n    throw new Error(\"getFormValues: There is currently no autoForm template rendered for the form with id \" + formId); // 166\n  }                                                                                                                    // 167\n  // Get a reference to the SimpleSchema instance that should be used for                                              // 168\n  // determining what types we want back for each field.                                                               // 169\n  var context = template.data;                                                                                         // 170\n  var ss = AutoForm.Utility.getSimpleSchemaFromContext(context, formId);                                               // 171\n  return getFormValues(template, formId, ss);                                                                          // 172\n};                                                                                                                     // 173\n                                                                                                                       // 174\n/**                                                                                                                    // 175\n * @method AutoForm.getFieldValue                                                                                      // 176\n * @public                                                                                                             // 177\n * @param {String} formId The `id` attribute of the `autoForm` you want current values for.                            // 178\n * @param {String} fieldName The name of the field for which you want the current value.                               // 179\n * @return {Any}                                                                                                       // 180\n *                                                                                                                     // 181\n * Returns the value of the field (the value that would be used if the form were submitted right now).                 // 182\n * This is a reactive method that will rerun whenever the current value of the requested field changes.                // 183\n */                                                                                                                    // 184\nAutoForm.getFieldValue = function autoFormGetFieldValue(formId, fieldName) {                                           // 185\n  // reactive dependency                                                                                               // 186\n  formValues[formId] = formValues[formId] || {};                                                                       // 187\n  formValues[formId][fieldName] = formValues[formId][fieldName] || new Tracker.Dependency();                           // 188\n  formValues[formId][fieldName].depend();                                                                              // 189\n                                                                                                                       // 190\n  // find AutoForm template                                                                                            // 191\n  var template = templatesById[formId];                                                                                // 192\n  if (!template || !template.view._domrange) {                                                                         // 193\n    return;                                                                                                            // 194\n  }                                                                                                                    // 195\n                                                                                                                       // 196\n  // find AutoForm schema                                                                                              // 197\n  var data = formData[formId];                                                                                         // 198\n  // ss will be the schema for the `schema` attribute if present,                                                      // 199\n  // else the schema for the collection                                                                                // 200\n  var ss = data.ss;                                                                                                    // 201\n                                                                                                                       // 202\n  // get element reference                                                                                             // 203\n  var element = template.$('[data-schema-key=\"' + fieldName + '\"]')[0];                                                // 204\n                                                                                                                       // 205\n  return AutoForm.getInputValue(element, ss);                                                                          // 206\n};                                                                                                                     // 207\n                                                                                                                       // 208\n/**                                                                                                                    // 209\n * @method AutoForm.getInputTypeTemplateNameForElement                                                                 // 210\n * @public                                                                                                             // 211\n * @param {DOMElement} element The input DOM element, generated by an autoform input control                           // 212\n * @return {String}                                                                                                    // 213\n *                                                                                                                     // 214\n * Returns the name of the template used to render the element.                                                        // 215\n */                                                                                                                    // 216\nAutoForm.getInputTypeTemplateNameForElement = function autoFormGetInputTypeTemplateNameForElement(element) {           // 217\n  // get the enclosing view                                                                                            // 218\n  var view = Blaze.getView(element);                                                                                   // 219\n  // if the enclosing view is not a template, perhaps because                                                          // 220\n  // the template contains a block helper like if, with, each,                                                         // 221\n  // then look up the view chain until we arrive at a template                                                         // 222\n  while (view && view.name.slice(0, 9) !== \"Template.\") {                                                              // 223\n    view = view.parentView;                                                                                            // 224\n  }                                                                                                                    // 225\n                                                                                                                       // 226\n  if (!view) {                                                                                                         // 227\n    throw new Error(\"The element does not appear to be in a template view\");                                           // 228\n  }                                                                                                                    // 229\n                                                                                                                       // 230\n  // View names have \"Template.\" at the beginning so we slice that off.                                                // 231\n  return view.name.slice(9);                                                                                           // 232\n};                                                                                                                     // 233\n                                                                                                                       // 234\n/**                                                                                                                    // 235\n * @method AutoForm.getInputValue                                                                                      // 236\n * @public                                                                                                             // 237\n * @param {DOMElement} element The input DOM element, generated by an autoform input control, which must have a `data-schema-key` attribute set to the correct schema key name.\n * @param {SimpleSchema} [ss] Provide the SimpleSchema instance if you already have it.                                // 239\n * @return {Any}                                                                                                       // 240\n *                                                                                                                     // 241\n * Returns the value of the field (the value that would be used if the form were submitted right now).                 // 242\n * Unlike `AutoForm.getFieldValue`, this function is not reactive.                                                     // 243\n */                                                                                                                    // 244\nAutoForm.getInputValue = function autoFormGetInputValue(element, ss) {                                                 // 245\n  var field, fieldName, fieldType, arrayItemFieldType, val, typeDef, inputTypeTemplate, dataContext, autoConvert;      // 246\n                                                                                                                       // 247\n  dataContext = Blaze.getData(element);                                                                                // 248\n  if (dataContext && dataContext.atts) {                                                                               // 249\n    autoConvert = dataContext.atts.autoConvert;                                                                        // 250\n  }                                                                                                                    // 251\n                                                                                                                       // 252\n  // Get jQuery field reference                                                                                        // 253\n  field = $(element);                                                                                                  // 254\n                                                                                                                       // 255\n  // Get the field/schema key name                                                                                     // 256\n  fieldName = field.attr(\"data-schema-key\");                                                                           // 257\n                                                                                                                       // 258\n  // If we have a schema, we can autoconvert to the correct data type                                                  // 259\n  if (ss) {                                                                                                            // 260\n    fieldType = ss.schema(fieldName).type;                                                                             // 261\n  }                                                                                                                    // 262\n                                                                                                                       // 263\n  // Get the name of the input type template used to render the input element                                          // 264\n  inputTypeTemplate = AutoForm.getInputTypeTemplateNameForElement(element);                                            // 265\n                                                                                                                       // 266\n  // Slice off the potential theme template, after the underscore.                                                     // 267\n  inputTypeTemplate = inputTypeTemplate.split(\"_\")[0];                                                                 // 268\n                                                                                                                       // 269\n  // Figure out what registered input type was used to render this element                                             // 270\n  typeDef = _.where(inputTypeDefinitions, {template: inputTypeTemplate})[0];                                           // 271\n                                                                                                                       // 272\n  // If field has a \"data-null-value\" attribute, value should always be null                                           // 273\n  if (field.attr(\"data-null-value\") !== void 0) {                                                                      // 274\n    val = null;                                                                                                        // 275\n  }                                                                                                                    // 276\n  // Otherwise get the field's value using the input type's `valueOut` function if provided                            // 277\n  else if (typeDef && typeDef.valueOut) {                                                                              // 278\n    val = typeDef.valueOut.call(field);                                                                                // 279\n  }                                                                                                                    // 280\n  // Otherwise get the field's value in a default way                                                                  // 281\n  else {                                                                                                               // 282\n    val = field.val();                                                                                                 // 283\n  }                                                                                                                    // 284\n                                                                                                                       // 285\n  // run through input's type converter if provided                                                                    // 286\n  if (val !== void 0 && autoConvert !== false && typeDef && typeDef.valueConverters && fieldType) {                    // 287\n    var converterFunc;                                                                                                 // 288\n    if (fieldType === String) {                                                                                        // 289\n      converterFunc = typeDef.valueConverters.string;                                                                  // 290\n    } else if (fieldType === Number) {                                                                                 // 291\n      converterFunc = typeDef.valueConverters.number;                                                                  // 292\n    } else if (fieldType === Boolean) {                                                                                // 293\n      converterFunc = typeDef.valueConverters.boolean;                                                                 // 294\n    } else if (fieldType === Date) {                                                                                   // 295\n      converterFunc = typeDef.valueConverters.date;                                                                    // 296\n    } else if (fieldType === Array) {                                                                                  // 297\n      arrayItemFieldType = ss.schema(fieldName + \".$\").type;                                                           // 298\n      if (arrayItemFieldType === String) {                                                                             // 299\n        converterFunc = typeDef.valueConverters.stringArray;                                                           // 300\n      } else if (arrayItemFieldType === Number) {                                                                      // 301\n        converterFunc = typeDef.valueConverters.numberArray;                                                           // 302\n      } else if (arrayItemFieldType === Boolean) {                                                                     // 303\n        converterFunc = typeDef.valueConverters.booleanArray;                                                          // 304\n      } else if (arrayItemFieldType === Date) {                                                                        // 305\n        converterFunc = typeDef.valueConverters.dateArray;                                                             // 306\n      }                                                                                                                // 307\n    }                                                                                                                  // 308\n                                                                                                                       // 309\n    if (typeof converterFunc === \"function\") {                                                                         // 310\n      val = converterFunc.call(field, val);                                                                            // 311\n    }                                                                                                                  // 312\n  }                                                                                                                    // 313\n                                                                                                                       // 314\n  return val;                                                                                                          // 315\n};                                                                                                                     // 316\n                                                                                                                       // 317\n/**                                                                                                                    // 318\n * @method AutoForm.addInputType                                                                                       // 319\n * @public                                                                                                             // 320\n * @param {String} name The type string that this definition is for.                                                   // 321\n * @param {Object} definition Defines how the input type should be rendered.                                           // 322\n * @param {String} definition.componentName The component name. A template with the name <componentName>_bootstrap3, and potentially others, must be defined.\n * @return {undefined}                                                                                                 // 324\n *                                                                                                                     // 325\n * Use this method to add custom input components.                                                                     // 326\n */                                                                                                                    // 327\nAutoForm.addInputType = function afAddInputType(name, definition) {                                                    // 328\n  var obj = {};                                                                                                        // 329\n  obj[name] = definition;                                                                                              // 330\n  _.extend(inputTypeDefinitions, obj);                                                                                 // 331\n};                                                                                                                     // 332\n                                                                                                                       // 333\n/**                                                                                                                    // 334\n * @method AutoForm.validateField                                                                                      // 335\n * @public                                                                                                             // 336\n * @param {String} formId The `id` attribute of the `autoForm` you want to validate.                                   // 337\n * @param {String} fieldName The name of the field within the `autoForm` you want to validate.                         // 338\n * @param {Boolean} [skipEmpty=false] Set to `true` to skip validation if the field has no value. Useful for preventing `required` errors in form fields that the user has not yet filled out.\n * @return {Boolean} Is it valid?                                                                                      // 340\n *                                                                                                                     // 341\n * In addition to returning a boolean that indicates whether the field is currently valid,                             // 342\n * this method causes the reactive validation messages to appear.                                                      // 343\n */                                                                                                                    // 344\nAutoForm.validateField = function autoFormValidateField(formId, fieldName, skipEmpty) {                                // 345\n  var template = templatesById[formId];                                                                                // 346\n  if (!template || !template.view._domrange) {                                                                         // 347\n    throw new Error(\"validateField: There is currently no autoForm template rendered for the form with id \" + formId); // 348\n  }                                                                                                                    // 349\n                                                                                                                       // 350\n  return _validateField(fieldName, template, skipEmpty, false);                                                        // 351\n};                                                                                                                     // 352\n                                                                                                                       // 353\n/**                                                                                                                    // 354\n * @method AutoForm.validateForm                                                                                       // 355\n * @public                                                                                                             // 356\n * @param {String} formId The `id` attribute of the `autoForm` you want to validate.                                   // 357\n * @return {Boolean} Is it valid?                                                                                      // 358\n *                                                                                                                     // 359\n * In addition to returning a boolean that indicates whether the form is currently valid,                              // 360\n * this method causes the reactive validation messages to appear.                                                      // 361\n */                                                                                                                    // 362\nAutoForm.validateForm = function autoFormValidateForm(formId) {                                                        // 363\n  // Gather all form values                                                                                            // 364\n  var formDocs = AutoForm.getFormValues(formId);                                                                       // 365\n                                                                                                                       // 366\n  return _validateForm(formId, formData[formId], formDocs);                                                            // 367\n};                                                                                                                     // 368\n                                                                                                                       // 369\n/**                                                                                                                    // 370\n * @method AutoForm.getValidationContext                                                                               // 371\n * @public                                                                                                             // 372\n * @param {String} formId The `id` attribute of the `autoForm` for which you want the validation context               // 373\n * @return {SimpleSchemaValidationContext} The SimpleSchema validation context object.                                 // 374\n *                                                                                                                     // 375\n * Use this method to get the validation context, which can be used to check                                           // 376\n * the current invalid fields, manually invalidate fields, etc.                                                        // 377\n */                                                                                                                    // 378\nAutoForm.getValidationContext = function autoFormGetValidationContext(formId) {                                        // 379\n  var data = formData[formId];                                                                                         // 380\n  // ss will be the schema for the `schema` attribute if present,                                                      // 381\n  // else the schema for the collection                                                                                // 382\n  var ss = data.ss;                                                                                                    // 383\n  return ss.namedContext(formId);                                                                                      // 384\n};                                                                                                                     // 385\n                                                                                                                       // 386\n/**                                                                                                                    // 387\n * @method AutoForm.find                                                                                               // 388\n * @public                                                                                                             // 389\n * @return {Object} The data context for the closest autoform.                                                         // 390\n *                                                                                                                     // 391\n * Call this method from a UI helper to get the data context for the closest autoform. Always returns the context or throws an error.\n */                                                                                                                    // 393\nAutoForm.find = function autoFormFind(type) {                                                                          // 394\n  var n = 0, af;                                                                                                       // 395\n  do {                                                                                                                 // 396\n    af = Template.parentData(n++);                                                                                     // 397\n  } while (af && !af._af);                                                                                             // 398\n  if (!af || !af._af) {                                                                                                // 399\n    throw new Error((type || \"AutoForm.find\") + \" must be used within an autoForm block\");                             // 400\n  }                                                                                                                    // 401\n  return af._af;                                                                                                       // 402\n};                                                                                                                     // 403\n                                                                                                                       // 404\n/**                                                                                                                    // 405\n * @method AutoForm.findAttribute                                                                                      // 406\n * @param {String} attrName Attribute name                                                                             // 407\n * @public                                                                                                             // 408\n * @return {Any|undefined} Searches for the given attribute, looking up the parent context tree until the closest autoform is reached.\n *                                                                                                                     // 410\n * Call this method from a UI helper. Might return undefined.                                                          // 411\n */                                                                                                                    // 412\nAutoForm.findAttribute = function autoFormFindAttribute(attrName) {                                                    // 413\n  var n = 0, af, val, stopAt = -1;                                                                                     // 414\n  // we go one level past _af so that we get the original autoForm or quickForm attributes, too                        // 415\n  do {                                                                                                                 // 416\n    af = Template.parentData(n++);                                                                                     // 417\n    if (af && af.atts && af.atts[attrName] !== void 0) {                                                               // 418\n      val = af.atts[attrName];                                                                                         // 419\n    } else if (af && af[attrName] !== void 0) {                                                                        // 420\n      val = af[attrName];                                                                                              // 421\n    }                                                                                                                  // 422\n    if (af && af._af) {                                                                                                // 423\n      stopAt = n + 1;                                                                                                  // 424\n    }                                                                                                                  // 425\n  } while (af && stopAt < n && val === void 0);                                                                        // 426\n  return val;                                                                                                          // 427\n};                                                                                                                     // 428\n                                                                                                                       // 429\n/**                                                                                                                    // 430\n * @method AutoForm.findAttributesWithPrefix                                                                           // 431\n * @param {String} prefix Attribute prefix                                                                             // 432\n * @public                                                                                                             // 433\n * @return {Object} An object containing all of the found attributes and their values, with the prefix removed from the keys.\n *                                                                                                                     // 435\n * Call this method from a UI helper. Searches for attributes that start with the given prefix, looking up the parent context tree until the closest autoform is reached.\n */                                                                                                                    // 437\nAutoForm.findAttributesWithPrefix = function autoFormFindAttributesWithPrefix(prefix) {                                // 438\n  var n = 0, af, searchObj, stopAt = -1, obj = {};                                                                     // 439\n  // we go one level past _af so that we get the original autoForm or quickForm attributes, too                        // 440\n  do {                                                                                                                 // 441\n    af = Template.parentData(n++);                                                                                     // 442\n    if (af) {                                                                                                          // 443\n      if (af.atts) {                                                                                                   // 444\n        searchObj = af.atts;                                                                                           // 445\n      } else {                                                                                                         // 446\n        searchObj = af;                                                                                                // 447\n      }                                                                                                                // 448\n      if (_.isObject(searchObj)) {                                                                                     // 449\n        _.each(searchObj, function (v, k) {                                                                            // 450\n          if (k.indexOf(prefix) === 0) {                                                                               // 451\n            obj[k.slice(prefix.length)] = v;                                                                           // 452\n          }                                                                                                            // 453\n        });                                                                                                            // 454\n      }                                                                                                                // 455\n      if (af._af) {                                                                                                    // 456\n        stopAt = n + 1;                                                                                                // 457\n      }                                                                                                                // 458\n    }                                                                                                                  // 459\n  } while (af && stopAt < n);                                                                                          // 460\n  return obj;                                                                                                          // 461\n};                                                                                                                     // 462\n                                                                                                                       // 463\n/**                                                                                                                    // 464\n * @method AutoForm.debug                                                                                              // 465\n * @public                                                                                                             // 466\n *                                                                                                                     // 467\n * Call this method in client code while developing to turn on extra logging.                                          // 468\n */                                                                                                                    // 469\nAutoForm.debug = function autoFormDebug() {                                                                            // 470\n  SimpleSchema.debug = true;                                                                                           // 471\n  AutoForm._debug = true;                                                                                              // 472\n  AutoForm.addHooks(null, {                                                                                            // 473\n    onError: function (operation, error) {                                                                             // 474\n      console.log(\"Error in \" + this.formId, operation, error);                                                        // 475\n    }                                                                                                                  // 476\n  });                                                                                                                  // 477\n};                                                                                                                     // 478\n                                                                                                                       // 479\n/**                                                                                                                    // 480\n * @property AutoForm.arrayTracker                                                                                     // 481\n * @public                                                                                                             // 482\n */                                                                                                                    // 483\nAutoForm.arrayTracker = arrayTracker;                                                                                  // 484\n                                                                                                                       // 485\n/**                                                                                                                    // 486\n * @method AutoForm.getInputType                                                                                       // 487\n * @param {Object} atts The attributes provided to afFieldInput.                                                       // 488\n * @public                                                                                                             // 489\n * @return {String} The input type. Most are the same as the `type` attributes for HTML input elements, but some are special strings that autoform interprets.\n *                                                                                                                     // 491\n * Call this method from a UI helper to get the type string for the input control.                                     // 492\n */                                                                                                                    // 493\nAutoForm.getInputType = getInputType;                                                                                  // 494\n                                                                                                                       // 495\n/**                                                                                                                    // 496\n * @method AutoForm.getSchemaForField                                                                                  // 497\n * @public                                                                                                             // 498\n * @param {String} name The field name attribute / schema key.                                                         // 499\n * @param {Object} [autoform] The autoform context. Optionally pass this if you've already retrieved it using AutoForm.find as a performance enhancement.\n * @return {Object}                                                                                                    // 501\n *                                                                                                                     // 502\n * Call this method from a UI helper to get the field definitions based on the schema used by the closest containing autoForm.\n * Always throws an error or returns the schema object.                                                                // 504\n */                                                                                                                    // 505\nAutoForm.getSchemaForField = function autoFormGetSchemaForField(name, autoform) {                                      // 506\n  var ss;                                                                                                              // 507\n  if (autoform) {                                                                                                      // 508\n    ss = autoform.ss;                                                                                                  // 509\n  }                                                                                                                    // 510\n  if (!ss) {                                                                                                           // 511\n    ss = AutoForm.find().ss;                                                                                           // 512\n  }                                                                                                                    // 513\n  return AutoForm.Utility.getDefs(ss, name);                                                                           // 514\n};                                                                                                                     // 515\n                                                                                                                       // 516\n/**                                                                                                                    // 517\n * @method AutoForm.invalidateFormContext                                                                              // 518\n * @public                                                                                                             // 519\n * @param {String} formId The form ID.                                                                                 // 520\n * @return {undefined}                                                                                                 // 521\n *                                                                                                                     // 522\n * Call this to force invalidate the form context, such as when you're changing the `doc`                              // 523\n * and it does not react by itself.                                                                                    // 524\n */                                                                                                                    // 525\nAutoForm.invalidateFormContext = function autoFormInvalidateFormContext(formId) {                                      // 526\n  formDeps[formId] = formDeps[formId] || new Tracker.Dependency();                                                     // 527\n  formDeps[formId].changed();                                                                                          // 528\n};                                                                                                                     // 529\n                                                                                                                       // 530\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/boolean-checkbox/template.boolean-checkbox.js                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afCheckbox\");                                                                                    // 2\nTemplate[\"afCheckbox\"] = new Template(\"Template.afCheckbox\", (function() {                                             // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                                   // 5\n    type: \"checkbox\",                                                                                                  // 6\n    value: \"true\"                                                                                                      // 7\n  }, function() {                                                                                                      // 8\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 9\n  })), \" \", Blaze.View(function() {                                                                                    // 10\n    return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                          // 11\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                    // 12\n    }));                                                                                                               // 13\n  })));                                                                                                                // 14\n}));                                                                                                                   // 15\n                                                                                                                       // 16\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/boolean-checkbox/boolean-checkbox.js                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"boolean-checkbox\", {                                                                            // 1\n  template: \"afCheckbox\",                                                                                              // 2\n  valueOut: function () {                                                                                              // 3\n    return !!this.is(\":checked\");                                                                                      // 4\n  },                                                                                                                   // 5\n  valueConverters: {                                                                                                   // 6\n    \"string\": function (val) {                                                                                         // 7\n      if (val === true) {                                                                                              // 8\n        return \"TRUE\";                                                                                                 // 9\n      } else if (val === false) {                                                                                      // 10\n        return \"FALSE\";                                                                                                // 11\n      }                                                                                                                // 12\n      return val;                                                                                                      // 13\n    },                                                                                                                 // 14\n    \"stringArray\": function (val) {                                                                                    // 15\n      if (val === true) {                                                                                              // 16\n        return [\"TRUE\"];                                                                                               // 17\n      } else if (val === false) {                                                                                      // 18\n        return [\"FALSE\"];                                                                                              // 19\n      }                                                                                                                // 20\n      return val;                                                                                                      // 21\n    },                                                                                                                 // 22\n    \"number\": function (val) {                                                                                         // 23\n      if (val === true) {                                                                                              // 24\n        return 1;                                                                                                      // 25\n      } else if (val === false) {                                                                                      // 26\n        return 0;                                                                                                      // 27\n      }                                                                                                                // 28\n      return val;                                                                                                      // 29\n    },                                                                                                                 // 30\n    \"numberArray\": function (val) {                                                                                    // 31\n      if (val === true) {                                                                                              // 32\n        return [1];                                                                                                    // 33\n      } else if (val === false) {                                                                                      // 34\n        return [0];                                                                                                    // 35\n      }                                                                                                                // 36\n      return val;                                                                                                      // 37\n    }                                                                                                                  // 38\n  },                                                                                                                   // 39\n  contextAdjust: function (context) {                                                                                  // 40\n    if (context.value === true) {                                                                                      // 41\n      context.atts.checked = \"\";                                                                                       // 42\n    }                                                                                                                  // 43\n    //don't add required attribute to checkboxes because some browsers assume that to mean that it must be checked, which is not what we mean by \"required\"\n    delete context.atts.required;                                                                                      // 45\n    return context;                                                                                                    // 46\n  }                                                                                                                    // 47\n});                                                                                                                    // 48\n                                                                                                                       // 49\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/boolean-radios/template.boolean-radios.js                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afBooleanRadioGroup\");                                                                           // 2\nTemplate[\"afBooleanRadioGroup\"] = new Template(\"Template.afBooleanRadioGroup\", (function() {                           // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.Attrs(function() {                                                                              // 5\n    return Spacebars.attrMustache(view.lookup(\"dsk\"));                                                                 // 6\n  }), \"\\n    \", HTML.DIV(\"\\n      \", HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                // 7\n    type: \"radio\",                                                                                                     // 8\n    value: \"false\",                                                                                                    // 9\n    name: function() {                                                                                                 // 10\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"name\"));                                              // 11\n    }                                                                                                                  // 12\n  }, function() {                                                                                                      // 13\n    return Spacebars.attrMustache(view.lookup(\"falseAtts\"));                                                           // 14\n  })), \" \", Spacebars.With(function() {                                                                                // 15\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"falseLabel\"));                                      // 16\n  }, function() {                                                                                                      // 17\n    return Blaze.View(function() {                                                                                     // 18\n      return Spacebars.mustache(view.lookup(\".\"));                                                                     // 19\n    });                                                                                                                // 20\n  }, function() {                                                                                                      // 21\n    return \"False\";                                                                                                    // 22\n  })), \"\\n    \"), \"\\n    \", HTML.DIV(\"\\n      \", HTML.LABEL(HTML.INPUT(HTML.Attrs({                                    // 23\n    type: \"radio\",                                                                                                     // 24\n    value: \"true\",                                                                                                     // 25\n    name: function() {                                                                                                 // 26\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"name\"));                                              // 27\n    }                                                                                                                  // 28\n  }, function() {                                                                                                      // 29\n    return Spacebars.attrMustache(view.lookup(\"trueAtts\"));                                                            // 30\n  })), \" \", Spacebars.With(function() {                                                                                // 31\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"trueLabel\"));                                       // 32\n  }, function() {                                                                                                      // 33\n    return Blaze.View(function() {                                                                                     // 34\n      return Spacebars.mustache(view.lookup(\".\"));                                                                     // 35\n    });                                                                                                                // 36\n  }, function() {                                                                                                      // 37\n    return \"True\";                                                                                                     // 38\n  })), \"\\n    \"), \"\\n  \");                                                                                             // 39\n}));                                                                                                                   // 40\n                                                                                                                       // 41\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/boolean-radios/boolean-radios.js                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"boolean-radios\", {                                                                              // 1\n  template: \"afBooleanRadioGroup\",                                                                                     // 2\n  valueOut: function () {                                                                                              // 3\n    if (this.find('input[value=false]').is(\":checked\")) {                                                              // 4\n      return false;                                                                                                    // 5\n    } else if (this.find('input[value=true]').is(\":checked\")) {                                                        // 6\n      return true;                                                                                                     // 7\n    }                                                                                                                  // 8\n  },                                                                                                                   // 9\n  valueConverters: {                                                                                                   // 10\n    \"string\": function (val) {                                                                                         // 11\n      if (val === true) {                                                                                              // 12\n        return \"TRUE\";                                                                                                 // 13\n      } else if (val === false) {                                                                                      // 14\n        return \"FALSE\";                                                                                                // 15\n      }                                                                                                                // 16\n      return val;                                                                                                      // 17\n    },                                                                                                                 // 18\n    \"stringArray\": function (val) {                                                                                    // 19\n      if (val === true) {                                                                                              // 20\n        return [\"TRUE\"];                                                                                               // 21\n      } else if (val === false) {                                                                                      // 22\n        return [\"FALSE\"];                                                                                              // 23\n      }                                                                                                                // 24\n      return val;                                                                                                      // 25\n    },                                                                                                                 // 26\n    \"number\": function (val) {                                                                                         // 27\n      if (val === true) {                                                                                              // 28\n        return 1;                                                                                                      // 29\n      } else if (val === false) {                                                                                      // 30\n        return 0;                                                                                                      // 31\n      }                                                                                                                // 32\n      return val;                                                                                                      // 33\n    },                                                                                                                 // 34\n    \"numberArray\": function (val) {                                                                                    // 35\n      if (val === true) {                                                                                              // 36\n        return [1];                                                                                                    // 37\n      } else if (val === false) {                                                                                      // 38\n        return [0];                                                                                                    // 39\n      }                                                                                                                // 40\n      return val;                                                                                                      // 41\n    }                                                                                                                  // 42\n  }                                                                                                                    // 43\n});                                                                                                                    // 44\n                                                                                                                       // 45\nTemplate[\"afBooleanRadioGroup\"].helpers({                                                                              // 46\n  falseAtts: function falseAtts() {                                                                                    // 47\n    var atts = _.omit(this.atts, 'trueLabel', 'falseLabel', 'data-schema-key');                                        // 48\n    if (this.value === false) {                                                                                        // 49\n      atts.checked = \"\";                                                                                               // 50\n    }                                                                                                                  // 51\n    return atts;                                                                                                       // 52\n  },                                                                                                                   // 53\n  trueAtts: function trueAtts() {                                                                                      // 54\n    var atts = _.omit(this.atts, 'trueLabel', 'falseLabel', 'data-schema-key');                                        // 55\n    if (this.value === true) {                                                                                         // 56\n      atts.checked = \"\";                                                                                               // 57\n    }                                                                                                                  // 58\n    return atts;                                                                                                       // 59\n  },                                                                                                                   // 60\n  dsk: function () {                                                                                                   // 61\n    return {'data-schema-key': this.atts['data-schema-key']};                                                          // 62\n  }                                                                                                                    // 63\n});                                                                                                                    // 64\n                                                                                                                       // 65\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/boolean-select/template.boolean-select.js                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afBooleanSelect\");                                                                               // 2\nTemplate[\"afBooleanSelect\"] = new Template(\"Template.afBooleanSelect\", (function() {                                   // 3\n  var view = this;                                                                                                     // 4\n  return HTML.SELECT(HTML.Attrs(function() {                                                                           // 5\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 6\n  }), \"\\n    \", Blaze.Each(function() {                                                                                // 7\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 8\n  }, function() {                                                                                                      // 9\n    return [ \"\\n    \", HTML.OPTION(HTML.Attrs(function() {                                                             // 10\n      return Spacebars.attrMustache(view.lookup(\"optionAtts\"));                                                        // 11\n    }), Blaze.View(function() {                                                                                        // 12\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                             // 13\n    })), \"\\n    \" ];                                                                                                   // 14\n  }), \"\\n  \");                                                                                                         // 15\n}));                                                                                                                   // 16\n                                                                                                                       // 17\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/boolean-select/boolean-select.js                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"boolean-select\", {                                                                              // 1\n  template: \"afBooleanSelect\",                                                                                         // 2\n  valueOut: function () {                                                                                              // 3\n    var val = this.val();                                                                                              // 4\n    if (val === \"true\") {                                                                                              // 5\n      return true;                                                                                                     // 6\n    } else if (val === \"false\") {                                                                                      // 7\n      return false;                                                                                                    // 8\n    }                                                                                                                  // 9\n  },                                                                                                                   // 10\n  valueConverters: {                                                                                                   // 11\n    \"string\": function (val) {                                                                                         // 12\n      if (val === true) {                                                                                              // 13\n        return \"TRUE\";                                                                                                 // 14\n      } else if (val === false) {                                                                                      // 15\n        return \"FALSE\";                                                                                                // 16\n      }                                                                                                                // 17\n      return val;                                                                                                      // 18\n    },                                                                                                                 // 19\n    \"stringArray\": function (val) {                                                                                    // 20\n      if (val === true) {                                                                                              // 21\n        return [\"TRUE\"];                                                                                               // 22\n      } else if (val === false) {                                                                                      // 23\n        return [\"FALSE\"];                                                                                              // 24\n      }                                                                                                                // 25\n      return val;                                                                                                      // 26\n    },                                                                                                                 // 27\n    \"number\": function (val) {                                                                                         // 28\n      if (val === true) {                                                                                              // 29\n        return 1;                                                                                                      // 30\n      } else if (val === false) {                                                                                      // 31\n        return 0;                                                                                                      // 32\n      }                                                                                                                // 33\n      return val;                                                                                                      // 34\n    },                                                                                                                 // 35\n    \"numberArray\": function (val) {                                                                                    // 36\n      if (val === true) {                                                                                              // 37\n        return [1];                                                                                                    // 38\n      } else if (val === false) {                                                                                      // 39\n        return [0];                                                                                                    // 40\n      }                                                                                                                // 41\n      return val;                                                                                                      // 42\n    }                                                                                                                  // 43\n  },                                                                                                                   // 44\n  contextAdjust: function (context) {                                                                                  // 45\n    var atts = _.omit(context.atts, 'trueLabel', 'falseLabel', 'firstOption');                                         // 46\n                                                                                                                       // 47\n    // build items list                                                                                                // 48\n    context.items = [                                                                                                  // 49\n      {                                                                                                                // 50\n        name: context.name,                                                                                            // 51\n        value: \"\",                                                                                                     // 52\n        // _id must be included because it is a special property that                                                  // 53\n        // #each uses to track unique list items when adding and removing them                                         // 54\n        // See https://github.com/meteor/meteor/issues/2174                                                            // 55\n        _id: \"\",                                                                                                       // 56\n        selected: (context.value !== false && context.value !== true),                                                 // 57\n        label: context.atts.firstOption || \"(Select One)\",                                                             // 58\n        atts: atts                                                                                                     // 59\n      },                                                                                                               // 60\n      {                                                                                                                // 61\n        name: context.name,                                                                                            // 62\n        value: \"false\",                                                                                                // 63\n        // _id must be included because it is a special property that                                                  // 64\n        // #each uses to track unique list items when adding and removing them                                         // 65\n        // See https://github.com/meteor/meteor/issues/2174                                                            // 66\n        _id: \"false\",                                                                                                  // 67\n        selected: (context.value === false),                                                                           // 68\n        label: context.atts.falseLabel || \"False\",                                                                     // 69\n        atts: atts                                                                                                     // 70\n      },                                                                                                               // 71\n      {                                                                                                                // 72\n        name: context.name,                                                                                            // 73\n        value: \"true\",                                                                                                 // 74\n        // _id must be included because it is a special property that                                                  // 75\n        // #each uses to track unique list items when adding and removing them                                         // 76\n        // See https://github.com/meteor/meteor/issues/2174                                                            // 77\n        _id: \"true\",                                                                                                   // 78\n        selected: (context.value === true),                                                                            // 79\n        label: context.atts.trueLabel || \"True\",                                                                       // 80\n        atts: atts                                                                                                     // 81\n      }                                                                                                                // 82\n    ];                                                                                                                 // 83\n                                                                                                                       // 84\n    return context;                                                                                                    // 85\n  }                                                                                                                    // 86\n});                                                                                                                    // 87\n                                                                                                                       // 88\nTemplate[\"afBooleanSelect\"].helpers({                                                                                  // 89\n  optionAtts: function afSelectOptionAtts() {                                                                          // 90\n    var item = this;                                                                                                   // 91\n    var atts = {                                                                                                       // 92\n      value: item.value                                                                                                // 93\n    };                                                                                                                 // 94\n    if (item.selected) {                                                                                               // 95\n      atts.selected = \"\";                                                                                              // 96\n    }                                                                                                                  // 97\n    return atts;                                                                                                       // 98\n  }                                                                                                                    // 99\n});                                                                                                                    // 100\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/button/template.button.js                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputButton\");                                                                                 // 2\nTemplate[\"afInputButton\"] = new Template(\"Template.afInputButton\", (function() {                                       // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"button\",                                                                                                    // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/button/button.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"button\", {                                                                                      // 1\n  template: \"afInputButton\"                                                                                            // 2\n});                                                                                                                    // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/color/template.color.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputColor\");                                                                                  // 2\nTemplate[\"afInputColor\"] = new Template(\"Template.afInputColor\", (function() {                                         // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"color\",                                                                                                     // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/color/color.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"color\", {                                                                                       // 1\n  template: \"afInputColor\"                                                                                             // 2\n});                                                                                                                    // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/contenteditable/template.contenteditable.js                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afContenteditable\");                                                                             // 2\nTemplate[\"afContenteditable\"] = new Template(\"Template.afContenteditable\", (function() {                               // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.Attrs({                                                                                         // 5\n    contenteditable: \"true\"                                                                                            // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 8\n  }), Blaze.View(function() {                                                                                          // 9\n    return Spacebars.makeRaw(Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\")));                            // 10\n  }));                                                                                                                 // 11\n}));                                                                                                                   // 12\n                                                                                                                       // 13\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/contenteditable/contenteditable.js                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"contenteditable\", {                                                                             // 1\n  template: \"afContenteditable\",                                                                                       // 2\n  valueOut: function () {                                                                                              // 3\n    return this.html();                                                                                                // 4\n  },                                                                                                                   // 5\n  contextAdjust: function (context) {                                                                                  // 6\n    if (typeof context.atts['data-maxlength'] === \"undefined\" && typeof context.max === \"number\") {                    // 7\n      context.atts['data-maxlength'] = context.max;                                                                    // 8\n    }                                                                                                                  // 9\n    return context;                                                                                                    // 10\n  }                                                                                                                    // 11\n});                                                                                                                    // 12\n                                                                                                                       // 13\nTemplate.afContenteditable.events({                                                                                    // 14\n  'blur div[contenteditable=true]': function (event, template) {                                                       // 15\n    template.$(event.target).change();                                                                                 // 16\n  }                                                                                                                    // 17\n});                                                                                                                    // 18\n                                                                                                                       // 19\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/date/template.date.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputDate\");                                                                                   // 2\nTemplate[\"afInputDate\"] = new Template(\"Template.afInputDate\", (function() {                                           // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"date\",                                                                                                      // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/date/date.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"date\", {                                                                                        // 1\n  template: \"afInputDate\",                                                                                             // 2\n  valueIn: function (val) {                                                                                            // 3\n    //convert Date to string value                                                                                     // 4\n    return (val instanceof Date) ? AutoForm.Utility.dateToDateStringUTC(val) : val;                                    // 5\n  },                                                                                                                   // 6\n  valueOut: function () {                                                                                              // 7\n    var val = this.val();                                                                                              // 8\n    if (AutoForm.Utility.isValidDateString(val)) {                                                                     // 9\n      //Date constructor will interpret val as UTC and create                                                          // 10\n      //date at mignight in the morning of val date in UTC time zone                                                   // 11\n      return new Date(val);                                                                                            // 12\n    } else {                                                                                                           // 13\n      return null;                                                                                                     // 14\n    }                                                                                                                  // 15\n  },                                                                                                                   // 16\n  valueConverters: {                                                                                                   // 17\n    \"string\": function (val) {                                                                                         // 18\n      return (val instanceof Date) ? AutoForm.Utility.dateToDateStringUTC(val) : val;                                  // 19\n    },                                                                                                                 // 20\n    \"stringArray\": function (val) {                                                                                    // 21\n      if (val instanceof Date) {                                                                                       // 22\n        return [AutoForm.Utility.dateToDateStringUTC(val)];                                                            // 23\n      }                                                                                                                // 24\n      return val;                                                                                                      // 25\n    },                                                                                                                 // 26\n    \"number\": function (val) {                                                                                         // 27\n      return (val instanceof Date) ? val.getTime() : val;                                                              // 28\n    },                                                                                                                 // 29\n    \"numberArray\": function (val) {                                                                                    // 30\n      if (val instanceof Date) {                                                                                       // 31\n        return [val.getTime()];                                                                                        // 32\n      }                                                                                                                // 33\n      return val;                                                                                                      // 34\n    },                                                                                                                 // 35\n    \"dateArray\": function (val) {                                                                                      // 36\n      if (val instanceof Date) {                                                                                       // 37\n        return [val];                                                                                                  // 38\n      }                                                                                                                // 39\n      return val;                                                                                                      // 40\n    }                                                                                                                  // 41\n  },                                                                                                                   // 42\n  contextAdjust: function (context) {                                                                                  // 43\n    if (typeof context.atts.max === \"undefined\" && context.max instanceof Date) {                                      // 44\n      context.atts.max = AutoForm.Utility.dateToDateStringUTC(context.max);                                            // 45\n    }                                                                                                                  // 46\n    if (typeof context.atts.min === \"undefined\" && context.min instanceof Date) {                                      // 47\n      context.atts.min = AutoForm.Utility.dateToDateStringUTC(context.min);                                            // 48\n    }                                                                                                                  // 49\n    return context;                                                                                                    // 50\n  }                                                                                                                    // 51\n});                                                                                                                    // 52\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/datetime/template.datetime.js                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputDateTime\");                                                                               // 2\nTemplate[\"afInputDateTime\"] = new Template(\"Template.afInputDateTime\", (function() {                                   // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"datetime\",                                                                                                  // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/datetime/datetime.js                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"datetime\", {                                                                                    // 1\n  template: \"afInputDateTime\",                                                                                         // 2\n  valueIn: function (val) {                                                                                            // 3\n    //convert Date to string value                                                                                     // 4\n    return (val instanceof Date) ? AutoForm.Utility.dateToNormalizedForcedUtcGlobalDateAndTimeString(val): val;        // 5\n  },                                                                                                                   // 6\n  valueOut: function () {                                                                                              // 7\n    var val = this.val();                                                                                              // 8\n    val = (typeof val === \"string\") ? val.replace(/ /g, \"T\") : val;                                                    // 9\n    if (AutoForm.Utility.isValidNormalizedForcedUtcGlobalDateAndTimeString(val)) {                                     // 10\n      //Date constructor will interpret val as UTC due to ending \"Z\"                                                   // 11\n      return new Date(val);                                                                                            // 12\n    } else {                                                                                                           // 13\n      return null;                                                                                                     // 14\n    }                                                                                                                  // 15\n  },                                                                                                                   // 16\n  valueConverters: {                                                                                                   // 17\n    \"string\": function (val) {                                                                                         // 18\n      return (val instanceof Date) ? AutoForm.Utility.dateToNormalizedForcedUtcGlobalDateAndTimeString(val) : val;     // 19\n    },                                                                                                                 // 20\n    \"stringArray\": function (val) {                                                                                    // 21\n      if (val instanceof Date) {                                                                                       // 22\n        return [AutoForm.Utility.dateToNormalizedForcedUtcGlobalDateAndTimeString(val)];                               // 23\n      }                                                                                                                // 24\n      return val;                                                                                                      // 25\n    },                                                                                                                 // 26\n    \"number\": function (val) {                                                                                         // 27\n      return (val instanceof Date) ? val.getTime() : val;                                                              // 28\n    },                                                                                                                 // 29\n    \"numberArray\": function (val) {                                                                                    // 30\n      if (val instanceof Date) {                                                                                       // 31\n        return [val.getTime()];                                                                                        // 32\n      }                                                                                                                // 33\n      return val;                                                                                                      // 34\n    },                                                                                                                 // 35\n    \"dateArray\": function (val) {                                                                                      // 36\n      if (val instanceof Date) {                                                                                       // 37\n        return [val];                                                                                                  // 38\n      }                                                                                                                // 39\n      return val;                                                                                                      // 40\n    }                                                                                                                  // 41\n  },                                                                                                                   // 42\n  contextAdjust: function (context) {                                                                                  // 43\n    if (typeof context.atts.max === \"undefined\" && context.max instanceof Date) {                                      // 44\n      context.atts.max = AutoForm.Utility.dateToNormalizedForcedUtcGlobalDateAndTimeString(context.max);               // 45\n    }                                                                                                                  // 46\n    if (typeof context.atts.min === \"undefined\" && context.min instanceof Date) {                                      // 47\n      context.atts.min = AutoForm.Utility.dateToNormalizedForcedUtcGlobalDateAndTimeString(context.min);               // 48\n    }                                                                                                                  // 49\n    return context;                                                                                                    // 50\n  }                                                                                                                    // 51\n});                                                                                                                    // 52\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/datetime-local/template.datetime-local.js                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputDateTimeLocal\");                                                                          // 2\nTemplate[\"afInputDateTimeLocal\"] = new Template(\"Template.afInputDateTimeLocal\", (function() {                         // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"datetime-local\",                                                                                            // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/datetime-local/datetime-local.js                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"datetime-local\", {                                                                              // 1\n  template: \"afInputDateTimeLocal\",                                                                                    // 2\n  valueIn: function (val, atts) {                                                                                      // 3\n    //convert Date to string value                                                                                     // 4\n    return (val instanceof Date) ? AutoForm.Utility.dateToNormalizedLocalDateAndTimeString(val, atts.timezoneId) : val;\n  },                                                                                                                   // 6\n  valueOut: function () {                                                                                              // 7\n    var val = this.val();                                                                                              // 8\n    val = (typeof val === \"string\") ? val.replace(/ /g, \"T\") : val;                                                    // 9\n    if (AutoForm.Utility.isValidNormalizedLocalDateAndTimeString(val)) {                                               // 10\n      var timezoneId = this.attr(\"data-timezone-id\");                                                                  // 11\n      // default is local, but if there's a timezoneId, we use that                                                    // 12\n      if (typeof timezoneId === \"string\") {                                                                            // 13\n        if (typeof moment.tz !== \"function\") {                                                                         // 14\n          throw new Error(\"If you specify a timezoneId, make sure that you've added a moment-timezone package to your app\");\n        }                                                                                                              // 16\n        return moment.tz(val, timezoneId).toDate();                                                                    // 17\n      } else {                                                                                                         // 18\n        return moment(val).toDate();                                                                                   // 19\n      }                                                                                                                // 20\n    } else {                                                                                                           // 21\n      return this.val();                                                                                               // 22\n    }                                                                                                                  // 23\n  },                                                                                                                   // 24\n  valueConverters: {                                                                                                   // 25\n    \"string\": function (val) {                                                                                         // 26\n      return (val instanceof Date) ? AutoForm.Utility.dateToNormalizedLocalDateAndTimeString(val, this.attr(\"data-timezone-id\")) : val;\n    },                                                                                                                 // 28\n    \"stringArray\": function (val) {                                                                                    // 29\n      if (val instanceof Date) {                                                                                       // 30\n        return [AutoForm.Utility.dateToNormalizedLocalDateAndTimeString(val, this.attr(\"data-timezone-id\"))];          // 31\n      }                                                                                                                // 32\n      return val;                                                                                                      // 33\n    },                                                                                                                 // 34\n    \"number\": function (val) {                                                                                         // 35\n      return (val instanceof Date) ? val.getTime() : val;                                                              // 36\n    },                                                                                                                 // 37\n    \"numberArray\": function (val) {                                                                                    // 38\n      if (val instanceof Date) {                                                                                       // 39\n        return [val.getTime()];                                                                                        // 40\n      }                                                                                                                // 41\n      return val;                                                                                                      // 42\n    },                                                                                                                 // 43\n    \"dateArray\": function (val) {                                                                                      // 44\n      if (val instanceof Date) {                                                                                       // 45\n        return [val];                                                                                                  // 46\n      }                                                                                                                // 47\n      return val;                                                                                                      // 48\n    }                                                                                                                  // 49\n  },                                                                                                                   // 50\n  contextAdjust: function (context) {                                                                                  // 51\n    if (typeof context.atts.max === \"undefined\" && context.max instanceof Date) {                                      // 52\n      context.atts.max = AutoForm.Utility.dateToNormalizedLocalDateAndTimeString(context.max, context.atts.timezoneId);\n    }                                                                                                                  // 54\n    if (typeof context.atts.min === \"undefined\" && context.min instanceof Date) {                                      // 55\n      context.atts.min = AutoForm.Utility.dateToNormalizedLocalDateAndTimeString(context.min, context.atts.timezoneId);\n    }                                                                                                                  // 57\n    if (context.atts.timezoneId) {                                                                                     // 58\n      context.atts[\"data-timezone-id\"] = context.atts.timezoneId;                                                      // 59\n    }                                                                                                                  // 60\n    delete context.atts.timezoneId;                                                                                    // 61\n    return context;                                                                                                    // 62\n  }                                                                                                                    // 63\n});                                                                                                                    // 64\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/email/template.email.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputEmail\");                                                                                  // 2\nTemplate[\"afInputEmail\"] = new Template(\"Template.afInputEmail\", (function() {                                         // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"email\",                                                                                                     // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/email/email.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"email\", {                                                                                       // 1\n  template: \"afInputEmail\",                                                                                            // 2\n  contextAdjust: function (context) {                                                                                  // 3\n    if (typeof context.atts.maxlength === \"undefined\" && typeof context.max === \"number\") {                            // 4\n      context.atts.maxlength = context.max;                                                                            // 5\n    }                                                                                                                  // 6\n    return context;                                                                                                    // 7\n  }                                                                                                                    // 8\n});                                                                                                                    // 9\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/file/template.file.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputFile\");                                                                                   // 2\nTemplate[\"afInputFile\"] = new Template(\"Template.afInputFile\", (function() {                                           // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"file\",                                                                                                      // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/file/file.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"file\", {                                                                                        // 1\n  template: \"afInputFile\"                                                                                              // 2\n});                                                                                                                    // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/hidden/template.hidden.js                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputHidden\");                                                                                 // 2\nTemplate[\"afInputHidden\"] = new Template(\"Template.afInputHidden\", (function() {                                       // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"hidden\",                                                                                                    // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/hidden/hidden.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"hidden\", {                                                                                      // 1\n  template: \"afInputHidden\",                                                                                           // 2\n  valueOut: function () {                                                                                              // 3\n    return this.val();                                                                                                 // 4\n  },                                                                                                                   // 5\n  valueConverters: {                                                                                                   // 6\n    \"stringArray\": function (val) {                                                                                    // 7\n      if (typeof val === \"string\") {                                                                                   // 8\n        val = val.split(\",\");                                                                                          // 9\n        return _.map(val, function (item) {                                                                            // 10\n          return $.trim(item);                                                                                         // 11\n        });                                                                                                            // 12\n      }                                                                                                                // 13\n      return val;                                                                                                      // 14\n    },                                                                                                                 // 15\n    \"number\": AutoForm.Utility.stringToNumber,                                                                         // 16\n    \"numberArray\": function (val) {                                                                                    // 17\n      if (typeof val === \"string\") {                                                                                   // 18\n        val = val.split(\",\");                                                                                          // 19\n        return _.map(val, function (item) {                                                                            // 20\n          item = $.trim(item);                                                                                         // 21\n          return AutoForm.Utility.stringToNumber(item);                                                                // 22\n        });                                                                                                            // 23\n      }                                                                                                                // 24\n      return val;                                                                                                      // 25\n    },                                                                                                                 // 26\n    \"boolean\": AutoForm.Utility.stringToBool,                                                                          // 27\n    \"booleanArray\": function (val) {                                                                                   // 28\n      if (typeof val === \"string\") {                                                                                   // 29\n        val = val.split(\",\");                                                                                          // 30\n        return _.map(val, function (item) {                                                                            // 31\n          item = $.trim(item);                                                                                         // 32\n          return AutoForm.Utility.stringToBool(item);                                                                  // 33\n        });                                                                                                            // 34\n      }                                                                                                                // 35\n      return val;                                                                                                      // 36\n    },                                                                                                                 // 37\n    \"date\": AutoForm.Utility.stringToDate,                                                                             // 38\n    \"dateArray\": function (val) {                                                                                      // 39\n      if (typeof val === \"string\") {                                                                                   // 40\n        val = val.split(\",\");                                                                                          // 41\n        return _.map(val, function (item) {                                                                            // 42\n          item = $.trim(item);                                                                                         // 43\n          return AutoForm.Utility.stringToDate(item);                                                                  // 44\n        });                                                                                                            // 45\n      }                                                                                                                // 46\n      return val;                                                                                                      // 47\n    }                                                                                                                  // 48\n  }                                                                                                                    // 49\n});                                                                                                                    // 50\n                                                                                                                       // 51\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/image/template.image.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputImage\");                                                                                  // 2\nTemplate[\"afInputImage\"] = new Template(\"Template.afInputImage\", (function() {                                         // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"image\",                                                                                                     // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/image/image.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"image\", {                                                                                       // 1\n  template: \"afInputImage\"                                                                                             // 2\n});                                                                                                                    // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/month/template.month.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputMonth\");                                                                                  // 2\nTemplate[\"afInputMonth\"] = new Template(\"Template.afInputMonth\", (function() {                                         // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"month\",                                                                                                     // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/month/month.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"month\", {                                                                                       // 1\n  template: \"afInputMonth\",                                                                                            // 2\n  valueConverters: {                                                                                                   // 3\n    \"stringArray\": function (val) {                                                                                    // 4\n      if (typeof val === \"string\" && val.length > 0) {                                                                 // 5\n        return [val];                                                                                                  // 6\n      }                                                                                                                // 7\n      return val;                                                                                                      // 8\n    }                                                                                                                  // 9\n  }                                                                                                                    // 10\n});                                                                                                                    // 11\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/number/template.number.js                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputNumber\");                                                                                 // 2\nTemplate[\"afInputNumber\"] = new Template(\"Template.afInputNumber\", (function() {                                       // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"number\",                                                                                                    // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/number/number.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"number\", {                                                                                      // 1\n  template: \"afInputNumber\",                                                                                           // 2\n  valueOut: function () {                                                                                              // 3\n    return AutoForm.Utility.stringToNumber(this.val());                                                                // 4\n  },                                                                                                                   // 5\n  valueConverters: {                                                                                                   // 6\n    \"string\": function (val) {                                                                                         // 7\n      if (typeof val === \"number\") {                                                                                   // 8\n        return val.toString();                                                                                         // 9\n      }                                                                                                                // 10\n      return val;                                                                                                      // 11\n    },                                                                                                                 // 12\n    \"stringArray\": function (val) {                                                                                    // 13\n      if (typeof val === \"number\") {                                                                                   // 14\n        return [val.toString()];                                                                                       // 15\n      }                                                                                                                // 16\n      return val;                                                                                                      // 17\n    },                                                                                                                 // 18\n    \"numberArray\": function (val) {                                                                                    // 19\n      if (typeof val === \"number\") {                                                                                   // 20\n        return [val];                                                                                                  // 21\n      }                                                                                                                // 22\n      return val;                                                                                                      // 23\n    },                                                                                                                 // 24\n    \"boolean\": function (val) {                                                                                        // 25\n      if (val === 0) {                                                                                                 // 26\n        return false;                                                                                                  // 27\n      } else if (val === 1) {                                                                                          // 28\n        return true;                                                                                                   // 29\n      }                                                                                                                // 30\n      return val;                                                                                                      // 31\n    },                                                                                                                 // 32\n    \"booleanArray\": function (val) {                                                                                   // 33\n      if (val === 0) {                                                                                                 // 34\n        return [false];                                                                                                // 35\n      } else if (val === 1) {                                                                                          // 36\n        return [true];                                                                                                 // 37\n      }                                                                                                                // 38\n      return val;                                                                                                      // 39\n    }                                                                                                                  // 40\n  },                                                                                                                   // 41\n  contextAdjust: function (context) {                                                                                  // 42\n    if (typeof context.atts.max === \"undefined\" && typeof context.max === \"number\") {                                  // 43\n      context.atts.max = context.max;                                                                                  // 44\n    }                                                                                                                  // 45\n    if (typeof context.atts.min === \"undefined\" && typeof context.min === \"number\") {                                  // 46\n      context.atts.min = context.min;                                                                                  // 47\n    }                                                                                                                  // 48\n    if (typeof context.atts.step === \"undefined\" && context.decimal) {                                                 // 49\n      context.atts.step = '0.01';                                                                                      // 50\n    }                                                                                                                  // 51\n    return context;                                                                                                    // 52\n  }                                                                                                                    // 53\n});                                                                                                                    // 54\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/password/template.password.js                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputPassword\");                                                                               // 2\nTemplate[\"afInputPassword\"] = new Template(\"Template.afInputPassword\", (function() {                                   // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"password\",                                                                                                  // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/password/password.js                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"password\", {                                                                                    // 1\n  template: \"afInputPassword\",                                                                                         // 2\n  valueConverters: {                                                                                                   // 3\n    \"stringArray\": function (val) {                                                                                    // 4\n      if (typeof val === \"string\" && val.length > 0) {                                                                 // 5\n        return [val];                                                                                                  // 6\n      }                                                                                                                // 7\n      return val;                                                                                                      // 8\n    }                                                                                                                  // 9\n  },                                                                                                                   // 10\n  contextAdjust: function (context) {                                                                                  // 11\n    if (typeof context.atts.maxlength === \"undefined\" && typeof context.max === \"number\") {                            // 12\n      context.atts.maxlength = context.max;                                                                            // 13\n    }                                                                                                                  // 14\n    return context;                                                                                                    // 15\n  }                                                                                                                    // 16\n});                                                                                                                    // 17\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/radio/template.radio.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afRadio\");                                                                                       // 2\nTemplate[\"afRadio\"] = new Template(\"Template.afRadio\", (function() {                                                   // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                                   // 5\n    type: \"checkbox\",                                                                                                  // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 11\n  })), \" \", Blaze.View(function() {                                                                                    // 12\n    return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                          // 13\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                    // 14\n    }));                                                                                                               // 15\n  })));                                                                                                                // 16\n}));                                                                                                                   // 17\n                                                                                                                       // 18\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/radio/radio.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"radio\", {                                                                                       // 1\n  template: \"afRadio\",                                                                                                 // 2\n  valueOut: function () {                                                                                              // 3\n    if (this.is(\":checked\")) {                                                                                         // 4\n      return this.val();                                                                                               // 5\n    }                                                                                                                  // 6\n  },                                                                                                                   // 7\n  valueConverters: {                                                                                                   // 8\n    \"stringArray\": function (val) {                                                                                    // 9\n      if (typeof val === \"string\" && val.length > 0) {                                                                 // 10\n        return [val];                                                                                                  // 11\n      }                                                                                                                // 12\n      return val;                                                                                                      // 13\n    }                                                                                                                  // 14\n  }                                                                                                                    // 15\n});                                                                                                                    // 16\n                                                                                                                       // 17\nTemplate[\"afRadio\"].helpers({                                                                                          // 18\n  atts: function selectedAttsAdjust() {                                                                                // 19\n    var atts = _.clone(this.atts);                                                                                     // 20\n    if (this.selected) {                                                                                               // 21\n      atts.checked = \"\";                                                                                               // 22\n    }                                                                                                                  // 23\n    return atts;                                                                                                       // 24\n  }                                                                                                                    // 25\n});                                                                                                                    // 26\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/range/template.range.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputRange\");                                                                                  // 2\nTemplate[\"afInputRange\"] = new Template(\"Template.afInputRange\", (function() {                                         // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"range\",                                                                                                     // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/range/range.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"range\", {                                                                                       // 1\n  template: \"afInputRange\",                                                                                            // 2\n  valueOut: function () {                                                                                              // 3\n    return AutoForm.Utility.stringToNumber(this.val());                                                                // 4\n  },                                                                                                                   // 5\n  valueConverters: {                                                                                                   // 6\n    \"string\": function (val) {                                                                                         // 7\n      if (typeof val === \"number\") {                                                                                   // 8\n        return val.toString();                                                                                         // 9\n      }                                                                                                                // 10\n      return val;                                                                                                      // 11\n    },                                                                                                                 // 12\n    \"stringArray\": function (val) {                                                                                    // 13\n      if (typeof val === \"number\") {                                                                                   // 14\n        return [val.toString()];                                                                                       // 15\n      }                                                                                                                // 16\n      return val;                                                                                                      // 17\n    },                                                                                                                 // 18\n    \"numberArray\": function (val) {                                                                                    // 19\n      if (typeof val === \"number\") {                                                                                   // 20\n        return [val];                                                                                                  // 21\n      }                                                                                                                // 22\n      return val;                                                                                                      // 23\n    },                                                                                                                 // 24\n    \"boolean\": function (val) {                                                                                        // 25\n      if (val === 0) {                                                                                                 // 26\n        return false;                                                                                                  // 27\n      } else if (val === 1) {                                                                                          // 28\n        return true;                                                                                                   // 29\n      }                                                                                                                // 30\n      return val;                                                                                                      // 31\n    },                                                                                                                 // 32\n    \"booleanArray\": function (val) {                                                                                   // 33\n      if (val === 0) {                                                                                                 // 34\n        return [false];                                                                                                // 35\n      } else if (val === 1) {                                                                                          // 36\n        return [true];                                                                                                 // 37\n      }                                                                                                                // 38\n      return val;                                                                                                      // 39\n    }                                                                                                                  // 40\n  }                                                                                                                    // 41\n});                                                                                                                    // 42\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/reset/template.reset.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputReset\");                                                                                  // 2\nTemplate[\"afInputReset\"] = new Template(\"Template.afInputReset\", (function() {                                         // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"reset\",                                                                                                     // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/reset/reset.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"reset\", {                                                                                       // 1\n  template: \"afInputReset\"                                                                                             // 2\n});                                                                                                                    // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/search/template.search.js                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputSearch\");                                                                                 // 2\nTemplate[\"afInputSearch\"] = new Template(\"Template.afInputSearch\", (function() {                                       // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"search\",                                                                                                    // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/search/search.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"search\", {                                                                                      // 1\n  template: \"afInputSearch\",                                                                                           // 2\n  valueConverters: {                                                                                                   // 3\n    \"stringArray\": function (val) {                                                                                    // 4\n      if (typeof val === \"string\" && val.length > 0) {                                                                 // 5\n        return [val];                                                                                                  // 6\n      }                                                                                                                // 7\n      return val;                                                                                                      // 8\n    }                                                                                                                  // 9\n  },                                                                                                                   // 10\n  contextAdjust: function (context) {                                                                                  // 11\n    if (typeof context.atts.maxlength === \"undefined\" && typeof context.max === \"number\") {                            // 12\n      context.atts.maxlength = context.max;                                                                            // 13\n    }                                                                                                                  // 14\n    return context;                                                                                                    // 15\n  }                                                                                                                    // 16\n});                                                                                                                    // 17\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/select/template.select.js                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afSelect\");                                                                                      // 2\nTemplate[\"afSelect\"] = new Template(\"Template.afSelect\", (function() {                                                 // 3\n  var view = this;                                                                                                     // 4\n  return HTML.SELECT(HTML.Attrs(function() {                                                                           // 5\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 6\n  }), \"\\n    \", Blaze.Each(function() {                                                                                // 7\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 8\n  }, function() {                                                                                                      // 9\n    return [ \"\\n      \", Blaze.If(function() {                                                                         // 10\n      return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"optgroup\"));                                              // 11\n    }, function() {                                                                                                    // 12\n      return [ \"\\n        \", HTML.OPTGROUP({                                                                           // 13\n        label: function() {                                                                                            // 14\n          return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"optgroup\"));                                      // 15\n        }                                                                                                              // 16\n      }, \"\\n        \", Blaze.Each(function() {                                                                         // 17\n        return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                               // 18\n      }, function() {                                                                                                  // 19\n        return [ \"\\n        \", HTML.OPTION(HTML.Attrs(function() {                                                     // 20\n          return Spacebars.attrMustache(view.lookup(\"optionAtts\"));                                                    // 21\n        }), Blaze.View(function() {                                                                                    // 22\n          return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                         // 23\n        })), \"\\n        \" ];                                                                                           // 24\n      }), \"\\n        \"), \"\\n      \" ];                                                                                 // 25\n    }, function() {                                                                                                    // 26\n      return [ \"\\n        \", HTML.OPTION(HTML.Attrs(function() {                                                       // 27\n        return Spacebars.attrMustache(view.lookup(\"optionAtts\"));                                                      // 28\n      }), Blaze.View(function() {                                                                                      // 29\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                           // 30\n      })), \"\\n      \" ];                                                                                               // 31\n    }), \"\\n    \" ];                                                                                                    // 32\n  }), \"\\n  \");                                                                                                         // 33\n}));                                                                                                                   // 34\n                                                                                                                       // 35\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/select/select.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"select\", {                                                                                      // 1\n  template: \"afSelect\",                                                                                                // 2\n  valueOut: function () {                                                                                              // 3\n    return AutoForm.Utility.stringToNumber(this.val());                                                                // 4\n  },                                                                                                                   // 5\n  contextAdjust: function (context) {                                                                                  // 6\n    //can fix issues with some browsers selecting the firstOption instead of the selected option                       // 7\n    context.atts.autocomplete = \"off\";                                                                                 // 8\n                                                                                                                       // 9\n    var itemAtts = _.omit(context.atts, 'firstOption');                                                                // 10\n    var firstOption = context.atts.firstOption;                                                                        // 11\n                                                                                                                       // 12\n    // build items list                                                                                                // 13\n    context.items = [];                                                                                                // 14\n                                                                                                                       // 15\n    // If a firstOption was provided, add that to the items list first                                                 // 16\n    if (firstOption !== false) {                                                                                       // 17\n      context.items.push({                                                                                             // 18\n        name: context.name,                                                                                            // 19\n        label: (typeof firstOption === \"string\" ? firstOption : \"(Select One)\"),                                       // 20\n        value: \"\",                                                                                                     // 21\n        // _id must be included because it is a special property that                                                  // 22\n        // #each uses to track unique list items when adding and removing them                                         // 23\n        // See https://github.com/meteor/meteor/issues/2174                                                            // 24\n        _id: \"\",                                                                                                       // 25\n        selected: false,                                                                                               // 26\n        atts: itemAtts                                                                                                 // 27\n      });                                                                                                              // 28\n    }                                                                                                                  // 29\n                                                                                                                       // 30\n    // Add all defined options                                                                                         // 31\n    _.each(context.selectOptions, function(opt) {                                                                      // 32\n      if (opt.optgroup) {                                                                                              // 33\n        var subItems = _.map(opt.options, function(subOpt) {                                                           // 34\n          return {                                                                                                     // 35\n            name: context.name,                                                                                        // 36\n            label: subOpt.label,                                                                                       // 37\n            value: subOpt.value,                                                                                       // 38\n            // _id must be included because it is a special property that                                              // 39\n            // #each uses to track unique list items when adding and removing them                                     // 40\n            // See https://github.com/meteor/meteor/issues/2174                                                        // 41\n            _id: subOpt.value,                                                                                         // 42\n            selected: (subOpt.value === context.value),                                                                // 43\n            atts: itemAtts                                                                                             // 44\n          };                                                                                                           // 45\n        });                                                                                                            // 46\n        context.items.push({                                                                                           // 47\n          optgroup: opt.optgroup,                                                                                      // 48\n          items: subItems                                                                                              // 49\n        });                                                                                                            // 50\n      } else {                                                                                                         // 51\n        context.items.push({                                                                                           // 52\n          name: context.name,                                                                                          // 53\n          label: opt.label,                                                                                            // 54\n          value: opt.value,                                                                                            // 55\n          // _id must be included because it is a special property that                                                // 56\n          // #each uses to track unique list items when adding and removing them                                       // 57\n          // See https://github.com/meteor/meteor/issues/2174                                                          // 58\n          _id: opt.value,                                                                                              // 59\n          selected: (opt.value === context.value),                                                                     // 60\n          atts: itemAtts                                                                                               // 61\n        });                                                                                                            // 62\n      }                                                                                                                // 63\n    });                                                                                                                // 64\n                                                                                                                       // 65\n    return context;                                                                                                    // 66\n  }                                                                                                                    // 67\n});                                                                                                                    // 68\n                                                                                                                       // 69\nTemplate[\"afSelect\"].helpers({                                                                                         // 70\n  optionAtts: function afSelectOptionAtts() {                                                                          // 71\n    var item = this                                                                                                    // 72\n    var atts = {                                                                                                       // 73\n      value: item.value                                                                                                // 74\n    };                                                                                                                 // 75\n    if (item.selected) {                                                                                               // 76\n      atts.selected = \"\";                                                                                              // 77\n    }                                                                                                                  // 78\n    return atts;                                                                                                       // 79\n  }                                                                                                                    // 80\n});                                                                                                                    // 81\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/select-checkbox/template.select-checkbox.js                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afCheckboxGroup\");                                                                               // 2\nTemplate[\"afCheckboxGroup\"] = new Template(\"Template.afCheckboxGroup\", (function() {                                   // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.Attrs({                                                                                         // 5\n    \"class\": \"af-checkbox-group\"                                                                                       // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.attrMustache(view.lookup(\"dsk\"));                                                                 // 8\n  }), \"\\n    \", Blaze.Each(function() {                                                                                // 9\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 10\n  }, function() {                                                                                                      // 11\n    return [ \"\\n      \", HTML.DIV(HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                   // 12\n      type: \"checkbox\",                                                                                                // 13\n      value: function() {                                                                                              // 14\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                           // 15\n      }                                                                                                                // 16\n    }, function() {                                                                                                    // 17\n      return Spacebars.attrMustache(view.lookup(\"atts\"));                                                              // 18\n    })), \" \", Blaze.View(function() {                                                                                  // 19\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                             // 20\n    }))), \"\\n    \" ];                                                                                                  // 21\n  }), \"\\n  \");                                                                                                         // 22\n}));                                                                                                                   // 23\n                                                                                                                       // 24\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/select-checkbox/select-checkbox.js                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"select-checkbox\", {                                                                             // 1\n  template: \"afCheckboxGroup\",                                                                                         // 2\n  valueIsArray: true,                                                                                                  // 3\n  valueOut: function () {                                                                                              // 4\n    var val = [];                                                                                                      // 5\n    this.find('input[type=checkbox]').each(function () {                                                               // 6\n      if ($(this).is(\":checked\")) {                                                                                    // 7\n        val.push($(this).val());                                                                                       // 8\n      }                                                                                                                // 9\n    });                                                                                                                // 10\n    return val;                                                                                                        // 11\n  },                                                                                                                   // 12\n  contextAdjust: function (context) {                                                                                  // 13\n    var itemAtts = _.omit(context.atts);                                                                               // 14\n                                                                                                                       // 15\n    // build items list                                                                                                // 16\n    context.items = [];                                                                                                // 17\n                                                                                                                       // 18\n    // Add all defined options                                                                                         // 19\n    _.each(context.selectOptions, function(opt) {                                                                      // 20\n      context.items.push({                                                                                             // 21\n        name: context.name,                                                                                            // 22\n        label: opt.label,                                                                                              // 23\n        value: opt.value,                                                                                              // 24\n        // _id must be included because it is a special property that                                                  // 25\n        // #each uses to track unique list items when adding and removing them                                         // 26\n        // See https://github.com/meteor/meteor/issues/2174                                                            // 27\n        _id: opt.value,                                                                                                // 28\n        selected: (_.contains(context.value, opt.value)),                                                              // 29\n        atts: itemAtts                                                                                                 // 30\n      });                                                                                                              // 31\n    });                                                                                                                // 32\n                                                                                                                       // 33\n    return context;                                                                                                    // 34\n  }                                                                                                                    // 35\n});                                                                                                                    // 36\n                                                                                                                       // 37\nTemplate[\"afCheckboxGroup\"].helpers({                                                                                  // 38\n  atts: function selectedAttsAdjust() {                                                                                // 39\n    var atts = _.clone(this.atts);                                                                                     // 40\n    if (this.selected) {                                                                                               // 41\n      atts.checked = \"\";                                                                                               // 42\n    }                                                                                                                  // 43\n    // remove data-schema-key attribute because we put it                                                              // 44\n    // on the entire group                                                                                             // 45\n    delete atts[\"data-schema-key\"];                                                                                    // 46\n    return atts;                                                                                                       // 47\n  },                                                                                                                   // 48\n  dsk: function dsk() {                                                                                                // 49\n    return {                                                                                                           // 50\n      \"data-schema-key\": this.atts[\"data-schema-key\"]                                                                  // 51\n    }                                                                                                                  // 52\n  }                                                                                                                    // 53\n});                                                                                                                    // 54\n                                                                                                                       // 55\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/select-checkbox-inline/template.select-checkbox-inline.js                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afCheckboxGroupInline\");                                                                         // 2\nTemplate[\"afCheckboxGroupInline\"] = new Template(\"Template.afCheckboxGroupInline\", (function() {                       // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.Attrs({                                                                                         // 5\n    \"class\": \"af-checkbox-group\"                                                                                       // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.attrMustache(view.lookup(\"dsk\"));                                                                 // 8\n  }), \"\\n    \", Blaze.Each(function() {                                                                                // 9\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 10\n  }, function() {                                                                                                      // 11\n    return [ \"\\n      \", HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                            // 12\n      type: \"checkbox\",                                                                                                // 13\n      value: function() {                                                                                              // 14\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                           // 15\n      }                                                                                                                // 16\n    }, function() {                                                                                                    // 17\n      return Spacebars.attrMustache(view.lookup(\"atts\"));                                                              // 18\n    })), \" \", Blaze.View(function() {                                                                                  // 19\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                             // 20\n    })), \"\\n    \" ];                                                                                                   // 21\n  }), \"\\n  \");                                                                                                         // 22\n}));                                                                                                                   // 23\n                                                                                                                       // 24\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/select-checkbox-inline/select-checkbox-inline.js                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"select-checkbox-inline\", {                                                                      // 1\n  template: \"afCheckboxGroupInline\",                                                                                   // 2\n  valueIsArray: true,                                                                                                  // 3\n  valueOut: function () {                                                                                              // 4\n    var val = [];                                                                                                      // 5\n    this.find('input[type=checkbox]').each(function () {                                                               // 6\n      if ($(this).is(\":checked\")) {                                                                                    // 7\n        val.push($(this).val());                                                                                       // 8\n      }                                                                                                                // 9\n    });                                                                                                                // 10\n    return val;                                                                                                        // 11\n  },                                                                                                                   // 12\n  contextAdjust: function (context) {                                                                                  // 13\n    var itemAtts = _.omit(context.atts);                                                                               // 14\n                                                                                                                       // 15\n    // build items list                                                                                                // 16\n    context.items = [];                                                                                                // 17\n                                                                                                                       // 18\n    // Add all defined options                                                                                         // 19\n    _.each(context.selectOptions, function(opt) {                                                                      // 20\n      context.items.push({                                                                                             // 21\n        name: context.name,                                                                                            // 22\n        label: opt.label,                                                                                              // 23\n        value: opt.value,                                                                                              // 24\n        // _id must be included because it is a special property that                                                  // 25\n        // #each uses to track unique list items when adding and removing them                                         // 26\n        // See https://github.com/meteor/meteor/issues/2174                                                            // 27\n        _id: opt.value,                                                                                                // 28\n        selected: (_.contains(context.value, opt.value)),                                                              // 29\n        atts: itemAtts                                                                                                 // 30\n      });                                                                                                              // 31\n    });                                                                                                                // 32\n                                                                                                                       // 33\n    return context;                                                                                                    // 34\n  }                                                                                                                    // 35\n});                                                                                                                    // 36\n                                                                                                                       // 37\nTemplate[\"afCheckboxGroupInline\"].helpers({                                                                            // 38\n  atts: function selectedAttsAdjust() {                                                                                // 39\n    var atts = _.clone(this.atts);                                                                                     // 40\n    if (this.selected) {                                                                                               // 41\n      atts.checked = \"\";                                                                                               // 42\n    }                                                                                                                  // 43\n    // remove data-schema-key attribute because we put it                                                              // 44\n    // on the entire group                                                                                             // 45\n    delete atts[\"data-schema-key\"];                                                                                    // 46\n    return atts;                                                                                                       // 47\n  },                                                                                                                   // 48\n  dsk: function dsk() {                                                                                                // 49\n    return {                                                                                                           // 50\n      \"data-schema-key\": this.atts[\"data-schema-key\"]                                                                  // 51\n    }                                                                                                                  // 52\n  }                                                                                                                    // 53\n});                                                                                                                    // 54\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/select-multiple/template.select-multiple.js                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afSelectMultiple\");                                                                              // 2\nTemplate[\"afSelectMultiple\"] = new Template(\"Template.afSelectMultiple\", (function() {                                 // 3\n  var view = this;                                                                                                     // 4\n  return HTML.SELECT(HTML.Attrs({                                                                                      // 5\n    multiple: \"\"                                                                                                       // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 8\n  }), \"\\n    \", Blaze.Each(function() {                                                                                // 9\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 10\n  }, function() {                                                                                                      // 11\n    return [ \"\\n      \", Blaze.If(function() {                                                                         // 12\n      return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"optgroup\"));                                              // 13\n    }, function() {                                                                                                    // 14\n      return [ \"\\n        \", HTML.OPTGROUP({                                                                           // 15\n        label: function() {                                                                                            // 16\n          return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"optgroup\"));                                      // 17\n        }                                                                                                              // 18\n      }, \"\\n        \", Blaze.Each(function() {                                                                         // 19\n        return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                               // 20\n      }, function() {                                                                                                  // 21\n        return [ \"\\n        \", HTML.OPTION(HTML.Attrs(function() {                                                     // 22\n          return Spacebars.attrMustache(view.lookup(\"optionAtts\"));                                                    // 23\n        }), Blaze.View(function() {                                                                                    // 24\n          return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                         // 25\n        })), \"\\n        \" ];                                                                                           // 26\n      }), \"\\n        \"), \"\\n      \" ];                                                                                 // 27\n    }, function() {                                                                                                    // 28\n      return [ \"\\n        \", HTML.OPTION(HTML.Attrs(function() {                                                       // 29\n        return Spacebars.attrMustache(view.lookup(\"optionAtts\"));                                                      // 30\n      }), Blaze.View(function() {                                                                                      // 31\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                           // 32\n      })), \"\\n      \" ];                                                                                               // 33\n    }), \"\\n    \" ];                                                                                                    // 34\n  }), \"\\n  \");                                                                                                         // 35\n}));                                                                                                                   // 36\n                                                                                                                       // 37\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/select-multiple/select-multiple.js                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"select-multiple\", {                                                                             // 1\n  template: \"afSelectMultiple\",                                                                                        // 2\n  valueIsArray: true,                                                                                                  // 3\n  valueOut: function () {                                                                                              // 4\n    return AutoForm.Utility.getSelectValues(this[0]);                                                                  // 5\n  },                                                                                                                   // 6\n  contextAdjust: function (context) {                                                                                  // 7\n    // build items list                                                                                                // 8\n    context.items = _.map(context.selectOptions, function(opt) {                                                       // 9\n      if (opt.optgroup) {                                                                                              // 10\n        var subItems = _.map(opt.options, function(subOpt) {                                                           // 11\n          return {                                                                                                     // 12\n            name: context.name,                                                                                        // 13\n            label: subOpt.label,                                                                                       // 14\n            value: subOpt.value,                                                                                       // 15\n            // _id must be included because it is a special property that                                              // 16\n            // #each uses to track unique list items when adding and removing them                                     // 17\n            // See https://github.com/meteor/meteor/issues/2174                                                        // 18\n            _id: subOpt.value,                                                                                         // 19\n            selected: _.contains(context.value, subOpt.value),                                                         // 20\n            atts: context.atts                                                                                         // 21\n          };                                                                                                           // 22\n        });                                                                                                            // 23\n        return {                                                                                                       // 24\n          optgroup: opt.optgroup,                                                                                      // 25\n          items: subItems                                                                                              // 26\n        };                                                                                                             // 27\n      } else {                                                                                                         // 28\n        return {                                                                                                       // 29\n          name: context.name,                                                                                          // 30\n          label: opt.label,                                                                                            // 31\n          value: opt.value,                                                                                            // 32\n          // _id must be included because it is a special property that                                                // 33\n          // #each uses to track unique list items when adding and removing them                                       // 34\n          // See https://github.com/meteor/meteor/issues/2174                                                          // 35\n          _id: opt.value,                                                                                              // 36\n          selected: _.contains(context.value, opt.value),                                                              // 37\n          atts: context.atts                                                                                           // 38\n        };                                                                                                             // 39\n      }                                                                                                                // 40\n    });                                                                                                                // 41\n                                                                                                                       // 42\n    return context;                                                                                                    // 43\n  }                                                                                                                    // 44\n});                                                                                                                    // 45\n                                                                                                                       // 46\nTemplate[\"afSelectMultiple\"].helpers({                                                                                 // 47\n  optionAtts: function afSelectOptionAtts() {                                                                          // 48\n    var item = this;                                                                                                   // 49\n    var atts = {                                                                                                       // 50\n      value: item.value                                                                                                // 51\n    };                                                                                                                 // 52\n    if (item.selected) {                                                                                               // 53\n      atts.selected = \"\";                                                                                              // 54\n    }                                                                                                                  // 55\n    return atts;                                                                                                       // 56\n  }                                                                                                                    // 57\n});                                                                                                                    // 58\n                                                                                                                       // 59\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/select-radio/template.select-radio.js                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afRadioGroup\");                                                                                  // 2\nTemplate[\"afRadioGroup\"] = new Template(\"Template.afRadioGroup\", (function() {                                         // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.Attrs({                                                                                         // 5\n    \"class\": \"af-radio-group\"                                                                                          // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.attrMustache(view.lookup(\"dsk\"));                                                                 // 8\n  }), \"\\n  \", Blaze.Each(function() {                                                                                  // 9\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 10\n  }, function() {                                                                                                      // 11\n    return [ \"\\n    \", HTML.DIV(HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                     // 12\n      type: \"radio\",                                                                                                   // 13\n      value: function() {                                                                                              // 14\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                           // 15\n      }                                                                                                                // 16\n    }, function() {                                                                                                    // 17\n      return Spacebars.attrMustache(view.lookup(\"atts\"));                                                              // 18\n    })), \" \", Blaze.View(function() {                                                                                  // 19\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                             // 20\n    }))), \"\\n  \" ];                                                                                                    // 21\n  }), \"\\n  \");                                                                                                         // 22\n}));                                                                                                                   // 23\n                                                                                                                       // 24\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/select-radio/select-radio.js                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"select-radio\", {                                                                                // 1\n  template: \"afRadioGroup\",                                                                                            // 2\n  valueOut: function () {                                                                                              // 3\n    return this.find('input[type=radio]:checked').val();                                                               // 4\n  },                                                                                                                   // 5\n  contextAdjust: function (context) {                                                                                  // 6\n    var itemAtts = _.omit(context.atts);                                                                               // 7\n                                                                                                                       // 8\n    // build items list                                                                                                // 9\n    context.items = [];                                                                                                // 10\n                                                                                                                       // 11\n    // Add all defined options                                                                                         // 12\n    _.each(context.selectOptions, function(opt) {                                                                      // 13\n      context.items.push({                                                                                             // 14\n        name: context.name,                                                                                            // 15\n        label: opt.label,                                                                                              // 16\n        value: opt.value,                                                                                              // 17\n        // _id must be included because it is a special property that                                                  // 18\n        // #each uses to track unique list items when adding and removing them                                         // 19\n        // See https://github.com/meteor/meteor/issues/2174                                                            // 20\n        _id: opt.value,                                                                                                // 21\n        selected: (opt.value === context.value),                                                                       // 22\n        atts: itemAtts                                                                                                 // 23\n      });                                                                                                              // 24\n    });                                                                                                                // 25\n                                                                                                                       // 26\n    return context;                                                                                                    // 27\n  }                                                                                                                    // 28\n});                                                                                                                    // 29\n                                                                                                                       // 30\nTemplate[\"afRadioGroup\"].helpers({                                                                                     // 31\n  atts: function selectedAttsAdjust() {                                                                                // 32\n    var atts = _.clone(this.atts);                                                                                     // 33\n    if (this.selected) {                                                                                               // 34\n      atts.checked = \"\";                                                                                               // 35\n    }                                                                                                                  // 36\n    // remove data-schema-key attribute because we put it                                                              // 37\n    // on the entire group                                                                                             // 38\n    delete atts[\"data-schema-key\"];                                                                                    // 39\n    return atts;                                                                                                       // 40\n  },                                                                                                                   // 41\n  dsk: function dsk() {                                                                                                // 42\n    return {                                                                                                           // 43\n      \"data-schema-key\": this.atts[\"data-schema-key\"]                                                                  // 44\n    }                                                                                                                  // 45\n  }                                                                                                                    // 46\n});                                                                                                                    // 47\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/select-radio-inline/template.select-radio-inline.js                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afRadioGroupInline\");                                                                            // 2\nTemplate[\"afRadioGroupInline\"] = new Template(\"Template.afRadioGroupInline\", (function() {                             // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV(HTML.Attrs({                                                                                         // 5\n    \"class\": \"af-radio-group\"                                                                                          // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.attrMustache(view.lookup(\"dsk\"));                                                                 // 8\n  }), \"\\n  \", Blaze.Each(function() {                                                                                  // 9\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 10\n  }, function() {                                                                                                      // 11\n    return [ \"\\n    \", HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                              // 12\n      type: \"radio\",                                                                                                   // 13\n      value: function() {                                                                                              // 14\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                           // 15\n      }                                                                                                                // 16\n    }, function() {                                                                                                    // 17\n      return Spacebars.attrMustache(view.lookup(\"atts\"));                                                              // 18\n    })), \" \", Blaze.View(function() {                                                                                  // 19\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                             // 20\n    })), \"\\n  \" ];                                                                                                     // 21\n  }), \"\\n  \");                                                                                                         // 22\n}));                                                                                                                   // 23\n                                                                                                                       // 24\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/select-radio-inline/select-radio-inline.js                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"select-radio-inline\", {                                                                         // 1\n  template: \"afRadioGroupInline\",                                                                                      // 2\n  valueOut: function () {                                                                                              // 3\n    return this.find('input[type=radio]:checked').val();                                                               // 4\n  },                                                                                                                   // 5\n  contextAdjust: function (context) {                                                                                  // 6\n    var itemAtts = _.omit(context.atts);                                                                               // 7\n                                                                                                                       // 8\n    // build items list                                                                                                // 9\n    context.items = [];                                                                                                // 10\n                                                                                                                       // 11\n    // Add all defined options                                                                                         // 12\n    _.each(context.selectOptions, function(opt) {                                                                      // 13\n      context.items.push({                                                                                             // 14\n        name: context.name,                                                                                            // 15\n        label: opt.label,                                                                                              // 16\n        value: opt.value,                                                                                              // 17\n        // _id must be included because it is a special property that                                                  // 18\n        // #each uses to track unique list items when adding and removing them                                         // 19\n        // See https://github.com/meteor/meteor/issues/2174                                                            // 20\n        _id: opt.value,                                                                                                // 21\n        selected: (opt.value === context.value),                                                                       // 22\n        atts: itemAtts                                                                                                 // 23\n      });                                                                                                              // 24\n    });                                                                                                                // 25\n                                                                                                                       // 26\n    return context;                                                                                                    // 27\n  }                                                                                                                    // 28\n});                                                                                                                    // 29\n                                                                                                                       // 30\nTemplate[\"afRadioGroupInline\"].helpers({                                                                               // 31\n  atts: function selectedAttsAdjust() {                                                                                // 32\n    var atts = _.clone(this.atts);                                                                                     // 33\n    if (this.selected) {                                                                                               // 34\n      atts.checked = \"\";                                                                                               // 35\n    }                                                                                                                  // 36\n    // remove data-schema-key attribute because we put it                                                              // 37\n    // on the entire group                                                                                             // 38\n    delete atts[\"data-schema-key\"];                                                                                    // 39\n    return atts;                                                                                                       // 40\n  },                                                                                                                   // 41\n  dsk: function dsk() {                                                                                                // 42\n    return {                                                                                                           // 43\n      \"data-schema-key\": this.atts[\"data-schema-key\"]                                                                  // 44\n    }                                                                                                                  // 45\n  }                                                                                                                    // 46\n});                                                                                                                    // 47\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/submit/template.submit.js                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputSubmit\");                                                                                 // 2\nTemplate[\"afInputSubmit\"] = new Template(\"Template.afInputSubmit\", (function() {                                       // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"submit\",                                                                                                    // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/submit/submit.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"submit\", {                                                                                      // 1\n  template: \"afInputSubmit\"                                                                                            // 2\n});                                                                                                                    // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/tel/template.tel.js                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputTel\");                                                                                    // 2\nTemplate[\"afInputTel\"] = new Template(\"Template.afInputTel\", (function() {                                             // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"tel\",                                                                                                       // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/tel/tel.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"tel\", {                                                                                         // 1\n  template: \"afInputTel\",                                                                                              // 2\n  valueConverters: {                                                                                                   // 3\n    \"stringArray\": function (val) {                                                                                    // 4\n      if (typeof val === \"string\" && val.length > 0) {                                                                 // 5\n        return [val];                                                                                                  // 6\n      }                                                                                                                // 7\n      return val;                                                                                                      // 8\n    }                                                                                                                  // 9\n  },                                                                                                                   // 10\n  contextAdjust: function (context) {                                                                                  // 11\n    if (typeof context.atts.maxlength === \"undefined\" && typeof context.max === \"number\") {                            // 12\n      context.atts.maxlength = context.max;                                                                            // 13\n    }                                                                                                                  // 14\n    return context;                                                                                                    // 15\n  }                                                                                                                    // 16\n});                                                                                                                    // 17\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/text/template.text.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputText\");                                                                                   // 2\nTemplate[\"afInputText\"] = new Template(\"Template.afInputText\", (function() {                                           // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"text\",                                                                                                      // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/text/text.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"text\", {                                                                                        // 1\n  template: \"afInputText\",                                                                                             // 2\n  valueOut: function () {                                                                                              // 3\n    return this.val();                                                                                                 // 4\n  },                                                                                                                   // 5\n  valueConverters: {                                                                                                   // 6\n    \"stringArray\": function (val) {                                                                                    // 7\n      if (typeof val === \"string\") {                                                                                   // 8\n        val = val.split(\",\");                                                                                          // 9\n        return _.map(val, function (item) {                                                                            // 10\n          return $.trim(item);                                                                                         // 11\n        });                                                                                                            // 12\n      }                                                                                                                // 13\n      return val;                                                                                                      // 14\n    },                                                                                                                 // 15\n    \"number\": AutoForm.Utility.stringToNumber,                                                                         // 16\n    \"numberArray\": function (val) {                                                                                    // 17\n      if (typeof val === \"string\") {                                                                                   // 18\n        val = val.split(\",\");                                                                                          // 19\n        return _.map(val, function (item) {                                                                            // 20\n          item = $.trim(item);                                                                                         // 21\n          return AutoForm.Utility.stringToNumber(item);                                                                // 22\n        });                                                                                                            // 23\n      }                                                                                                                // 24\n      return val;                                                                                                      // 25\n    },                                                                                                                 // 26\n    \"boolean\": AutoForm.Utility.stringToBool,                                                                          // 27\n    \"booleanArray\": function (val) {                                                                                   // 28\n      if (typeof val === \"string\") {                                                                                   // 29\n        val = val.split(\",\");                                                                                          // 30\n        return _.map(val, function (item) {                                                                            // 31\n          item = $.trim(item);                                                                                         // 32\n          return AutoForm.Utility.stringToBool(item);                                                                  // 33\n        });                                                                                                            // 34\n      }                                                                                                                // 35\n      return val;                                                                                                      // 36\n    },                                                                                                                 // 37\n    \"date\": AutoForm.Utility.stringToDate,                                                                             // 38\n    \"dateArray\": function (val) {                                                                                      // 39\n      if (typeof val === \"string\") {                                                                                   // 40\n        val = val.split(\",\");                                                                                          // 41\n        return _.map(val, function (item) {                                                                            // 42\n          item = $.trim(item);                                                                                         // 43\n          return AutoForm.Utility.stringToDate(item);                                                                  // 44\n        });                                                                                                            // 45\n      }                                                                                                                // 46\n      return val;                                                                                                      // 47\n    }                                                                                                                  // 48\n  },                                                                                                                   // 49\n  contextAdjust: function (context) {                                                                                  // 50\n    if (typeof context.atts.maxlength === \"undefined\" && typeof context.max === \"number\") {                            // 51\n      context.atts.maxlength = context.max;                                                                            // 52\n    }                                                                                                                  // 53\n    return context;                                                                                                    // 54\n  }                                                                                                                    // 55\n});                                                                                                                    // 56\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/textarea/template.textarea.js                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afTextarea\");                                                                                    // 2\nTemplate[\"afTextarea\"] = new Template(\"Template.afTextarea\", (function() {                                             // 3\n  var view = this;                                                                                                     // 4\n  return HTML.TEXTAREA(HTML.Attrs(function() {                                                                         // 5\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 6\n  }, {                                                                                                                 // 7\n    value: function() {                                                                                                // 8\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 9\n    }                                                                                                                  // 10\n  }));                                                                                                                 // 11\n}));                                                                                                                   // 12\n                                                                                                                       // 13\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/textarea/textarea.js                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"textarea\", {                                                                                    // 1\n  template: \"afTextarea\",                                                                                              // 2\n  valueConverters: {                                                                                                   // 3\n    \"string\": function (val) {                                                                                         // 4\n      return val;                                                                                                      // 5\n    },                                                                                                                 // 6\n    \"stringArray\": function (val) {                                                                                    // 7\n      if (typeof val === \"string\" && val.length > 0) {                                                                 // 8\n        return linesToArray(val);                                                                                      // 9\n      }                                                                                                                // 10\n      return val;                                                                                                      // 11\n    },                                                                                                                 // 12\n    \"number\": AutoForm.Utility.stringToNumber,                                                                         // 13\n    \"numberArray\": function (val) {                                                                                    // 14\n      if (typeof val === \"string\" && val.length > 0) {                                                                 // 15\n        var arr = linesToArray(val);                                                                                   // 16\n        return _.map(arr, function (item) {                                                                            // 17\n          return AutoForm.Utility.stringToNumber(item);                                                                // 18\n        });                                                                                                            // 19\n      }                                                                                                                // 20\n      return val;                                                                                                      // 21\n    },                                                                                                                 // 22\n    \"boolean\": AutoForm.Utility.stringToBool,                                                                          // 23\n    \"booleanArray\": function (val) {                                                                                   // 24\n      if (typeof val === \"string\" && val.length > 0) {                                                                 // 25\n        var arr = linesToArray(val);                                                                                   // 26\n        return _.map(arr, function (item) {                                                                            // 27\n          return AutoForm.Utility.stringToBool(item);                                                                  // 28\n        });                                                                                                            // 29\n      }                                                                                                                // 30\n      return val;                                                                                                      // 31\n    },                                                                                                                 // 32\n    \"date\": AutoForm.Utility.stringToDate,                                                                             // 33\n    \"dateArray\": function (val) {                                                                                      // 34\n      if (typeof val === \"string\" && val.length > 0) {                                                                 // 35\n        var arr = linesToArray(val);                                                                                   // 36\n        return _.map(arr, function (item) {                                                                            // 37\n          return AutoForm.Utility.stringToDate(item);                                                                  // 38\n        });                                                                                                            // 39\n      }                                                                                                                // 40\n      return val;                                                                                                      // 41\n    }                                                                                                                  // 42\n  },                                                                                                                   // 43\n  contextAdjust: function (context) {                                                                                  // 44\n    if (typeof context.atts.maxlength === \"undefined\" && typeof context.max === \"number\") {                            // 45\n      context.atts.maxlength = context.max;                                                                            // 46\n    }                                                                                                                  // 47\n    return context;                                                                                                    // 48\n  }                                                                                                                    // 49\n});                                                                                                                    // 50\n                                                                                                                       // 51\nfunction linesToArray(text) {                                                                                          // 52\n  text = text.split('\\n');                                                                                             // 53\n  var lines = [];                                                                                                      // 54\n  _.each(text, function (line) {                                                                                       // 55\n    line = $.trim(line);                                                                                               // 56\n    if (line.length) {                                                                                                 // 57\n      lines.push(line);                                                                                                // 58\n    }                                                                                                                  // 59\n  });                                                                                                                  // 60\n  return lines;                                                                                                        // 61\n}                                                                                                                      // 62\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/time/template.time.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputTime\");                                                                                   // 2\nTemplate[\"afInputTime\"] = new Template(\"Template.afInputTime\", (function() {                                           // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"time\",                                                                                                      // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/time/time.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"time\", {                                                                                        // 1\n  template: \"afInputTime\",                                                                                             // 2\n  valueConverters: {                                                                                                   // 3\n    \"stringArray\": function (val) {                                                                                    // 4\n      if (typeof val === \"string\" && val.length > 0) {                                                                 // 5\n        return [val];                                                                                                  // 6\n      }                                                                                                                // 7\n      return val;                                                                                                      // 8\n    }                                                                                                                  // 9\n  }                                                                                                                    // 10\n});                                                                                                                    // 11\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/url/template.url.js                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputUrl\");                                                                                    // 2\nTemplate[\"afInputUrl\"] = new Template(\"Template.afInputUrl\", (function() {                                             // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"url\",                                                                                                       // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/url/url.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"url\", {                                                                                         // 1\n  template: \"afInputUrl\",                                                                                              // 2\n  valueConverters: {                                                                                                   // 3\n    \"stringArray\": function (val) {                                                                                    // 4\n      if (typeof val === \"string\" && val.length > 0) {                                                                 // 5\n        return [val];                                                                                                  // 6\n      }                                                                                                                // 7\n      return val;                                                                                                      // 8\n    }                                                                                                                  // 9\n  },                                                                                                                   // 10\n  contextAdjust: function (context) {                                                                                  // 11\n    if (typeof context.atts.maxlength === \"undefined\" && typeof context.max === \"number\") {                            // 12\n      context.atts.maxlength = context.max;                                                                            // 13\n    }                                                                                                                  // 14\n    return context;                                                                                                    // 15\n  }                                                                                                                    // 16\n});                                                                                                                    // 17\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/week/template.week.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afInputWeek\");                                                                                   // 2\nTemplate[\"afInputWeek\"] = new Template(\"Template.afInputWeek\", (function() {                                           // 3\n  var view = this;                                                                                                     // 4\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 5\n    type: \"week\",                                                                                                      // 6\n    value: function() {                                                                                                // 7\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 8\n    }                                                                                                                  // 9\n  }, function() {                                                                                                      // 10\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 11\n  }));                                                                                                                 // 12\n}));                                                                                                                   // 13\n                                                                                                                       // 14\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/inputTypes/week/week.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAutoForm.addInputType(\"week\", {                                                                                        // 1\n  template: \"afInputWeek\",                                                                                             // 2\n  valueConverters: {                                                                                                   // 3\n    \"stringArray\": function (val) {                                                                                    // 4\n      if (typeof val === \"string\" && val.length > 0) {                                                                 // 5\n        return [val];                                                                                                  // 6\n      }                                                                                                                // 7\n      return val;                                                                                                      // 8\n    }                                                                                                                  // 9\n  }                                                                                                                    // 10\n});                                                                                                                    // 11\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/autoForm/template.autoForm.js                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"autoForm\");                                                                                      // 2\nTemplate[\"autoForm\"] = new Template(\"Template.autoForm\", (function() {                                                 // 3\n  var view = this;                                                                                                     // 4\n  return Blaze.Unless(function() {                                                                                     // 5\n    return Spacebars.call(view.lookup(\"afDestroyUpdateForm\"));                                                         // 6\n  }, function() {                                                                                                      // 7\n    return [ \"\\n  \\n  \\n  \", HTML.FORM(HTML.Attrs(function() {                                                         // 8\n      return Spacebars.attrMustache(view.lookup(\"atts\"));                                                              // 9\n    }), \"\\n    \", Spacebars.With(function() {                                                                          // 10\n      return Spacebars.dataMustache(view.lookup(\"innerContext\"), view.lookup(\"..\"));                                   // 11\n    }, function() {                                                                                                    // 12\n      return [ \"\\n    \", Blaze._InOuterTemplateScope(view, function() {                                                // 13\n        return Blaze._TemplateWith(function() {                                                                        // 14\n          return Spacebars.call(view.lookup(\".\"));                                                                     // 15\n        }, function() {                                                                                                // 16\n          return Spacebars.include(function() {                                                                        // 17\n            return Spacebars.call(view.templateContentBlock);                                                          // 18\n          });                                                                                                          // 19\n        });                                                                                                            // 20\n      }), \"\\n    \" ];                                                                                                  // 21\n    }), \"\\n  \"), \"\\n  \" ];                                                                                             // 22\n  });                                                                                                                  // 23\n}));                                                                                                                   // 24\n                                                                                                                       // 25\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/autoForm/autoForm.js                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar contextDependency = new Tracker.Dependency();                                                                      // 1\n                                                                                                                       // 2\nTemplate.autoForm.helpers({                                                                                            // 3\n  atts: function autoFormTplAtts() {                                                                                   // 4\n    var context = _.clone(this);                                                                                       // 5\n                                                                                                                       // 6\n    // By default, we add the `novalidate=\"novalidate\"` attribute to our form,                                         // 7\n    // unless the user passes `validation=\"browser\"`.                                                                  // 8\n    if (context.validation !== \"browser\" && !context.novalidate) {                                                     // 9\n      context.novalidate = \"novalidate\";                                                                               // 10\n    }                                                                                                                  // 11\n    // After removing all of the props we know about, everything else should                                           // 12\n    // become a form attribute.                                                                                        // 13\n    // XXX Would be better to use a whitelist of HTML attributes allowed on form elements                              // 14\n    return _.omit(context, \"schema\", \"collection\", \"validation\", \"doc\", \"resetOnSuccess\",                              // 15\n        \"type\", \"template\", \"autosave\", \"meteormethod\", \"filter\", \"autoConvert\", \"removeEmptyStrings\", \"trimStrings\"); // 16\n  },                                                                                                                   // 17\n  innerContext: function autoFormTplContext(outerContext) {                                                            // 18\n    var formId = this.id || defaultFormId;                                                                             // 19\n                                                                                                                       // 20\n    contextDependency.depend();                                                                                        // 21\n                                                                                                                       // 22\n    // Set up the context to be used for everything within the autoform.                                               // 23\n    var innerContext = {_af: formData[formId]};                                                                        // 24\n                                                                                                                       // 25\n    // Preserve outer context, allowing access within autoForm block without needing ..                                // 26\n    _.extend(innerContext, outerContext);                                                                              // 27\n    return innerContext;                                                                                               // 28\n  },                                                                                                                   // 29\n  afDestroyUpdateForm: function () {                                                                                   // 30\n    return afDestroyUpdateForm.get();                                                                                  // 31\n  }                                                                                                                    // 32\n});                                                                                                                    // 33\n                                                                                                                       // 34\nTemplate.autoForm.created = function autoFormCreated() {                                                               // 35\n  var template = this;                                                                                                 // 36\n                                                                                                                       // 37\n  template.autorun(function () {                                                                                       // 38\n    var data = Template.currentData(); // rerun when current data changes                                              // 39\n    var formId = data.id || defaultFormId;                                                                             // 40\n                                                                                                                       // 41\n    // rerun when manually invalidated                                                                                 // 42\n    if (!formDeps[formId]) {                                                                                           // 43\n      formDeps[formId] = new Tracker.Dependency();                                                                     // 44\n    }                                                                                                                  // 45\n    formDeps[formId].depend();                                                                                         // 46\n                                                                                                                       // 47\n    // cache template instance for lookup by formId                                                                    // 48\n    templatesById[formId] = template;                                                                                  // 49\n                                                                                                                       // 50\n    // When we change the form, loading a different doc, reloading the current doc, etc.,                              // 51\n    // we also want to reset the array counts for the form                                                             // 52\n    arrayTracker.resetForm(formId);                                                                                    // 53\n                                                                                                                       // 54\n    var collection = AutoForm.Utility.lookup(data.collection);                                                         // 55\n    var ss = AutoForm.Utility.getSimpleSchemaFromContext(data, formId);                                                // 56\n                                                                                                                       // 57\n    // Clone the doc so that docToForm and other modifications do not change                                           // 58\n    // the original referenced object.                                                                                 // 59\n    var doc = data.doc ? EJSON.clone(data.doc) : null;                                                                 // 60\n                                                                                                                       // 61\n    // Update cached form values for hot code reload persistence                                                       // 62\n    if (data.preserveForm === false) {                                                                                 // 63\n      formPreserve.unregisterForm(formId);                                                                             // 64\n    } else if (!formPreserve.formIsRegistered(formId)) {                                                               // 65\n      formPreserve.registerForm(formId, function autoFormRegFormCallback() {                                           // 66\n        return getFormValues(template, formId, ss).insertDoc;                                                          // 67\n      });                                                                                                              // 68\n    }                                                                                                                  // 69\n                                                                                                                       // 70\n    // Retain doc values after a \"hot code push\", if possible                                                          // 71\n    var retrievedDoc = formPreserve.getDocument(formId);                                                               // 72\n    if (retrievedDoc !== false) {                                                                                      // 73\n      // Ensure we keep the _id property which may not be present in retrievedDoc.                                     // 74\n      doc = _.extend(doc || {}, retrievedDoc);                                                                         // 75\n    }                                                                                                                  // 76\n                                                                                                                       // 77\n    var mDoc;                                                                                                          // 78\n    if (doc && !_.isEmpty(doc)) {                                                                                      // 79\n      var hookCtx = {formId: formId};                                                                                  // 80\n      // Pass doc through docToForm hooks                                                                              // 81\n      _.each(Hooks.getHooks(formId, 'docToForm'), function autoFormEachDocToForm(hook) {                               // 82\n        doc = hook.call(hookCtx, doc, ss, formId);                                                                     // 83\n      });                                                                                                              // 84\n      // Create a \"flat doc\" that can be used to easily get values for corresponding                                   // 85\n      // form fields.                                                                                                  // 86\n      mDoc = new MongoObject(doc);                                                                                     // 87\n      fd.sourceDoc(formId, mDoc);                                                                                      // 88\n    } else {                                                                                                           // 89\n      fd.sourceDoc(formId, null);                                                                                      // 90\n    }                                                                                                                  // 91\n                                                                                                                       // 92\n    // Check autosave                                                                                                  // 93\n    var autosave, resetOnSuccess;                                                                                      // 94\n    if (data.autosave === true && data.type === \"update\") {                                                            // 95\n      // Autosave and never reset on success                                                                           // 96\n      autosave = true;                                                                                                 // 97\n      resetOnSuccess = false;                                                                                          // 98\n    } else {                                                                                                           // 99\n      autosave = false;                                                                                                // 100\n      resetOnSuccess = data.resetOnSuccess;                                                                            // 101\n    }                                                                                                                  // 102\n                                                                                                                       // 103\n    // Cache form data for lookup by form ID                                                                           // 104\n    formData[formId] = {                                                                                               // 105\n      formId: formId,                                                                                                  // 106\n      collection: collection,                                                                                          // 107\n      ss: ss,                                                                                                          // 108\n      ssIsOverride: !!collection && !!data.schema,                                                                     // 109\n      doc: doc,                                                                                                        // 110\n      mDoc: mDoc,                                                                                                      // 111\n      validationType: (data.validation == null ? \"submitThenKeyup\" : data.validation),                                 // 112\n      submitType: data.type,                                                                                           // 113\n      submitMethod: data.meteormethod,                                                                                 // 114\n      resetOnSuccess: resetOnSuccess,                                                                                  // 115\n      autosave: autosave,                                                                                              // 116\n      filter: data.filter,                                                                                             // 117\n      autoConvert: data.autoConvert,                                                                                   // 118\n      removeEmptyStrings: data.removeEmptyStrings,                                                                     // 119\n      trimStrings: data.trimStrings                                                                                    // 120\n    };                                                                                                                 // 121\n                                                                                                                       // 122\n    // This ensures that anything dependent on field values will properly                                              // 123\n    // react to field values set from the database document. That is,                                                  // 124\n    // computations dependent on AutoForm.getFieldValue will rerun properly                                            // 125\n    // when the form is initially rendered using values from `doc`.                                                    // 126\n    setTimeout(function () {                                                                                           // 127\n      updateAllTrackedFieldValues(formId);                                                                             // 128\n    }, 0);                                                                                                             // 129\n                                                                                                                       // 130\n    contextDependency.changed();                                                                                       // 131\n  });                                                                                                                  // 132\n};                                                                                                                     // 133\n                                                                                                                       // 134\nTemplate.autoForm.destroyed = function autoFormDestroyed() {                                                           // 135\n  var self = this;                                                                                                     // 136\n  var formId = self.data.id || defaultFormId;                                                                          // 137\n                                                                                                                       // 138\n  // TODO if formId was changing reactively during life of instance,                                                   // 139\n  // some data won't be removed by the calls below.                                                                    // 140\n                                                                                                                       // 141\n  // Remove from templatesById list                                                                                    // 142\n  if (templatesById[formId]) {                                                                                         // 143\n    delete templatesById[formId];                                                                                      // 144\n  }                                                                                                                    // 145\n                                                                                                                       // 146\n  // Remove from data list                                                                                             // 147\n  if (formData[formId]) {                                                                                              // 148\n    delete formData[formId];                                                                                           // 149\n  }                                                                                                                    // 150\n                                                                                                                       // 151\n  // Remove from array fields list                                                                                     // 152\n  arrayTracker.untrackForm(formId);                                                                                    // 153\n                                                                                                                       // 154\n  // Remove from field values                                                                                          // 155\n  if (formValues[formId]) {                                                                                            // 156\n    delete formValues[formId];                                                                                         // 157\n  }                                                                                                                    // 158\n                                                                                                                       // 159\n  // Unregister form preservation                                                                                      // 160\n  formPreserve.unregisterForm(formId);                                                                                 // 161\n};                                                                                                                     // 162\n                                                                                                                       // 163\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/quickForm/template.quickForm.js                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"quickForm\");                                                                                     // 2\nTemplate[\"quickForm\"] = new Template(\"Template.quickForm\", (function() {                                               // 3\n  var view = this;                                                                                                     // 4\n  return Spacebars.With(function() {                                                                                   // 5\n    return Spacebars.call(view.lookup(\"innerContext\"));                                                                // 6\n  }, function() {                                                                                                      // 7\n    return [ \"\\n    \", Spacebars.With(function() {                                                                     // 8\n      return Spacebars.dataMustache(view.lookup(\"afTemplateName\"), \"quickForm\", Spacebars.dot(view.lookup(\"..\"), \"template\"));\n    }, function() {                                                                                                    // 10\n      return [ \"\\n      \", Blaze._TemplateWith(function() {                                                            // 11\n        return {                                                                                                       // 12\n          template: Spacebars.call(view.lookup(\".\")),                                                                  // 13\n          data: Spacebars.call(view.lookup(\"..\"))                                                                      // 14\n        };                                                                                                             // 15\n      }, function() {                                                                                                  // 16\n        return Spacebars.include(function() {                                                                          // 17\n          return Spacebars.call(Template.__dynamic);                                                                   // 18\n        });                                                                                                            // 19\n      }), \"\\n    \" ];                                                                                                  // 20\n    }), \"\\n  \" ];                                                                                                      // 21\n  });                                                                                                                  // 22\n}));                                                                                                                   // 23\n                                                                                                                       // 24\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/quickForm/quickForm.js                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate.quickForm.helpers({                                                                                           // 1\n  innerContext: function quickFormContext() {                                                                          // 2\n    var atts = this;                                                                                                   // 3\n                                                                                                                       // 4\n    // Pass along quickForm context to autoForm context, minus a few                                                   // 5\n    // properties that are specific to quickForms.                                                                     // 6\n    var qfAutoFormContext = _.omit(atts, \"buttonContent\", \"buttonClasses\", \"fields\", \"omitFields\");                    // 7\n                                                                                                                       // 8\n    // Determine whether we want to render a submit button                                                             // 9\n    var qfShouldRenderButton = (atts.buttonContent !== false && atts.type !== \"readonly\" && atts.type !== \"disabled\"); // 10\n                                                                                                                       // 11\n    return {                                                                                                           // 12\n      qfAutoFormContext: qfAutoFormContext,                                                                            // 13\n      atts: atts,                                                                                                      // 14\n      qfShouldRenderButton: qfShouldRenderButton                                                                       // 15\n    };                                                                                                                 // 16\n  }                                                                                                                    // 17\n});                                                                                                                    // 18\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/afArrayField/template.afArrayField.js                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afArrayField\");                                                                                  // 2\nTemplate[\"afArrayField\"] = new Template(\"Template.afArrayField\", (function() {                                         // 3\n  var view = this;                                                                                                     // 4\n  return Spacebars.With(function() {                                                                                   // 5\n    return Spacebars.dataMustache(view.lookup(\"innerContext\"), Spacebars.kw({                                          // 6\n      atts: view.lookup(\".\")                                                                                           // 7\n    }));                                                                                                               // 8\n  }, function() {                                                                                                      // 9\n    return [ \"\\n    \", Spacebars.With(function() {                                                                     // 10\n      return Spacebars.dataMustache(view.lookup(\"afTemplateName\"), \"afArrayField\", Spacebars.dot(view.lookup(\"..\"), \"template\"));\n    }, function() {                                                                                                    // 12\n      return [ \"\\n      \", Blaze._TemplateWith(function() {                                                            // 13\n        return {                                                                                                       // 14\n          template: Spacebars.call(view.lookup(\".\")),                                                                  // 15\n          data: Spacebars.call(view.lookup(\"..\"))                                                                      // 16\n        };                                                                                                             // 17\n      }, function() {                                                                                                  // 18\n        return Spacebars.include(function() {                                                                          // 19\n          return Spacebars.call(Template.__dynamic);                                                                   // 20\n        });                                                                                                            // 21\n      }), \"\\n    \" ];                                                                                                  // 22\n    }), \"\\n  \" ];                                                                                                      // 23\n  });                                                                                                                  // 24\n}));                                                                                                                   // 25\n                                                                                                                       // 26\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/afArrayField/afArrayField.js                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate.afArrayField.helpers({                                                                                        // 1\n  innerContext: function afArrayFieldContext(options) {                                                                // 2\n    var c = AutoForm.Utility.normalizeContext(options.hash, \"afArrayField\");                                           // 3\n    var name = c.atts.name;                                                                                            // 4\n    var fieldMinCount = c.atts.minCount || 0;                                                                          // 5\n    var fieldMaxCount = c.atts.maxCount || Infinity;                                                                   // 6\n    var ss = c.af.ss;                                                                                                  // 7\n    var formId = c.af.formId;                                                                                          // 8\n                                                                                                                       // 9\n    // Init the array tracking for this field                                                                          // 10\n    var docCount = fd.getDocCountForField(formId, name);                                                               // 11\n    if (docCount == null) {                                                                                            // 12\n      docCount = c.atts.initialCount;                                                                                  // 13\n    }                                                                                                                  // 14\n    arrayTracker.initField(formId, name, ss, docCount, fieldMinCount, fieldMaxCount);                                  // 15\n                                                                                                                       // 16\n    return {                                                                                                           // 17\n      atts: c.atts                                                                                                     // 18\n    };                                                                                                                 // 19\n  }                                                                                                                    // 20\n});                                                                                                                    // 21\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/afEachArrayItem/template.afEachArrayItem.js                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afEachArrayItem\");                                                                               // 2\nTemplate[\"afEachArrayItem\"] = new Template(\"Template.afEachArrayItem\", (function() {                                   // 3\n  var view = this;                                                                                                     // 4\n  return [ \"\\n  \", Spacebars.With(function() {                                                                         // 5\n    return Spacebars.dataMustache(view.lookup(\"innerContext\"), Spacebars.kw({                                          // 6\n      atts: view.lookup(\".\")                                                                                           // 7\n    }));                                                                                                               // 8\n  }, function() {                                                                                                      // 9\n    return [ \"\\n    \", Blaze.Each(function() {                                                                         // 10\n      return Spacebars.call(view.lookup(\".\"));                                                                         // 11\n    }, function() {                                                                                                    // 12\n      return [ \"\\n    \", Blaze.If(function() {                                                                         // 13\n        return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"removed\"));                                             // 14\n      }, function() {                                                                                                  // 15\n        return [ \"\\n    \", HTML.INPUT({                                                                                // 16\n          type: \"hidden\",                                                                                              // 17\n          name: function() {                                                                                           // 18\n            return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"name\"));                                        // 19\n          },                                                                                                           // 20\n          \"data-schema-key\": function() {                                                                              // 21\n            return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"name\"));                                        // 22\n          },                                                                                                           // 23\n          \"data-null-value\": \"true\",                                                                                   // 24\n          value: \"\"                                                                                                    // 25\n        }), \"\\n    \" ];                                                                                                // 26\n      }, function() {                                                                                                  // 27\n        return [ \"\\n    \", Blaze._InOuterTemplateScope(view, function() {                                              // 28\n          return Blaze._TemplateWith(function() {                                                                      // 29\n            return Spacebars.call(view.lookup(\".\"));                                                                   // 30\n          }, function() {                                                                                              // 31\n            return Spacebars.include(function() {                                                                      // 32\n              return Spacebars.call(view.templateContentBlock);                                                        // 33\n            });                                                                                                        // 34\n          });                                                                                                          // 35\n        }), \"\\n    \" ];                                                                                                // 36\n      }), \"\\n    \" ];                                                                                                  // 37\n    }), \"\\n  \" ];                                                                                                      // 38\n  }) ];                                                                                                                // 39\n}));                                                                                                                   // 40\n                                                                                                                       // 41\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/afEachArrayItem/afEachArrayItem.js                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate.afEachArrayItem.helpers({                                                                                     // 1\n  innerContext: function afEachArrayItemContext(options) {                                                             // 2\n    var c = AutoForm.Utility.normalizeContext(options.hash, \"afEachArrayItem\");                                        // 3\n    var formId = c.af.formId;                                                                                          // 4\n    var name = c.atts.name;                                                                                            // 5\n                                                                                                                       // 6\n    var docCount = fd.getDocCountForField(formId, name);                                                               // 7\n    if (docCount == null) {                                                                                            // 8\n      docCount = c.atts.initialCount;                                                                                  // 9\n    }                                                                                                                  // 10\n    arrayTracker.initField(formId, name, c.af.ss, docCount, c.atts.minCount, c.atts.maxCount);                         // 11\n                                                                                                                       // 12\n    return arrayTracker.getField(formId, name);                                                                        // 13\n  }                                                                                                                    // 14\n});                                                                                                                    // 15\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/afFieldInput/template.afFieldInput.js                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afFieldInput\");                                                                                  // 2\nTemplate[\"afFieldInput\"] = new Template(\"Template.afFieldInput\", (function() {                                         // 3\n  var view = this;                                                                                                     // 4\n  return Spacebars.With(function() {                                                                                   // 5\n    return Spacebars.call(view.lookup(\"getComponentDef\"));                                                             // 6\n  }, function() {                                                                                                      // 7\n    return [ \"\\n    \", Spacebars.With(function() {                                                                     // 8\n      return Spacebars.dataMustache(view.lookup(\"innerContext\"), Spacebars.kw({                                        // 9\n        atts: view.lookup(\"..\"),                                                                                       // 10\n        componentDef: view.lookup(\".\")                                                                                 // 11\n      }));                                                                                                             // 12\n    }, function() {                                                                                                    // 13\n      return [ \"\\n      \", Spacebars.With(function() {                                                                 // 14\n        return Spacebars.dataMustache(view.lookup(\"getTemplateName\"), Spacebars.dot(view.lookup(\"..\"), \"template\"), Spacebars.dot(view.lookup(\"...\"), \"template\"));\n      }, function() {                                                                                                  // 16\n        return [ \"\\n        \", Blaze._TemplateWith(function() {                                                        // 17\n          return {                                                                                                     // 18\n            template: Spacebars.call(view.lookup(\".\")),                                                                // 19\n            data: Spacebars.call(view.lookup(\"..\"))                                                                    // 20\n          };                                                                                                           // 21\n        }, function() {                                                                                                // 22\n          return Spacebars.include(function() {                                                                        // 23\n            return Spacebars.call(Template.__dynamic);                                                                 // 24\n          });                                                                                                          // 25\n        }), \"\\n      \" ];                                                                                              // 26\n      }), \"\\n    \" ];                                                                                                  // 27\n    }), \"\\n  \" ];                                                                                                      // 28\n  });                                                                                                                  // 29\n}));                                                                                                                   // 30\n                                                                                                                       // 31\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/afFieldInput/afFieldInput.js                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate.afFieldInput.helpers({                                                                                        // 1\n  getComponentDef: function getComponentDef() {                                                                        // 2\n    // Determine what `type` attribute should be if not set                                                            // 3\n    var inputType = AutoForm.getInputType(this);                                                                       // 4\n    var componentDef = inputTypeDefinitions[inputType];                                                                // 5\n    if (!componentDef) {                                                                                               // 6\n      throw new Error('AutoForm: No component found for rendering input with type \"' + inputType + '\"');               // 7\n    }                                                                                                                  // 8\n    return componentDef;                                                                                               // 9\n  },                                                                                                                   // 10\n  // similar to afTemplateName helper, but we have fewer layers of fallback, and we fall back                          // 11\n  // lastly to a template without an _ piece at the end                                                                // 12\n  getTemplateName: function getTemplateName(inputTemplateName, styleTemplateName) {                                    // 13\n    var self = this, schemaAutoFormDefs, templateFromAncestor, defaultTemplate;                                        // 14\n                                                                                                                       // 15\n    // In simplest case, just try to combine the two given strings.                                                    // 16\n    if (styleTemplateName && Template[inputTemplateName + '_' + styleTemplateName]) {                                  // 17\n      return inputTemplateName + '_' + styleTemplateName;                                                              // 18\n    }                                                                                                                  // 19\n                                                                                                                       // 20\n    // If the attributes provided a styleTemplateName but that template didn't exist, show a warning                   // 21\n    if (styleTemplateName && AutoForm._debug) {                                                                        // 22\n      console.warn(inputTemplateName + '_' + styleTemplateName + ' is not a valid template name. Falling back to a different template.');\n    }                                                                                                                  // 24\n                                                                                                                       // 25\n    // Get `autoform` object from the schema, if present.                                                              // 26\n    if (self.atts && self.atts.name) {                                                                                 // 27\n      schemaAutoFormDefs = AutoForm.getSchemaForField(self.atts.name).autoform;                                        // 28\n    }                                                                                                                  // 29\n                                                                                                                       // 30\n    // Fallback #1: autoform.template from the schema                                                                  // 31\n    if (schemaAutoFormDefs && schemaAutoFormDefs.template && Template[inputTemplateName + '_' + schemaAutoFormDefs.template]) {\n      return inputTemplateName + '_' + schemaAutoFormDefs.template;                                                    // 33\n    }                                                                                                                  // 34\n                                                                                                                       // 35\n    // Fallback #2: template attribute on an ancestor component within the same form                                   // 36\n    templateFromAncestor = AutoForm.findAttribute(\"template\");                                                         // 37\n    if (templateFromAncestor && Template[inputTemplateName + '_' + templateFromAncestor]) {                            // 38\n      return inputTemplateName + '_' + templateFromAncestor;                                                           // 39\n    }                                                                                                                  // 40\n                                                                                                                       // 41\n    // Fallback #3: Default template, as set by AutoForm.setDefaultTemplate                                            // 42\n    defaultTemplate = AutoForm.getDefaultTemplate();                                                                   // 43\n    if (defaultTemplate && Template[inputTemplateName + '_' + defaultTemplate]) {                                      // 44\n      return inputTemplateName + '_' + defaultTemplate;                                                                // 45\n    }                                                                                                                  // 46\n                                                                                                                       // 47\n    // Fallback #4: Just the inputTemplateName with no custom styled piece                                             // 48\n    return inputTemplateName;                                                                                          // 49\n  },                                                                                                                   // 50\n  innerContext: function afFieldInputContext(options) {                                                                // 51\n    var c = AutoForm.Utility.normalizeContext(options.hash, \"afFieldInput\");                                           // 52\n                                                                                                                       // 53\n    var ss = c.af.ss;                                                                                                  // 54\n    var defs = c.defs;                                                                                                 // 55\n                                                                                                                       // 56\n    // Adjust for array fields if necessary                                                                            // 57\n    var defaultValue = defs.defaultValue; //make sure to use pre-adjustment defaultValue for arrays                    // 58\n    if (defs.type === Array) {                                                                                         // 59\n      defs = ss.schema(c.atts.name + \".$\");                                                                            // 60\n    }                                                                                                                  // 61\n                                                                                                                       // 62\n    // Get inputTypeDefinition based on `type` attribute                                                               // 63\n    var componentDef = options.hash.componentDef;                                                                      // 64\n                                                                                                                       // 65\n    // Get input value                                                                                                 // 66\n    var value = getInputValue(c.atts, c.atts.value, c.af.mDoc, defaultValue, componentDef);                            // 67\n                                                                                                                       // 68\n    // Mark field value as changed for reactive updates                                                                // 69\n    // We need to defer this until the element will be                                                                 // 70\n    // added to the DOM. Otherwise, AutoForm.getFieldValue                                                             // 71\n    // will not pick up the new value when there are #if etc.                                                          // 72\n    // blocks involved.                                                                                                // 73\n    // See https://github.com/aldeed/meteor-autoform/issues/461                                                        // 74\n   setTimeout(function () {                                                                                            // 75\n      updateTrackedFieldValue(c.af.formId, c.atts.name);                                                               // 76\n    }, 0);                                                                                                             // 77\n                                                                                                                       // 78\n    // Build input data context                                                                                        // 79\n    var iData = getInputData(defs, c.atts, value, ss.label(c.atts.name), c.af.submitType);                             // 80\n                                                                                                                       // 81\n    // Adjust and return context                                                                                       // 82\n    return (typeof componentDef.contextAdjust === \"function\") ? componentDef.contextAdjust(iData) : iData;             // 83\n  }                                                                                                                    // 84\n});                                                                                                                    // 85\n                                                                                                                       // 86\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/afFormGroup/template.afFormGroup.js                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afFormGroup\");                                                                                   // 2\nTemplate[\"afFormGroup\"] = new Template(\"Template.afFormGroup\", (function() {                                           // 3\n  var view = this;                                                                                                     // 4\n  return Spacebars.With(function() {                                                                                   // 5\n    return Spacebars.dataMustache(view.lookup(\"innerContext\"), Spacebars.kw({                                          // 6\n      atts: view.lookup(\".\")                                                                                           // 7\n    }));                                                                                                               // 8\n  }, function() {                                                                                                      // 9\n    return [ \"\\n    \", Spacebars.With(function() {                                                                     // 10\n      return Spacebars.dataMustache(view.lookup(\"afTemplateName\"), \"afFormGroup\", Spacebars.dot(view.lookup(\"..\"), \"template\"));\n    }, function() {                                                                                                    // 12\n      return [ \"\\n      \", Blaze._TemplateWith(function() {                                                            // 13\n        return {                                                                                                       // 14\n          template: Spacebars.call(view.lookup(\".\")),                                                                  // 15\n          data: Spacebars.call(view.lookup(\"..\"))                                                                      // 16\n        };                                                                                                             // 17\n      }, function() {                                                                                                  // 18\n        return Spacebars.include(function() {                                                                          // 19\n          return Spacebars.call(Template.__dynamic);                                                                   // 20\n        });                                                                                                            // 21\n      }), \"\\n    \" ];                                                                                                  // 22\n    }), \"\\n  \" ];                                                                                                      // 23\n  });                                                                                                                  // 24\n}));                                                                                                                   // 25\n                                                                                                                       // 26\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/afFormGroup/afFormGroup.js                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate.afFormGroup.helpers({                                                                                         // 1\n  innerContext: function afFormGroupContext(options) {                                                                 // 2\n    var c = AutoForm.Utility.normalizeContext(options.hash, \"afFormGroup\");                                            // 3\n    return {                                                                                                           // 4\n      skipLabel: (c.atts.label === false),                                                                             // 5\n      afFieldLabelAtts: formGroupLabelAtts(c.atts),                                                                    // 6\n      afFieldInputAtts: formGroupInputAtts(c.atts),                                                                    // 7\n      atts: {name: c.atts.name},                                                                                       // 8\n      labelText: (typeof c.atts.label === \"string\") ? c.atts.label : null                                              // 9\n    };                                                                                                                 // 10\n  }                                                                                                                    // 11\n});                                                                                                                    // 12\n                                                                                                                       // 13\n/*                                                                                                                     // 14\n * Private                                                                                                             // 15\n */                                                                                                                    // 16\n                                                                                                                       // 17\nfunction formGroupLabelAtts(atts) {                                                                                    // 18\n  // Separate label options from input options; label items begin with \"label-\"                                        // 19\n  var labelAtts = {};                                                                                                  // 20\n  _.each(atts, function autoFormLabelAttsEach(val, key) {                                                              // 21\n    if (key.indexOf(\"label-\") === 0) {                                                                                 // 22\n      labelAtts[key.substring(6)] = val;                                                                               // 23\n    }                                                                                                                  // 24\n  });                                                                                                                  // 25\n  return labelAtts;                                                                                                    // 26\n}                                                                                                                      // 27\n                                                                                                                       // 28\nfunction formGroupInputAtts(atts) {                                                                                    // 29\n  // Separate label options from input options; label items begin with \"label-\"                                        // 30\n  // We also don't want the \"label\" option                                                                             // 31\n  var inputAtts = {};                                                                                                  // 32\n  _.each(atts, function autoFormLabelAttsEach(val, key) {                                                              // 33\n    if (key !== \"label\" && key.indexOf(\"label-\") !== 0) {                                                              // 34\n      inputAtts[key] = val;                                                                                            // 35\n    }                                                                                                                  // 36\n  });                                                                                                                  // 37\n  return inputAtts;                                                                                                    // 38\n}                                                                                                                      // 39\n                                                                                                                       // 40\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/afObjectField/template.afObjectField.js                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afObjectField\");                                                                                 // 2\nTemplate[\"afObjectField\"] = new Template(\"Template.afObjectField\", (function() {                                       // 3\n  var view = this;                                                                                                     // 4\n  return Spacebars.With(function() {                                                                                   // 5\n    return {                                                                                                           // 6\n      atts: Spacebars.call(view.lookup(\".\"))                                                                           // 7\n    };                                                                                                                 // 8\n  }, function() {                                                                                                      // 9\n    return [ \"\\n    \", Spacebars.With(function() {                                                                     // 10\n      return Spacebars.dataMustache(view.lookup(\"afTemplateName\"), \"afObjectField\", Spacebars.dot(view.lookup(\"..\"), \"template\"));\n    }, function() {                                                                                                    // 12\n      return [ \"\\n      \", Blaze._TemplateWith(function() {                                                            // 13\n        return {                                                                                                       // 14\n          template: Spacebars.call(view.lookup(\".\")),                                                                  // 15\n          data: Spacebars.call(view.lookup(\"..\"))                                                                      // 16\n        };                                                                                                             // 17\n      }, function() {                                                                                                  // 18\n        return Spacebars.include(function() {                                                                          // 19\n          return Spacebars.call(Template.__dynamic);                                                                   // 20\n        });                                                                                                            // 21\n      }), \"\\n    \" ];                                                                                                  // 22\n    }), \"\\n  \" ];                                                                                                      // 23\n  });                                                                                                                  // 24\n}));                                                                                                                   // 25\n                                                                                                                       // 26\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/afQuickField/template.afQuickField.js                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afQuickField\");                                                                                  // 2\nTemplate[\"afQuickField\"] = new Template(\"Template.afQuickField\", (function() {                                         // 3\n  var view = this;                                                                                                     // 4\n  return Blaze.If(function() {                                                                                         // 5\n    return Spacebars.dataMustache(view.lookup(\"isGroup\"), Spacebars.kw({                                               // 6\n      atts: view.lookup(\".\")                                                                                           // 7\n    }));                                                                                                               // 8\n  }, function() {                                                                                                      // 9\n    return [ \"\\n    \", Spacebars.include(view.lookupTemplate(\"afObjectField\")), \"\\n  \" ];                              // 10\n  }, function() {                                                                                                      // 11\n    return [ \"\\n    \", Blaze.If(function() {                                                                           // 12\n      return Spacebars.dataMustache(view.lookup(\"isFieldArray\"), Spacebars.kw({                                        // 13\n        atts: view.lookup(\".\")                                                                                         // 14\n      }));                                                                                                             // 15\n    }, function() {                                                                                                    // 16\n      return [ \"\\n      \", Spacebars.include(view.lookupTemplate(\"afArrayField\")), \"\\n    \" ];                         // 17\n    }, function() {                                                                                                    // 18\n      return [ \"\\n      \", Blaze._TemplateWith(function() {                                                            // 19\n        return Spacebars.call(view.lookup(\"groupAtts\"));                                                               // 20\n      }, function() {                                                                                                  // 21\n        return Spacebars.include(view.lookupTemplate(\"afFormGroup\"));                                                  // 22\n      }), \"\\n    \" ];                                                                                                  // 23\n    }), \"\\n  \" ];                                                                                                      // 24\n  });                                                                                                                  // 25\n}));                                                                                                                   // 26\n                                                                                                                       // 27\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/afQuickField/afQuickField.js                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate.afQuickField.helpers({                                                                                        // 1\n  isGroup: function afQuickFieldIsGroup(options) {                                                                     // 2\n    var c = AutoForm.Utility.normalizeContext(options.hash, \"afQuickField\");                                           // 3\n    // Render a group of fields if we expect an Object and we don't have options                                       // 4\n    // and we have not overridden the type                                                                             // 5\n    return (c.defs.type === Object && !c.atts.options && !c.atts.type);                                                // 6\n  },                                                                                                                   // 7\n  isFieldArray: function afQuickFieldIsFieldArray(options) {                                                           // 8\n    var c = AutoForm.Utility.normalizeContext(options.hash, \"afQuickField\");                                           // 9\n    // Render an array of fields if we expect an Array and we don't have options                                       // 10\n    // and we have not overridden the type                                                                             // 11\n    return (c.defs.type === Array && !c.atts.options && !c.atts.type);                                                 // 12\n  },                                                                                                                   // 13\n  groupAtts: function afQuickFieldGroupAtts() {                                                                        // 14\n    return _.omit(this, 'fields', 'omitFields');                                                                       // 15\n  }                                                                                                                    // 16\n});                                                                                                                    // 17\n                                                                                                                       // 18\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/afQuickFields/template.afQuickFields.js                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"afQuickFields\");                                                                                 // 2\nTemplate[\"afQuickFields\"] = new Template(\"Template.afQuickFields\", (function() {                                       // 3\n  var view = this;                                                                                                     // 4\n  return Blaze.Each(function() {                                                                                       // 5\n    return Spacebars.dataMustache(view.lookup(\"afFieldNames\"), Spacebars.kw({                                          // 6\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                    // 7\n    }));                                                                                                               // 8\n  }, function() {                                                                                                      // 9\n    return [ \"\\n    \", Spacebars.With(function() {                                                                     // 10\n      return {                                                                                                         // 11\n        name: Spacebars.call(view.lookup(\".\"))                                                                         // 12\n      };                                                                                                               // 13\n    }, function() {                                                                                                    // 14\n      return [ \"\\n    \", Blaze._TemplateWith(function() {                                                              // 15\n        return Spacebars.call(view.lookup(\"quickFieldAtts\"));                                                          // 16\n      }, function() {                                                                                                  // 17\n        return Spacebars.include(view.lookupTemplate(\"afQuickField\"));                                                 // 18\n      }), \"\\n    \" ];                                                                                                  // 19\n    }), \"\\n  \" ];                                                                                                      // 20\n  });                                                                                                                  // 21\n}));                                                                                                                   // 22\n                                                                                                                       // 23\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/components/afQuickFields/afQuickFields.js                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate.afQuickFields.helpers({                                                                                       // 1\n  quickFieldAtts: function afQuickFieldsQuickFieldAtts() {                                                             // 2\n    // Get the attributes that were on the afQuickFields component                                                     // 3\n    var afQuickFieldsComponentAtts = Template.parentData(2);                                                           // 4\n    // It's possible to call {{> afQuickFields}} with no attributes, in which case we                                  // 5\n    // don't want the \"attributes\" because they're really just the parent context.                                     // 6\n    if (afQuickFieldsComponentAtts.atts) {                                                                             // 7\n      afQuickFieldsComponentAtts = {};                                                                                 // 8\n    }                                                                                                                  // 9\n    return _.extend({options: \"auto\"}, afQuickFieldsComponentAtts, this);                                              // 10\n  }                                                                                                                    // 11\n});                                                                                                                    // 12\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/autoform-events.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// all form events handled here                                                                                        // 1\nvar lastAutoSaveElement = null;                                                                                        // 2\n                                                                                                                       // 3\nfunction beginSubmit(formId, template) {                                                                               // 4\n  if (!template || !template.view._domrange)                                                                           // 5\n    return;                                                                                                            // 6\n  // Get user-defined hooks                                                                                            // 7\n  var hooks = Hooks.getHooks(formId, 'beginSubmit');                                                                   // 8\n  if (hooks.length) {                                                                                                  // 9\n    _.each(hooks, function beginSubmitHooks(hook) {                                                                    // 10\n      hook(formId, template);                                                                                          // 11\n    });                                                                                                                // 12\n  } else {                                                                                                             // 13\n    // If there are no user-defined hooks, by default we disable the submit button during submission                   // 14\n    var submitButton = template.find(\"button[type=submit]\") || template.find(\"input[type=submit]\");                    // 15\n    if (submitButton) {                                                                                                // 16\n      submitButton.disabled = true;                                                                                    // 17\n    }                                                                                                                  // 18\n  }                                                                                                                    // 19\n}                                                                                                                      // 20\n                                                                                                                       // 21\nfunction endSubmit(formId, template) {                                                                                 // 22\n  if (!template || !template.view._domrange)                                                                           // 23\n    return;                                                                                                            // 24\n  // Try to avoid incorrect reporting of which input caused autosave                                                   // 25\n  lastAutoSaveElement = null;                                                                                          // 26\n  // Get user-defined hooks                                                                                            // 27\n  var hooks = Hooks.getHooks(formId, 'endSubmit');                                                                     // 28\n  if (hooks.length) {                                                                                                  // 29\n    _.each(hooks, function endSubmitHooks(hook) {                                                                      // 30\n      hook(formId, template);                                                                                          // 31\n    });                                                                                                                // 32\n  } else {                                                                                                             // 33\n    // If there are no user-defined hooks, by default we disable the submit button during submission                   // 34\n    var submitButton = template.find(\"button[type=submit]\") || template.find(\"input[type=submit]\");                    // 35\n    if (submitButton) {                                                                                                // 36\n      submitButton.disabled = false;                                                                                   // 37\n    }                                                                                                                  // 38\n  }                                                                                                                    // 39\n}                                                                                                                      // 40\n                                                                                                                       // 41\nTemplate.autoForm.events({                                                                                             // 42\n  'submit form': function autoFormSubmitHandler(event, template) {                                                     // 43\n    // Gather necessary form info                                                                                      // 44\n    var formId = this.id || defaultFormId;                                                                             // 45\n    var data = formData[formId];                                                                                       // 46\n    var isInsert = (data.submitType === \"insert\");                                                                     // 47\n    var isUpdate = (data.submitType === \"update\");                                                                     // 48\n    var isMethod = (data.submitType === \"method\");                                                                     // 49\n    var method = data.submitMethod;                                                                                    // 50\n    var isNormalSubmit = (!isInsert && !isUpdate && !isMethod);                                                        // 51\n    // ss will be the schema for the `schema` attribute if present,                                                    // 52\n    // else the schema for the collection                                                                              // 53\n    var ss = data.ss;                                                                                                  // 54\n    var ssIsOverride = data.ssIsOverride;                                                                              // 55\n    var collection = data.collection;                                                                                  // 56\n    var currentDoc = data.doc;                                                                                         // 57\n    var docId = currentDoc ? currentDoc._id : null;                                                                    // 58\n    var isValid;                                                                                                       // 59\n                                                                                                                       // 60\n    // Make sure we have a collection if we need one for the requested submit type                                     // 61\n    if (!collection) {                                                                                                 // 62\n      if (isInsert)                                                                                                    // 63\n        throw new Error(\"AutoForm: You must specify a collection when form type is insert.\");                          // 64\n      else if (isUpdate)                                                                                               // 65\n        throw new Error(\"AutoForm: You must specify a collection when form type is update.\");                          // 66\n    }                                                                                                                  // 67\n                                                                                                                       // 68\n    // Prevent browser form submission if we're planning to do our own thing                                           // 69\n    if (!isNormalSubmit) {                                                                                             // 70\n      event.preventDefault();                                                                                          // 71\n    }                                                                                                                  // 72\n                                                                                                                       // 73\n    // Gather hooks                                                                                                    // 74\n    var onSuccess = Hooks.getHooks(formId, 'onSuccess');                                                               // 75\n    var onError = Hooks.getHooks(formId, 'onError');                                                                   // 76\n                                                                                                                       // 77\n    // Prep haltSubmission function                                                                                    // 78\n    function haltSubmission() {                                                                                        // 79\n      event.preventDefault();                                                                                          // 80\n      event.stopPropagation();                                                                                         // 81\n      // Run endSubmit hooks (re-enabled submit button or form, etc.)                                                  // 82\n      endSubmit(formId, template);                                                                                     // 83\n    }                                                                                                                  // 84\n                                                                                                                       // 85\n    function failedValidation() {                                                                                      // 86\n      var ec = ss.namedContext(formId);                                                                                // 87\n      var ik = ec.invalidKeys(), err;                                                                                  // 88\n      if (ik) {                                                                                                        // 89\n        if (ik.length) {                                                                                               // 90\n          // We add `message` prop to the invalidKeys.                                                                 // 91\n          // Maybe SS pkg should just add that property back in?                                                       // 92\n          ik = _.map(ik, function (o) {                                                                                // 93\n            return _.extend({message: ec.keyErrorMessage(o.name)}, o);                                                 // 94\n          });                                                                                                          // 95\n          err = new Error(ik[0].message);                                                                              // 96\n        } else {                                                                                                       // 97\n          err = new Error('form failed validation');                                                                   // 98\n        }                                                                                                              // 99\n        err.invalidKeys = ik;                                                                                          // 100\n      } else {                                                                                                         // 101\n        err = new Error('form failed validation');                                                                     // 102\n      }                                                                                                                // 103\n      _.each(onError, function onErrorEach(hook) {                                                                     // 104\n        hook('pre-submit validation', err, template);                                                                  // 105\n      });                                                                                                              // 106\n      haltSubmission();                                                                                                // 107\n    }                                                                                                                  // 108\n                                                                                                                       // 109\n    // Prep callback creator function                                                                                  // 110\n    function makeCallback(name) {                                                                                      // 111\n      var cbCtx = {                                                                                                    // 112\n        event: event,                                                                                                  // 113\n        template: template,                                                                                            // 114\n        formId: formId,                                                                                                // 115\n        docId: docId,                                                                                                  // 116\n        autoSaveChangedElement: lastAutoSaveElement,                                                                   // 117\n        resetForm: function () {                                                                                       // 118\n          AutoForm.resetForm(formId, template);                                                                        // 119\n        }                                                                                                              // 120\n      };                                                                                                               // 121\n      var afterHooks = Hooks.getHooks(formId, 'after', name);                                                          // 122\n      return function autoFormActionCallback(error, result) {                                                          // 123\n        if (error) {                                                                                                   // 124\n          if (onError && onError.length) {                                                                             // 125\n            _.each(onError, function onErrorEach(hook) {                                                               // 126\n              hook.call(cbCtx, name, error, template);                                                                 // 127\n            });                                                                                                        // 128\n          } else if ((!afterHooks || !afterHooks.length) && ss.namedContext(formId).isValid()) {                       // 129\n            // if there are no onError or \"after\" hooks or validation errors, throw the error                          // 130\n            // because it must be some other error from the server                                                     // 131\n            endSubmit(formId, template);                                                                               // 132\n            throw error;                                                                                               // 133\n          }                                                                                                            // 134\n        } else {                                                                                                       // 135\n          // By default, we reset form after successful submit, but                                                    // 136\n          // you can opt out.                                                                                          // 137\n          if (data.resetOnSuccess !== false) {                                                                         // 138\n            AutoForm.resetForm(formId, template);                                                                      // 139\n          }                                                                                                            // 140\n          // Set docId in the context for insert forms, too                                                            // 141\n          if (name === \"insert\") {                                                                                     // 142\n            cbCtx.docId = result;                                                                                      // 143\n          }                                                                                                            // 144\n          _.each(onSuccess, function onSuccessEach(hook) {                                                             // 145\n            hook.call(cbCtx, name, result, template);                                                                  // 146\n          });                                                                                                          // 147\n        }                                                                                                              // 148\n        _.each(afterHooks, function afterHooksEach(hook) {                                                             // 149\n          hook.call(cbCtx, error, result, template);                                                                   // 150\n        });                                                                                                            // 151\n        // Run endSubmit hooks (re-enabled submit button or form, etc.)                                                // 152\n        endSubmit(formId, template);                                                                                   // 153\n      };                                                                                                               // 154\n    }                                                                                                                  // 155\n                                                                                                                       // 156\n    // Prep function that calls before hooks.                                                                          // 157\n    // We pass the template instance in case the hook                                                                  // 158\n    // needs the data context.                                                                                         // 159\n    function doBefore(docId, doc, hooks, name, next) {                                                                 // 160\n      // We call the hooks recursively, in order added,                                                                // 161\n      // passing the result of the first hook to the                                                                   // 162\n      // second hook, etc.                                                                                             // 163\n      function runHook(i, doc) {                                                                                       // 164\n        hook = hooks[i];                                                                                               // 165\n                                                                                                                       // 166\n        if (!hook) {                                                                                                   // 167\n          // We've run all hooks; continue submission                                                                  // 168\n          next(doc);                                                                                                   // 169\n          return;                                                                                                      // 170\n        }                                                                                                              // 171\n                                                                                                                       // 172\n        // Set up before hook context                                                                                  // 173\n        var cb = function (d) {                                                                                        // 174\n          // If the hook returns false, we cancel                                                                      // 175\n          if (d === false) {                                                                                           // 176\n            // Run endSubmit hooks (re-enabled submit button or form, etc.)                                            // 177\n            endSubmit(formId, template);                                                                               // 178\n          } else {                                                                                                     // 179\n            if (!_.isObject(d)) {                                                                                      // 180\n              throw new Error(name + \" must return an object\");                                                        // 181\n            }                                                                                                          // 182\n            runHook(i+1, d);                                                                                           // 183\n          }                                                                                                            // 184\n        };                                                                                                             // 185\n        var ctx = {                                                                                                    // 186\n          event: event,                                                                                                // 187\n          template: template,                                                                                          // 188\n          formId: formId,                                                                                              // 189\n          docId: docId,                                                                                                // 190\n          autoSaveChangedElement: lastAutoSaveElement,                                                                 // 191\n          resetForm: function () {                                                                                     // 192\n            AutoForm.resetForm(formId, template);                                                                      // 193\n          },                                                                                                           // 194\n          result: _.once(cb)                                                                                           // 195\n        };                                                                                                             // 196\n                                                                                                                       // 197\n        var result;                                                                                                    // 198\n        if (docId) {                                                                                                   // 199\n          result = hook.call(ctx, docId, doc, template);                                                               // 200\n        } else {                                                                                                       // 201\n          result = hook.call(ctx, doc, template);                                                                      // 202\n        }                                                                                                              // 203\n        // If the hook returns undefined, we wait for it                                                               // 204\n        // to call this.result()                                                                                       // 205\n        if (result !== void 0) {                                                                                       // 206\n          ctx.result(result);                                                                                          // 207\n        }                                                                                                              // 208\n      }                                                                                                                // 209\n                                                                                                                       // 210\n      runHook(0, doc);                                                                                                 // 211\n    }                                                                                                                  // 212\n                                                                                                                       // 213\n    // Prep function that calls onSubmit hooks.                                                                        // 214\n    // We pass the template instance in case the hook                                                                  // 215\n    // needs the data context, and event in case they                                                                  // 216\n    // need to prevent default, etc.                                                                                   // 217\n    function doOnSubmit(hooks, insertDoc, updateDoc, currentDoc) {                                                     // 218\n      // These are called differently from the before hooks because                                                    // 219\n      // they run async, but they can run in parallel and we need the                                                  // 220\n      // result of all of them immediately because they can return                                                     // 221\n      // false to stop normal form submission.                                                                         // 222\n                                                                                                                       // 223\n      var hookCount = hooks.length, doneCount = 0, submitError, submitResult;                                          // 224\n                                                                                                                       // 225\n      if (hookCount === 0) {                                                                                           // 226\n        // Run endSubmit hooks (re-enabled submit button or form, etc.)                                                // 227\n        endSubmit(formId, template);                                                                                   // 228\n        return;                                                                                                        // 229\n      }                                                                                                                // 230\n                                                                                                                       // 231\n      // Set up onSubmit hook context                                                                                  // 232\n      var ctx = {                                                                                                      // 233\n        event: event,                                                                                                  // 234\n        template: template,                                                                                            // 235\n        formId: formId,                                                                                                // 236\n        docId: docId,                                                                                                  // 237\n        autoSaveChangedElement: lastAutoSaveElement,                                                                   // 238\n        resetForm: function () {                                                                                       // 239\n          AutoForm.resetForm(formId, template);                                                                        // 240\n        },                                                                                                             // 241\n        done: function (error, result) {                                                                               // 242\n          doneCount++;                                                                                                 // 243\n          if (!submitError && error) {                                                                                 // 244\n            submitError = error;                                                                                       // 245\n          }                                                                                                            // 246\n          if (!submitResult && result) {                                                                               // 247\n            submitResult = result;                                                                                     // 248\n          }                                                                                                            // 249\n          if (doneCount === hookCount) {                                                                               // 250\n            var submitCallback = makeCallback('submit');                                                               // 251\n            // run onError, onSuccess, endSubmit                                                                       // 252\n            submitCallback(submitError, submitResult);                                                                 // 253\n          }                                                                                                            // 254\n        }                                                                                                              // 255\n      };                                                                                                               // 256\n                                                                                                                       // 257\n      // Call all hooks at once.                                                                                       // 258\n      // Pass both types of doc plus the doc attached to the form.                                                     // 259\n      // If any return false, we stop normal submission, but we don't                                                  // 260\n      // run onError, onSuccess, endSubmit hooks until they all call this.done().                                      // 261\n      var shouldStop = false;                                                                                          // 262\n      _.each(hooks, function eachOnSubmit(hook) {                                                                      // 263\n        var result = hook.call(ctx, insertDoc, updateDoc, currentDoc);                                                 // 264\n        if (shouldStop === false && result === false) {                                                                // 265\n          shouldStop = true;                                                                                           // 266\n        }                                                                                                              // 267\n      });                                                                                                              // 268\n      if (shouldStop) {                                                                                                // 269\n        event.preventDefault();                                                                                        // 270\n        event.stopPropagation();                                                                                       // 271\n      }                                                                                                                // 272\n    }                                                                                                                  // 273\n                                                                                                                       // 274\n    // Gather all form values                                                                                          // 275\n    var formDocs = getFormValues(template, formId, ss);                                                                // 276\n    var insertDoc = formDocs.insertDoc;                                                                                // 277\n    var updateDoc = formDocs.updateDoc;                                                                                // 278\n                                                                                                                       // 279\n    // This validation pass happens before any \"before\" hooks run. It should happen                                    // 280\n    // only when there is both a collection AND a schema specified, in which case we                                   // 281\n    // validate first against the form schema. Then before hooks can add any missing                                   // 282\n    // properties before we validate against the full collection schema.                                               // 283\n    //                                                                                                                 // 284\n    // We also validate at this time if we're doing normal form submission, in which                                   // 285\n    // case there are no \"before\" hooks, and this is the only validation pass we do                                    // 286\n    // before running onSubmit hooks and potentially allowing the browser to submit.                                   // 287\n    if (data.validationType !== 'none' && (ssIsOverride || isNormalSubmit)) {                                          // 288\n      // Catch exceptions in validation functions which will bubble up here, cause a form with                         // 289\n      // onSubmit() to submit prematurely and prevent the error from being reported                                    // 290\n      // (due to a page refresh).                                                                                      // 291\n      try {                                                                                                            // 292\n        isValid = _validateForm(formId, data, formDocs);                                                               // 293\n      } catch (e) {                                                                                                    // 294\n        console.error('Validation error', e);                                                                          // 295\n        isValid = false;                                                                                               // 296\n      }                                                                                                                // 297\n      // If we failed pre-submit validation, we stop submission.                                                       // 298\n      if (isValid === false) {                                                                                         // 299\n        return failedValidation();                                                                                     // 300\n      }                                                                                                                // 301\n    }                                                                                                                  // 302\n                                                                                                                       // 303\n    // Run beginSubmit hooks (disable submit button or form, etc.)                                                     // 304\n    // NOTE: This needs to stay after getFormValues in case a                                                          // 305\n    // beginSubmit hook disables inputs. We don't get values for                                                       // 306\n    // disabled inputs, but if they are just disabling during submission,                                              // 307\n    // then we actually do want the values.                                                                            // 308\n    beginSubmit(formId, template);                                                                                     // 309\n                                                                                                                       // 310\n    // Now we will do the requested insert, update, method, or normal                                                  // 311\n    // browser form submission.                                                                                        // 312\n    var validationOptions = {                                                                                          // 313\n      validationContext: formId,                                                                                       // 314\n      filter: data.filter,                                                                                             // 315\n      autoConvert: data.autoConvert,                                                                                   // 316\n      removeEmptyStrings: data.removeEmptyStrings,                                                                     // 317\n      trimStrings: data.trimStrings                                                                                    // 318\n    };                                                                                                                 // 319\n                                                                                                                       // 320\n    // INSERT FORM SUBMIT                                                                                              // 321\n    if (isInsert) {                                                                                                    // 322\n      // Get \"before.insert\" hooks                                                                                     // 323\n      var beforeInsertHooks = Hooks.getHooks(formId, 'before', 'insert');                                              // 324\n      // Run \"before.insert\" hooks                                                                                     // 325\n      doBefore(null, insertDoc, beforeInsertHooks, 'before.insert hook', function (doc) {                              // 326\n        // Make callback for insert                                                                                    // 327\n        var insertCallback = makeCallback('insert');                                                                   // 328\n        // Perform insert                                                                                              // 329\n        if (typeof collection.simpleSchema === \"function\" && collection.simpleSchema() != null) {                      // 330\n          // If the collection2 pkg is used and a schema is attached, we pass a validationContext                      // 331\n          collection.insert(doc, validationOptions, insertCallback);                                                   // 332\n        } else {                                                                                                       // 333\n          // If the collection2 pkg is not used or no schema is attached, we don't pass options                        // 334\n          // because core Meteor's `insert` function does not accept                                                   // 335\n          // an options argument.                                                                                      // 336\n          collection.insert(doc, insertCallback);                                                                      // 337\n        }                                                                                                              // 338\n      });                                                                                                              // 339\n    }                                                                                                                  // 340\n                                                                                                                       // 341\n    // UPDATE FORM SUBMIT                                                                                              // 342\n    else if (isUpdate) {                                                                                               // 343\n      // Get \"before.update\" hooks                                                                                     // 344\n      var beforeUpdateHooks = Hooks.getHooks(formId, 'before', 'update');                                              // 345\n      // Run \"before.update\" hooks                                                                                     // 346\n      doBefore(docId, updateDoc, beforeUpdateHooks, 'before.update hook', function (modifier) {                        // 347\n        // Make callback for update                                                                                    // 348\n        var updateCallback = makeCallback('update');                                                                   // 349\n        if (_.isEmpty(modifier)) { // make sure this check stays after the before hooks                                // 350\n          // Nothing to update. Just treat it as a successful update.                                                  // 351\n          updateCallback(null, 0);                                                                                     // 352\n        } else {                                                                                                       // 353\n          // Perform update                                                                                            // 354\n          collection.update(docId, modifier, validationOptions, updateCallback);                                       // 355\n        }                                                                                                              // 356\n      });                                                                                                              // 357\n    }                                                                                                                  // 358\n                                                                                                                       // 359\n    // METHOD FORM SUBMIT                                                                                              // 360\n    else if (isMethod) {                                                                                               // 361\n      // Get \"before.methodName\" hooks                                                                                 // 362\n      if (!method) {                                                                                                   // 363\n        throw new Error('When form type is \"method\", you must also provide a \"meteormethod\" attribute');               // 364\n      }                                                                                                                // 365\n      var beforeMethodHooks = Hooks.getHooks(formId, 'before', method);                                                // 366\n      // Run \"before.methodName\" hooks                                                                                 // 367\n      doBefore(null, insertDoc, beforeMethodHooks, 'before.method hook', function (doc) {                              // 368\n        // Validate. If both schema and collection were provided, then we validate                                     // 369\n        // against the collection schema here. Otherwise we validate against whichever                                 // 370\n        // one was passed.                                                                                             // 371\n        isValid = _validateForm(formId, data, formDocs, ssIsOverride);                                                 // 372\n        if (isValid === false) {                                                                                       // 373\n          return failedValidation();                                                                                   // 374\n        }                                                                                                              // 375\n        // Make callback for Meteor.call                                                                               // 376\n        var methodCallback = makeCallback(method);                                                                     // 377\n        // Call the method                                                                                             // 378\n        Meteor.call(method, doc, updateDoc, docId, methodCallback);                                                    // 379\n      });                                                                                                              // 380\n    }                                                                                                                  // 381\n                                                                                                                       // 382\n    // NORMAL FORM SUBMIT                                                                                              // 383\n    else if (isNormalSubmit) {                                                                                         // 384\n      // Get onSubmit hooks                                                                                            // 385\n      var onSubmitHooks = Hooks.getHooks(formId, 'onSubmit');                                                          // 386\n      doOnSubmit(onSubmitHooks, insertDoc, updateDoc, currentDoc);                                                     // 387\n    }                                                                                                                  // 388\n  },                                                                                                                   // 389\n  'keyup [data-schema-key]': function autoFormKeyUpHandler(event, template) {                                          // 390\n    var validationType = template.data.validation || 'submitThenKeyup';                                                // 391\n    var onlyIfAlreadyInvalid = (validationType === 'submitThenKeyup');                                                 // 392\n    var skipEmpty = !(event.keyCode === 8 || event.keyCode === 46); //if deleting or backspacing, don't skip empty     // 393\n    if ((validationType === 'keyup' || validationType === 'submitThenKeyup')) {                                        // 394\n      validateField(event.currentTarget.getAttribute(\"data-schema-key\"), template, skipEmpty, onlyIfAlreadyInvalid);   // 395\n    }                                                                                                                  // 396\n  },                                                                                                                   // 397\n  'blur [data-schema-key]': function autoFormBlurHandler(event, template) {                                            // 398\n    var validationType = template.data.validation || 'submitThenKeyup';                                                // 399\n    var onlyIfAlreadyInvalid = (validationType === 'submitThenKeyup' || validationType === 'submitThenBlur');          // 400\n    if (validationType === 'keyup' || validationType === 'blur' || validationType === 'submitThenKeyup' || validationType === 'submitThenBlur') {\n      validateField(event.currentTarget.getAttribute(\"data-schema-key\"), template, false, onlyIfAlreadyInvalid);       // 402\n    }                                                                                                                  // 403\n  },                                                                                                                   // 404\n  'change form': function autoFormChangeHandler(event, template) {                                                     // 405\n    var self = this;                                                                                                   // 406\n                                                                                                                       // 407\n    var key = event.target.getAttribute(\"data-schema-key\");                                                            // 408\n    if (!key) {                                                                                                        // 409\n      key = $(event.target).closest('[data-schema-key]').attr(\"data-schema-key\");                                      // 410\n      if (!key) return;                                                                                                // 411\n    }                                                                                                                  // 412\n                                                                                                                       // 413\n    var formId = self.id || defaultFormId;                                                                             // 414\n    var data = formData[formId];                                                                                       // 415\n    if (!data)                                                                                                         // 416\n      return;                                                                                                          // 417\n                                                                                                                       // 418\n    // Mark field value as changed for reactive updates                                                                // 419\n    updateTrackedFieldValue(formId, key);                                                                              // 420\n                                                                                                                       // 421\n    // If the form should be auto-saved whenever updated, we do that on field                                          // 422\n    // changes instead of validating the field                                                                         // 423\n    if (data.autosave) {                                                                                               // 424\n      lastAutoSaveElement = event.target;                                                                              // 425\n      $(event.currentTarget).submit();                                                                                 // 426\n      return;                                                                                                          // 427\n    }                                                                                                                  // 428\n                                                                                                                       // 429\n    var validationType = data.validationType || 'submitThenKeyup';                                                     // 430\n    var onlyIfAlreadyInvalid = (validationType === 'submitThenKeyup' || validationType === 'submitThenBlur');          // 431\n    if (validationType === 'keyup' || validationType === 'blur' || validationType === 'submitThenKeyup' || validationType === 'submitThenBlur') {\n      validateField(key, template, false, onlyIfAlreadyInvalid);                                                       // 433\n    }                                                                                                                  // 434\n  },                                                                                                                   // 435\n  'reset form': function autoFormResetHandler(event, template) {                                                       // 436\n    var formId = this.id || defaultFormId;                                                                             // 437\n                                                                                                                       // 438\n    formPreserve.clearDocument(formId);                                                                                // 439\n                                                                                                                       // 440\n    // Reset array counts                                                                                              // 441\n    arrayTracker.resetForm(formId);                                                                                    // 442\n                                                                                                                       // 443\n    var fd = formData[formId];                                                                                         // 444\n                                                                                                                       // 445\n    if (!fd)                                                                                                           // 446\n      return;                                                                                                          // 447\n                                                                                                                       // 448\n    if (fd.ss) {                                                                                                       // 449\n      fd.ss.namedContext(formId).resetValidation();                                                                    // 450\n      // If simpleSchema is undefined, we haven't yet rendered the form, and therefore                                 // 451\n      // there is no need to reset validation for it. No error need be thrown.                                         // 452\n    }                                                                                                                  // 453\n                                                                                                                       // 454\n    if (this.doc) {                                                                                                    // 455\n      event.preventDefault();                                                                                          // 456\n                                                                                                                       // 457\n      // Use destroy form hack since Meteor doesn't give us an easy way to                                             // 458\n      // invalidate changed form attributes yet.                                                                       // 459\n      afDestroyUpdateForm.set(true);                                                                                   // 460\n      Tracker.flush();                                                                                                 // 461\n      afDestroyUpdateForm.set(false);                                                                                  // 462\n      Tracker.flush();                                                                                                 // 463\n                                                                                                                       // 464\n      template.$(\"[autofocus]\").focus();                                                                               // 465\n    } else {                                                                                                           // 466\n      // This must be done after we allow this event handler to return                                                 // 467\n      // because we have to let the browser reset all fields before we                                                 // 468\n      // update their values for deps.                                                                                 // 469\n      setTimeout(function () {                                                                                         // 470\n        // Mark all fields as changed                                                                                  // 471\n        updateAllTrackedFieldValues(formId);                                                                           // 472\n                                                                                                                       // 473\n        // Focus the autofocus element                                                                                 // 474\n        if (template && template.view._domrange && !template.view.isDestroyed) {                                       // 475\n          template.$(\"[autofocus]\").focus();                                                                           // 476\n        }                                                                                                              // 477\n      }, 0);                                                                                                           // 478\n    }                                                                                                                  // 479\n                                                                                                                       // 480\n  },                                                                                                                   // 481\n  'keydown .autoform-array-item input': function (event, template) {                                                   // 482\n    // When enter is pressed in an array item field, default behavior                                                  // 483\n    // seems to be to \"click\" the remove item button. This doesn't make                                                // 484\n    // sense so we stop it.                                                                                            // 485\n    if (event.keyCode === 13) {                                                                                        // 486\n      event.preventDefault();                                                                                          // 487\n    }                                                                                                                  // 488\n  },                                                                                                                   // 489\n  'click .autoform-remove-item': function autoFormClickRemoveItem(event, template) {                                   // 490\n    var self = this; // This type of button must be used within an afEachArrayItem block, so we know the context       // 491\n                                                                                                                       // 492\n    event.preventDefault();                                                                                            // 493\n                                                                                                                       // 494\n    var name = self.arrayFieldName;                                                                                    // 495\n    var minCount = self.minCount; // optional, overrides schema                                                        // 496\n    var maxCount = self.maxCount; // optional, overrides schema                                                        // 497\n    var index = self.index;                                                                                            // 498\n    var data = template.data;                                                                                          // 499\n    var formId = data && data.id || defaultFormId;                                                                     // 500\n    var ss = formData[formId].ss;                                                                                      // 501\n                                                                                                                       // 502\n    // remove the item we clicked                                                                                      // 503\n    arrayTracker.removeFromFieldAtIndex(formId, name, index, ss, minCount, maxCount);                                  // 504\n  },                                                                                                                   // 505\n  'click .autoform-add-item': function autoFormClickAddItem(event, template) {                                         // 506\n    event.preventDefault();                                                                                            // 507\n                                                                                                                       // 508\n    // We pull from data attributes because the button could be manually                                               // 509\n    // added anywhere, so we don't know the data context.                                                              // 510\n    var btn = $(event.currentTarget);                                                                                  // 511\n    var name = btn.attr(\"data-autoform-field\");                                                                        // 512\n    var minCount = btn.attr(\"data-autoform-minCount\"); // optional, overrides schema                                   // 513\n    var maxCount = btn.attr(\"data-autoform-maxCount\"); // optional, overrides schema                                   // 514\n    var data = template.data;                                                                                          // 515\n    var formId = data && data.id || defaultFormId;                                                                     // 516\n    var ss = formData[formId].ss;                                                                                      // 517\n                                                                                                                       // 518\n    arrayTracker.addOneToField(formId, name, ss, minCount, maxCount);                                                  // 519\n  }                                                                                                                    // 520\n});                                                                                                                    // 521\n                                                                                                                       // 522\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/template.bootstrap3.js                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"quickForm_bootstrap3\");                                                                          // 2\nTemplate[\"quickForm_bootstrap3\"] = new Template(\"Template.quickForm_bootstrap3\", (function() {                         // 3\n  var view = this;                                                                                                     // 4\n  return Blaze._TemplateWith(function() {                                                                              // 5\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"qfAutoFormContext\"));                                       // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.include(view.lookupTemplate(\"autoForm\"), function() {                                             // 8\n      return [ \"\\n    \", Spacebars.include(view.lookupTemplate(\"afQuickFields\")), \"\\n    \", Blaze.If(function() {      // 9\n        return Spacebars.call(view.lookup(\"qfShouldRenderButton\"));                                                    // 10\n      }, function() {                                                                                                  // 11\n        return [ \"\\n    \", HTML.DIV({                                                                                  // 12\n          \"class\": \"form-group\"                                                                                        // 13\n        }, \"\\n      \", HTML.BUTTON(HTML.Attrs({                                                                        // 14\n          type: \"submit\"                                                                                               // 15\n        }, function() {                                                                                                // 16\n          return Spacebars.attrMustache(view.lookup(\"submitButtonAtts\"));                                              // 17\n        }), \"\\n      \", Spacebars.With(function() {                                                                    // 18\n          return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"atts\", \"buttonContent\"));                            // 19\n        }, function() {                                                                                                // 20\n          return [ \"\\n      \", Blaze.View(function() {                                                                 // 21\n            return Spacebars.mustache(view.lookup(\".\"));                                                               // 22\n          }), \"\\n      \" ];                                                                                            // 23\n        }, function() {                                                                                                // 24\n          return \"\\n      Submit\\n      \";                                                                             // 25\n        }), \"\\n      \"), \"\\n    \"), \"\\n    \" ];                                                                        // 26\n      }), \"\\n  \" ];                                                                                                    // 27\n    });                                                                                                                // 28\n  });                                                                                                                  // 29\n}));                                                                                                                   // 30\n                                                                                                                       // 31\nTemplate.__checkName(\"afFormGroup_bootstrap3\");                                                                        // 32\nTemplate[\"afFormGroup_bootstrap3\"] = new Template(\"Template.afFormGroup_bootstrap3\", (function() {                     // 33\n  var view = this;                                                                                                     // 34\n  return HTML.DIV({                                                                                                    // 35\n    \"class\": function() {                                                                                              // 36\n      return [ \"form-group \", Blaze.If(function() {                                                                    // 37\n        return Spacebars.dataMustache(view.lookup(\"afFieldIsInvalid\"), Spacebars.kw({                                  // 38\n          name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                        // 39\n        }));                                                                                                           // 40\n      }, function() {                                                                                                  // 41\n        return \"has-error\";                                                                                            // 42\n      }) ];                                                                                                            // 43\n    }                                                                                                                  // 44\n  }, \"\\n    \", Blaze.Unless(function() {                                                                               // 45\n    return Spacebars.call(view.lookup(\"skipLabel\"));                                                                   // 46\n  }, function() {                                                                                                      // 47\n    return [ \"\\n    \", HTML.LABEL(HTML.Attrs(function() {                                                              // 48\n      return Spacebars.attrMustache(view.lookup(\"bsFieldLabelAtts\"));                                                  // 49\n    }), Blaze.If(function() {                                                                                          // 50\n      return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"labelText\"));                                             // 51\n    }, function() {                                                                                                    // 52\n      return Blaze.View(function() {                                                                                   // 53\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"labelText\"));                                       // 54\n      });                                                                                                              // 55\n    }, function() {                                                                                                    // 56\n      return Blaze.View(function() {                                                                                   // 57\n        return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                      // 58\n          name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                        // 59\n        }));                                                                                                           // 60\n      });                                                                                                              // 61\n    })), \"\\n    \" ];                                                                                                   // 62\n  }), \"\\n    \", Blaze._TemplateWith(function() {                                                                       // 63\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"afFieldInputAtts\"));                                        // 64\n  }, function() {                                                                                                      // 65\n    return Spacebars.include(view.lookupTemplate(\"afFieldInput\"));                                                     // 66\n  }), \"\\n    \", HTML.SPAN({                                                                                            // 67\n    \"class\": \"help-block\"                                                                                              // 68\n  }, Blaze.View(function() {                                                                                           // 69\n    return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"afFieldMessage\"), Spacebars.kw({                          // 70\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                            // 71\n    })));                                                                                                              // 72\n  })), \"\\n  \");                                                                                                        // 73\n}));                                                                                                                   // 74\n                                                                                                                       // 75\nTemplate.__checkName(\"afObjectField_bootstrap3\");                                                                      // 76\nTemplate[\"afObjectField_bootstrap3\"] = new Template(\"Template.afObjectField_bootstrap3\", (function() {                 // 77\n  var view = this;                                                                                                     // 78\n  return HTML.DIV({                                                                                                    // 79\n    \"class\": \"panel panel-default\"                                                                                     // 80\n  }, \"\\n    \", Spacebars.With(function() {                                                                             // 81\n    return Spacebars.dataMustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                      // 82\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                            // 83\n    }));                                                                                                               // 84\n  }, function() {                                                                                                      // 85\n    return [ \"\\n    \", HTML.DIV({                                                                                      // 86\n      \"class\": \"panel-heading\"                                                                                         // 87\n    }, \"\\n      \", HTML.H3({                                                                                           // 88\n      \"class\": \"panel-title\"                                                                                           // 89\n    }, Blaze.View(function() {                                                                                         // 90\n      return Spacebars.mustache(view.lookup(\".\"));                                                                     // 91\n    })), \"\\n    \"), \"\\n    \" ];                                                                                        // 92\n  }), \"\\n    \", HTML.DIV({                                                                                             // 93\n    \"class\": \"panel-body\"                                                                                              // 94\n  }, \"\\n      \", Blaze.If(function() {                                                                                 // 95\n    return Spacebars.dataMustache(view.lookup(\"afFieldIsInvalid\"), Spacebars.kw({                                      // 96\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                            // 97\n    }));                                                                                                               // 98\n  }, function() {                                                                                                      // 99\n    return [ \"\\n      \", HTML.SPAN({                                                                                   // 100\n      \"class\": \"help-block\"                                                                                            // 101\n    }, Blaze.View(function() {                                                                                         // 102\n      return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"afFieldMessage\"), Spacebars.kw({                        // 103\n        name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                          // 104\n      })));                                                                                                            // 105\n    })), \"\\n      \" ];                                                                                                 // 106\n  }), \"\\n      \", Blaze._TemplateWith(function() {                                                                     // 107\n    return {                                                                                                           // 108\n      name: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\"))                                            // 109\n    };                                                                                                                 // 110\n  }, function() {                                                                                                      // 111\n    return Spacebars.include(view.lookupTemplate(\"afQuickFields\"));                                                    // 112\n  }), \"\\n    \"), \"\\n  \");                                                                                              // 113\n}));                                                                                                                   // 114\n                                                                                                                       // 115\nTemplate.__checkName(\"afArrayField_bootstrap3\");                                                                       // 116\nTemplate[\"afArrayField_bootstrap3\"] = new Template(\"Template.afArrayField_bootstrap3\", (function() {                   // 117\n  var view = this;                                                                                                     // 118\n  return HTML.DIV({                                                                                                    // 119\n    \"class\": \"panel panel-default\"                                                                                     // 120\n  }, \"\\n    \", HTML.DIV({                                                                                              // 121\n    \"class\": \"panel-heading\"                                                                                           // 122\n  }, Blaze.View(function() {                                                                                           // 123\n    return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                          // 124\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                            // 125\n    }));                                                                                                               // 126\n  })), \"\\n    \", Blaze.If(function() {                                                                                 // 127\n    return Spacebars.dataMustache(view.lookup(\"afFieldIsInvalid\"), Spacebars.kw({                                      // 128\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                            // 129\n    }));                                                                                                               // 130\n  }, function() {                                                                                                      // 131\n    return [ \"\\n    \", HTML.DIV({                                                                                      // 132\n      \"class\": \"panel-body has-error\"                                                                                  // 133\n    }, \"\\n      \", HTML.SPAN({                                                                                         // 134\n      \"class\": \"help-block\"                                                                                            // 135\n    }, Blaze.View(function() {                                                                                         // 136\n      return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"afFieldMessage\"), Spacebars.kw({                        // 137\n        name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                          // 138\n      })));                                                                                                            // 139\n    })), \"\\n    \"), \"\\n    \" ];                                                                                        // 140\n  }), \"\\n    \", HTML.UL({                                                                                              // 141\n    \"class\": \"list-group\"                                                                                              // 142\n  }, \"\\n      \", Blaze._TemplateWith(function() {                                                                      // 143\n    return {                                                                                                           // 144\n      name: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")),                                           // 145\n      minCount: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"minCount\")),                                   // 146\n      maxCount: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"maxCount\"))                                    // 147\n    };                                                                                                                 // 148\n  }, function() {                                                                                                      // 149\n    return Spacebars.include(view.lookupTemplate(\"afEachArrayItem\"), function() {                                      // 150\n      return [ \"\\n      \", HTML.LI({                                                                                   // 151\n        \"class\": \"list-group-item autoform-array-item\"                                                                 // 152\n      }, \"\\n        \", HTML.DIV({                                                                                      // 153\n        \"class\": \"media\"                                                                                               // 154\n      }, \"\\n          \", Blaze.If(function() {                                                                         // 155\n        return Spacebars.dataMustache(view.lookup(\"afArrayFieldHasMoreThanMinimum\"), Spacebars.kw({                    // 156\n          name: Spacebars.dot(view.lookup(\"..\"), \"atts\", \"name\"),                                                      // 157\n          minCount: Spacebars.dot(view.lookup(\"..\"), \"atts\", \"minCount\"),                                              // 158\n          maxCount: Spacebars.dot(view.lookup(\"..\"), \"atts\", \"maxCount\")                                               // 159\n        }));                                                                                                           // 160\n      }, function() {                                                                                                  // 161\n        return [ \"\\n          \", HTML.BUTTON({                                                                         // 162\n          type: \"button\",                                                                                              // 163\n          \"class\": \"btn btn-primary autoform-remove-item pull-left\"                                                    // 164\n        }, HTML.SPAN({                                                                                                 // 165\n          \"class\": \"glyphicon glyphicon-minus\"                                                                         // 166\n        })), \"\\n          \" ];                                                                                         // 167\n      }), \"\\n          \", HTML.DIV({                                                                                   // 168\n        \"class\": \"media-body\"                                                                                          // 169\n      }, \"\\n            \", Blaze._TemplateWith(function() {                                                            // 170\n        return {                                                                                                       // 171\n          name: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"name\")),                                               // 172\n          label: Spacebars.call(false),                                                                                // 173\n          options: Spacebars.call(\"auto\")                                                                              // 174\n        };                                                                                                             // 175\n      }, function() {                                                                                                  // 176\n        return Spacebars.include(view.lookupTemplate(\"afQuickField\"));                                                 // 177\n      }), \"\\n          \"), \"\\n        \"), \"\\n      \"), \"\\n      \" ];                                                   // 178\n    });                                                                                                                // 179\n  }), \"\\n      \", Blaze.If(function() {                                                                                // 180\n    return Spacebars.dataMustache(view.lookup(\"afArrayFieldHasLessThanMaximum\"), Spacebars.kw({                        // 181\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\"),                                                           // 182\n      minCount: Spacebars.dot(view.lookup(\".\"), \"atts\", \"minCount\"),                                                   // 183\n      maxCount: Spacebars.dot(view.lookup(\".\"), \"atts\", \"maxCount\")                                                    // 184\n    }));                                                                                                               // 185\n  }, function() {                                                                                                      // 186\n    return [ \"\\n      \", HTML.LI({                                                                                     // 187\n      \"class\": \"list-group-item\"                                                                                       // 188\n    }, \"\\n        \", HTML.BUTTON({                                                                                     // 189\n      type: \"button\",                                                                                                  // 190\n      \"class\": \"btn btn-primary autoform-add-item\",                                                                    // 191\n      \"data-autoform-field\": function() {                                                                              // 192\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\"));                                    // 193\n      },                                                                                                               // 194\n      \"data-autoform-mincount\": function() {                                                                           // 195\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"atts\", \"minCount\"));                                // 196\n      },                                                                                                               // 197\n      \"data-autoform-maxcount\": function() {                                                                           // 198\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"atts\", \"maxCount\"));                                // 199\n      }                                                                                                                // 200\n    }, HTML.SPAN({                                                                                                     // 201\n      \"class\": \"glyphicon glyphicon-plus\"                                                                              // 202\n    })), \"\\n      \"), \"\\n      \" ];                                                                                    // 203\n  }), \"\\n    \"), \"\\n  \");                                                                                              // 204\n}));                                                                                                                   // 205\n                                                                                                                       // 206\nTemplate.__checkName(\"afCheckbox_bootstrap3\");                                                                         // 207\nTemplate[\"afCheckbox_bootstrap3\"] = new Template(\"Template.afCheckbox_bootstrap3\", (function() {                       // 208\n  var view = this;                                                                                                     // 209\n  return HTML.DIV({                                                                                                    // 210\n    \"class\": \"checkbox\"                                                                                                // 211\n  }, \"\\n    \", HTML.LABEL(\"\\n      \", HTML.INPUT(HTML.Attrs({                                                          // 212\n    type: \"checkbox\",                                                                                                  // 213\n    value: function() {                                                                                                // 214\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 215\n    }                                                                                                                  // 216\n  }, function() {                                                                                                      // 217\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 218\n  })), \"\\n      \", Blaze.View(function() {                                                                             // 219\n    return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                          // 220\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                    // 221\n    }));                                                                                                               // 222\n  }), \"\\n    \"), \"\\n  \");                                                                                              // 223\n}));                                                                                                                   // 224\n                                                                                                                       // 225\nTemplate.__checkName(\"afCheckboxGroup_bootstrap3\");                                                                    // 226\nTemplate[\"afCheckboxGroup_bootstrap3\"] = new Template(\"Template.afCheckboxGroup_bootstrap3\", (function() {             // 227\n  var view = this;                                                                                                     // 228\n  return HTML.DIV(HTML.Attrs({                                                                                         // 229\n    \"class\": \"af-checkbox-group\"                                                                                       // 230\n  }, function() {                                                                                                      // 231\n    return Spacebars.attrMustache(view.lookup(\"dsk\"));                                                                 // 232\n  }), \"\\n    \", Blaze.Each(function() {                                                                                // 233\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 234\n  }, function() {                                                                                                      // 235\n    return [ \"\\n      \", HTML.DIV({                                                                                    // 236\n      \"class\": \"checkbox\"                                                                                              // 237\n    }, \"\\n        \", HTML.LABEL(\"\\n          \", HTML.INPUT(HTML.Attrs({                                                // 238\n      type: \"checkbox\",                                                                                                // 239\n      value: function() {                                                                                              // 240\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                           // 241\n      }                                                                                                                // 242\n    }, function() {                                                                                                    // 243\n      return Spacebars.attrMustache(view.lookup(\"atts\"));                                                              // 244\n    })), \"\\n          \", Blaze.View(function() {                                                                       // 245\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                             // 246\n    }), \"\\n        \"), \"\\n      \"), \"\\n    \" ];                                                                        // 247\n  }), \"\\n  \");                                                                                                         // 248\n}));                                                                                                                   // 249\n                                                                                                                       // 250\nTemplate.__checkName(\"afCheckboxGroupInline_bootstrap3\");                                                              // 251\nTemplate[\"afCheckboxGroupInline_bootstrap3\"] = new Template(\"Template.afCheckboxGroupInline_bootstrap3\", (function() { // 252\n  var view = this;                                                                                                     // 253\n  return HTML.DIV(HTML.Attrs({                                                                                         // 254\n    \"class\": \"af-checkbox-group\"                                                                                       // 255\n  }, function() {                                                                                                      // 256\n    return Spacebars.attrMustache(view.lookup(\"dsk\"));                                                                 // 257\n  }), \"\\n    \", Blaze.Each(function() {                                                                                // 258\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 259\n  }, function() {                                                                                                      // 260\n    return [ \"\\n      \", HTML.LABEL({                                                                                  // 261\n      \"class\": \"checkbox-inline\"                                                                                       // 262\n    }, \"\\n        \", HTML.INPUT(HTML.Attrs({                                                                           // 263\n      type: \"checkbox\",                                                                                                // 264\n      value: function() {                                                                                              // 265\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                           // 266\n      }                                                                                                                // 267\n    }, function() {                                                                                                    // 268\n      return Spacebars.attrMustache(view.lookup(\"atts\"));                                                              // 269\n    })), \"\\n        \", Blaze.View(function() {                                                                         // 270\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                             // 271\n    }), \"\\n      \"), \"\\n    \" ];                                                                                       // 272\n  }), \"\\n  \");                                                                                                         // 273\n}));                                                                                                                   // 274\n                                                                                                                       // 275\nTemplate.__checkName(\"afRadio_bootstrap3\");                                                                            // 276\nTemplate[\"afRadio_bootstrap3\"] = new Template(\"Template.afRadio_bootstrap3\", (function() {                             // 277\n  var view = this;                                                                                                     // 278\n  return HTML.DIV({                                                                                                    // 279\n    \"class\": \"radio\"                                                                                                   // 280\n  }, \"\\n    \", HTML.LABEL(\"\\n      \", HTML.INPUT(HTML.Attrs({                                                          // 281\n    type: \"radio\",                                                                                                     // 282\n    value: function() {                                                                                                // 283\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 284\n    }                                                                                                                  // 285\n  }, function() {                                                                                                      // 286\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 287\n  })), \"\\n      \", Blaze.View(function() {                                                                             // 288\n    return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                          // 289\n      name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                    // 290\n    }));                                                                                                               // 291\n  }), \"\\n    \"), \"\\n  \");                                                                                              // 292\n}));                                                                                                                   // 293\n                                                                                                                       // 294\nTemplate.__checkName(\"afRadioGroup_bootstrap3\");                                                                       // 295\nTemplate[\"afRadioGroup_bootstrap3\"] = new Template(\"Template.afRadioGroup_bootstrap3\", (function() {                   // 296\n  var view = this;                                                                                                     // 297\n  return HTML.DIV(HTML.Attrs({                                                                                         // 298\n    \"class\": \"af-radio-group\"                                                                                          // 299\n  }, function() {                                                                                                      // 300\n    return Spacebars.attrMustache(view.lookup(\"dsk\"));                                                                 // 301\n  }), \"\\n    \", Blaze.Each(function() {                                                                                // 302\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 303\n  }, function() {                                                                                                      // 304\n    return [ \"\\n      \", HTML.DIV({                                                                                    // 305\n      \"class\": \"radio\"                                                                                                 // 306\n    }, \"\\n        \", HTML.LABEL(\"\\n          \", HTML.INPUT(HTML.Attrs({                                                // 307\n      type: \"radio\",                                                                                                   // 308\n      value: function() {                                                                                              // 309\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                           // 310\n      }                                                                                                                // 311\n    }, function() {                                                                                                    // 312\n      return Spacebars.attrMustache(view.lookup(\"atts\"));                                                              // 313\n    })), \"\\n          \", Blaze.View(function() {                                                                       // 314\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                             // 315\n    }), \"\\n        \"), \"\\n      \"), \"\\n    \" ];                                                                        // 316\n  }), \"\\n  \");                                                                                                         // 317\n}));                                                                                                                   // 318\n                                                                                                                       // 319\nTemplate.__checkName(\"afRadioGroupInline_bootstrap3\");                                                                 // 320\nTemplate[\"afRadioGroupInline_bootstrap3\"] = new Template(\"Template.afRadioGroupInline_bootstrap3\", (function() {       // 321\n  var view = this;                                                                                                     // 322\n  return HTML.DIV(HTML.Attrs({                                                                                         // 323\n    \"class\": \"af-radio-group\"                                                                                          // 324\n  }, function() {                                                                                                      // 325\n    return Spacebars.attrMustache(view.lookup(\"dsk\"));                                                                 // 326\n  }), \"\\n    \", Blaze.Each(function() {                                                                                // 327\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 328\n  }, function() {                                                                                                      // 329\n    return [ \"\\n      \", HTML.LABEL({                                                                                  // 330\n      \"class\": \"radio-inline\"                                                                                          // 331\n    }, \"\\n        \", HTML.INPUT(HTML.Attrs({                                                                           // 332\n      type: \"radio\",                                                                                                   // 333\n      value: function() {                                                                                              // 334\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                           // 335\n      }                                                                                                                // 336\n    }, function() {                                                                                                    // 337\n      return Spacebars.attrMustache(view.lookup(\"atts\"));                                                              // 338\n    })), \"\\n        \", Blaze.View(function() {                                                                         // 339\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                             // 340\n    }), \"\\n      \"), \"\\n    \" ];                                                                                       // 341\n  }), \"\\n  \");                                                                                                         // 342\n}));                                                                                                                   // 343\n                                                                                                                       // 344\nTemplate.__checkName(\"afBooleanRadioGroup_bootstrap3\");                                                                // 345\nTemplate[\"afBooleanRadioGroup_bootstrap3\"] = new Template(\"Template.afBooleanRadioGroup_bootstrap3\", (function() {     // 346\n  var view = this;                                                                                                     // 347\n  return HTML.DIV(HTML.Attrs(function() {                                                                              // 348\n    return Spacebars.attrMustache(view.lookup(\"dsk\"));                                                                 // 349\n  }), \"\\n    \", HTML.DIV({                                                                                             // 350\n    \"class\": \"radio\"                                                                                                   // 351\n  }, \"\\n      \", HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                                    // 352\n    type: \"radio\",                                                                                                     // 353\n    value: \"false\",                                                                                                    // 354\n    name: function() {                                                                                                 // 355\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"name\"));                                              // 356\n    }                                                                                                                  // 357\n  }, function() {                                                                                                      // 358\n    return Spacebars.attrMustache(view.lookup(\"falseAtts\"));                                                           // 359\n  })), \" \", Spacebars.With(function() {                                                                                // 360\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"falseLabel\"));                                      // 361\n  }, function() {                                                                                                      // 362\n    return Blaze.View(function() {                                                                                     // 363\n      return Spacebars.mustache(view.lookup(\".\"));                                                                     // 364\n    });                                                                                                                // 365\n  }, function() {                                                                                                      // 366\n    return \"False\";                                                                                                    // 367\n  })), \"\\n    \"), \"\\n    \", HTML.DIV({                                                                                 // 368\n    \"class\": \"radio\"                                                                                                   // 369\n  }, \"\\n      \", HTML.LABEL(HTML.INPUT(HTML.Attrs({                                                                    // 370\n    type: \"radio\",                                                                                                     // 371\n    value: \"true\",                                                                                                     // 372\n    name: function() {                                                                                                 // 373\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"name\"));                                              // 374\n    }                                                                                                                  // 375\n  }, function() {                                                                                                      // 376\n    return Spacebars.attrMustache(view.lookup(\"trueAtts\"));                                                            // 377\n  })), \" \", Spacebars.With(function() {                                                                                // 378\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"trueLabel\"));                                       // 379\n  }, function() {                                                                                                      // 380\n    return Blaze.View(function() {                                                                                     // 381\n      return Spacebars.mustache(view.lookup(\".\"));                                                                     // 382\n    });                                                                                                                // 383\n  }, function() {                                                                                                      // 384\n    return \"True\";                                                                                                     // 385\n  })), \"\\n    \"), \"\\n  \");                                                                                             // 386\n}));                                                                                                                   // 387\n                                                                                                                       // 388\nTemplate.__checkName(\"afSelect_bootstrap3\");                                                                           // 389\nTemplate[\"afSelect_bootstrap3\"] = new Template(\"Template.afSelect_bootstrap3\", (function() {                           // 390\n  var view = this;                                                                                                     // 391\n  return HTML.SELECT(HTML.Attrs(function() {                                                                           // 392\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 393\n  }), \"\\n    \", Blaze.Each(function() {                                                                                // 394\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 395\n  }, function() {                                                                                                      // 396\n    return [ \"\\n      \", Blaze.If(function() {                                                                         // 397\n      return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"optgroup\"));                                              // 398\n    }, function() {                                                                                                    // 399\n      return [ \"\\n        \", HTML.OPTGROUP({                                                                           // 400\n        label: function() {                                                                                            // 401\n          return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"optgroup\"));                                      // 402\n        }                                                                                                              // 403\n      }, \"\\n        \", Blaze.Each(function() {                                                                         // 404\n        return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                               // 405\n      }, function() {                                                                                                  // 406\n        return [ \"\\n        \", HTML.OPTION(HTML.Attrs(function() {                                                     // 407\n          return Spacebars.attrMustache(view.lookup(\"optionAtts\"));                                                    // 408\n        }), Blaze.View(function() {                                                                                    // 409\n          return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                         // 410\n        })), \"\\n        \" ];                                                                                           // 411\n      }), \"\\n        \"), \"\\n      \" ];                                                                                 // 412\n    }, function() {                                                                                                    // 413\n      return [ \"\\n        \", HTML.OPTION(HTML.Attrs(function() {                                                       // 414\n        return Spacebars.attrMustache(view.lookup(\"optionAtts\"));                                                      // 415\n      }), Blaze.View(function() {                                                                                      // 416\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                           // 417\n      })), \"\\n      \" ];                                                                                               // 418\n    }), \"\\n    \" ];                                                                                                    // 419\n  }), \"\\n  \");                                                                                                         // 420\n}));                                                                                                                   // 421\n                                                                                                                       // 422\nTemplate.__checkName(\"afBooleanSelect_bootstrap3\");                                                                    // 423\nTemplate[\"afBooleanSelect_bootstrap3\"] = new Template(\"Template.afBooleanSelect_bootstrap3\", (function() {             // 424\n  var view = this;                                                                                                     // 425\n  return HTML.SELECT(HTML.Attrs(function() {                                                                           // 426\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 427\n  }), \"\\n    \", Blaze.Each(function() {                                                                                // 428\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 429\n  }, function() {                                                                                                      // 430\n    return [ \"\\n      \", HTML.OPTION(HTML.Attrs(function() {                                                           // 431\n      return Spacebars.attrMustache(view.lookup(\"optionAtts\"));                                                        // 432\n    }), Blaze.View(function() {                                                                                        // 433\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                             // 434\n    })), \"\\n    \" ];                                                                                                   // 435\n  }), \"\\n  \");                                                                                                         // 436\n}));                                                                                                                   // 437\n                                                                                                                       // 438\nTemplate.__checkName(\"afSelectMultiple_bootstrap3\");                                                                   // 439\nTemplate[\"afSelectMultiple_bootstrap3\"] = new Template(\"Template.afSelectMultiple_bootstrap3\", (function() {           // 440\n  var view = this;                                                                                                     // 441\n  return HTML.SELECT(HTML.Attrs({                                                                                      // 442\n    multiple: \"\"                                                                                                       // 443\n  }, function() {                                                                                                      // 444\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 445\n  }), \"\\n    \", Blaze.Each(function() {                                                                                // 446\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                                   // 447\n  }, function() {                                                                                                      // 448\n    return [ \"\\n      \", Blaze.If(function() {                                                                         // 449\n      return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"optgroup\"));                                              // 450\n    }, function() {                                                                                                    // 451\n      return [ \"\\n        \", HTML.OPTGROUP({                                                                           // 452\n        label: function() {                                                                                            // 453\n          return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"optgroup\"));                                      // 454\n        }                                                                                                              // 455\n      }, \"\\n        \", Blaze.Each(function() {                                                                         // 456\n        return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"items\"));                                               // 457\n      }, function() {                                                                                                  // 458\n        return [ \"\\n        \", HTML.OPTION(HTML.Attrs(function() {                                                     // 459\n          return Spacebars.attrMustache(view.lookup(\"optionAtts\"));                                                    // 460\n        }), Blaze.View(function() {                                                                                    // 461\n          return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                         // 462\n        })), \"\\n        \" ];                                                                                           // 463\n      }), \"\\n        \"), \"\\n      \" ];                                                                                 // 464\n    }, function() {                                                                                                    // 465\n      return [ \"\\n        \", HTML.OPTION(HTML.Attrs(function() {                                                       // 466\n        return Spacebars.attrMustache(view.lookup(\"optionAtts\"));                                                      // 467\n      }), Blaze.View(function() {                                                                                      // 468\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"label\"));                                           // 469\n      })), \"\\n      \" ];                                                                                               // 470\n    }), \"\\n    \" ];                                                                                                    // 471\n  }), \"\\n  \");                                                                                                         // 472\n}));                                                                                                                   // 473\n                                                                                                                       // 474\nTemplate.__checkName(\"afTextarea_bootstrap3\");                                                                         // 475\nTemplate[\"afTextarea_bootstrap3\"] = new Template(\"Template.afTextarea_bootstrap3\", (function() {                       // 476\n  var view = this;                                                                                                     // 477\n  return HTML.TEXTAREA(HTML.Attrs(function() {                                                                         // 478\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 479\n  }, {                                                                                                                 // 480\n    value: function() {                                                                                                // 481\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 482\n    }                                                                                                                  // 483\n  }));                                                                                                                 // 484\n}));                                                                                                                   // 485\n                                                                                                                       // 486\nTemplate.__checkName(\"afInputText_bootstrap3\");                                                                        // 487\nTemplate[\"afInputText_bootstrap3\"] = new Template(\"Template.afInputText_bootstrap3\", (function() {                     // 488\n  var view = this;                                                                                                     // 489\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 490\n    type: \"text\",                                                                                                      // 491\n    value: function() {                                                                                                // 492\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 493\n    }                                                                                                                  // 494\n  }, function() {                                                                                                      // 495\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 496\n  }));                                                                                                                 // 497\n}));                                                                                                                   // 498\n                                                                                                                       // 499\nTemplate.__checkName(\"afInputPassword_bootstrap3\");                                                                    // 500\nTemplate[\"afInputPassword_bootstrap3\"] = new Template(\"Template.afInputPassword_bootstrap3\", (function() {             // 501\n  var view = this;                                                                                                     // 502\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 503\n    type: \"password\",                                                                                                  // 504\n    value: function() {                                                                                                // 505\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 506\n    }                                                                                                                  // 507\n  }, function() {                                                                                                      // 508\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 509\n  }));                                                                                                                 // 510\n}));                                                                                                                   // 511\n                                                                                                                       // 512\nTemplate.__checkName(\"afInputButton_bootstrap3\");                                                                      // 513\nTemplate[\"afInputButton_bootstrap3\"] = new Template(\"Template.afInputButton_bootstrap3\", (function() {                 // 514\n  var view = this;                                                                                                     // 515\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 516\n    type: \"button\",                                                                                                    // 517\n    value: function() {                                                                                                // 518\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 519\n    }                                                                                                                  // 520\n  }, function() {                                                                                                      // 521\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 522\n  }));                                                                                                                 // 523\n}));                                                                                                                   // 524\n                                                                                                                       // 525\nTemplate.__checkName(\"afInputSubmit_bootstrap3\");                                                                      // 526\nTemplate[\"afInputSubmit_bootstrap3\"] = new Template(\"Template.afInputSubmit_bootstrap3\", (function() {                 // 527\n  var view = this;                                                                                                     // 528\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 529\n    type: \"submit\",                                                                                                    // 530\n    value: function() {                                                                                                // 531\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 532\n    }                                                                                                                  // 533\n  }, function() {                                                                                                      // 534\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 535\n  }));                                                                                                                 // 536\n}));                                                                                                                   // 537\n                                                                                                                       // 538\nTemplate.__checkName(\"afInputReset_bootstrap3\");                                                                       // 539\nTemplate[\"afInputReset_bootstrap3\"] = new Template(\"Template.afInputReset_bootstrap3\", (function() {                   // 540\n  var view = this;                                                                                                     // 541\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 542\n    type: \"reset\",                                                                                                     // 543\n    value: function() {                                                                                                // 544\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 545\n    }                                                                                                                  // 546\n  }, function() {                                                                                                      // 547\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 548\n  }));                                                                                                                 // 549\n}));                                                                                                                   // 550\n                                                                                                                       // 551\nTemplate.__checkName(\"afInputDateTime_bootstrap3\");                                                                    // 552\nTemplate[\"afInputDateTime_bootstrap3\"] = new Template(\"Template.afInputDateTime_bootstrap3\", (function() {             // 553\n  var view = this;                                                                                                     // 554\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 555\n    type: \"datetime\",                                                                                                  // 556\n    value: function() {                                                                                                // 557\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 558\n    }                                                                                                                  // 559\n  }, function() {                                                                                                      // 560\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 561\n  }));                                                                                                                 // 562\n}));                                                                                                                   // 563\n                                                                                                                       // 564\nTemplate.__checkName(\"afInputDateTimeLocal_bootstrap3\");                                                               // 565\nTemplate[\"afInputDateTimeLocal_bootstrap3\"] = new Template(\"Template.afInputDateTimeLocal_bootstrap3\", (function() {   // 566\n  var view = this;                                                                                                     // 567\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 568\n    type: \"datetime-local\",                                                                                            // 569\n    value: function() {                                                                                                // 570\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 571\n    }                                                                                                                  // 572\n  }, function() {                                                                                                      // 573\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 574\n  }));                                                                                                                 // 575\n}));                                                                                                                   // 576\n                                                                                                                       // 577\nTemplate.__checkName(\"afInputDate_bootstrap3\");                                                                        // 578\nTemplate[\"afInputDate_bootstrap3\"] = new Template(\"Template.afInputDate_bootstrap3\", (function() {                     // 579\n  var view = this;                                                                                                     // 580\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 581\n    type: \"date\",                                                                                                      // 582\n    value: function() {                                                                                                // 583\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 584\n    }                                                                                                                  // 585\n  }, function() {                                                                                                      // 586\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 587\n  }));                                                                                                                 // 588\n}));                                                                                                                   // 589\n                                                                                                                       // 590\nTemplate.__checkName(\"afInputMonth_bootstrap3\");                                                                       // 591\nTemplate[\"afInputMonth_bootstrap3\"] = new Template(\"Template.afInputMonth_bootstrap3\", (function() {                   // 592\n  var view = this;                                                                                                     // 593\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 594\n    type: \"month\",                                                                                                     // 595\n    value: function() {                                                                                                // 596\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 597\n    }                                                                                                                  // 598\n  }, function() {                                                                                                      // 599\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 600\n  }));                                                                                                                 // 601\n}));                                                                                                                   // 602\n                                                                                                                       // 603\nTemplate.__checkName(\"afInputTime_bootstrap3\");                                                                        // 604\nTemplate[\"afInputTime_bootstrap3\"] = new Template(\"Template.afInputTime_bootstrap3\", (function() {                     // 605\n  var view = this;                                                                                                     // 606\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 607\n    type: \"time\",                                                                                                      // 608\n    value: function() {                                                                                                // 609\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 610\n    }                                                                                                                  // 611\n  }, function() {                                                                                                      // 612\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 613\n  }));                                                                                                                 // 614\n}));                                                                                                                   // 615\n                                                                                                                       // 616\nTemplate.__checkName(\"afInputWeek_bootstrap3\");                                                                        // 617\nTemplate[\"afInputWeek_bootstrap3\"] = new Template(\"Template.afInputWeek_bootstrap3\", (function() {                     // 618\n  var view = this;                                                                                                     // 619\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 620\n    type: \"week\",                                                                                                      // 621\n    value: function() {                                                                                                // 622\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 623\n    }                                                                                                                  // 624\n  }, function() {                                                                                                      // 625\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 626\n  }));                                                                                                                 // 627\n}));                                                                                                                   // 628\n                                                                                                                       // 629\nTemplate.__checkName(\"afInputNumber_bootstrap3\");                                                                      // 630\nTemplate[\"afInputNumber_bootstrap3\"] = new Template(\"Template.afInputNumber_bootstrap3\", (function() {                 // 631\n  var view = this;                                                                                                     // 632\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 633\n    type: \"number\",                                                                                                    // 634\n    value: function() {                                                                                                // 635\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 636\n    }                                                                                                                  // 637\n  }, function() {                                                                                                      // 638\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 639\n  }));                                                                                                                 // 640\n}));                                                                                                                   // 641\n                                                                                                                       // 642\nTemplate.__checkName(\"afInputRange_bootstrap3\");                                                                       // 643\nTemplate[\"afInputRange_bootstrap3\"] = new Template(\"Template.afInputRange_bootstrap3\", (function() {                   // 644\n  var view = this;                                                                                                     // 645\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 646\n    type: \"range\",                                                                                                     // 647\n    value: function() {                                                                                                // 648\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 649\n    }                                                                                                                  // 650\n  }, function() {                                                                                                      // 651\n    return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"atts\"));                                            // 652\n  }));                                                                                                                 // 653\n}));                                                                                                                   // 654\n                                                                                                                       // 655\nTemplate.__checkName(\"afInputEmail_bootstrap3\");                                                                       // 656\nTemplate[\"afInputEmail_bootstrap3\"] = new Template(\"Template.afInputEmail_bootstrap3\", (function() {                   // 657\n  var view = this;                                                                                                     // 658\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 659\n    type: \"email\",                                                                                                     // 660\n    value: function() {                                                                                                // 661\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 662\n    }                                                                                                                  // 663\n  }, function() {                                                                                                      // 664\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 665\n  }));                                                                                                                 // 666\n}));                                                                                                                   // 667\n                                                                                                                       // 668\nTemplate.__checkName(\"afInputUrl_bootstrap3\");                                                                         // 669\nTemplate[\"afInputUrl_bootstrap3\"] = new Template(\"Template.afInputUrl_bootstrap3\", (function() {                       // 670\n  var view = this;                                                                                                     // 671\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 672\n    type: \"url\",                                                                                                       // 673\n    value: function() {                                                                                                // 674\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 675\n    }                                                                                                                  // 676\n  }, function() {                                                                                                      // 677\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 678\n  }));                                                                                                                 // 679\n}));                                                                                                                   // 680\n                                                                                                                       // 681\nTemplate.__checkName(\"afInputSearch_bootstrap3\");                                                                      // 682\nTemplate[\"afInputSearch_bootstrap3\"] = new Template(\"Template.afInputSearch_bootstrap3\", (function() {                 // 683\n  var view = this;                                                                                                     // 684\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 685\n    type: \"search\",                                                                                                    // 686\n    value: function() {                                                                                                // 687\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 688\n    }                                                                                                                  // 689\n  }, function() {                                                                                                      // 690\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 691\n  }));                                                                                                                 // 692\n}));                                                                                                                   // 693\n                                                                                                                       // 694\nTemplate.__checkName(\"afInputTel_bootstrap3\");                                                                         // 695\nTemplate[\"afInputTel_bootstrap3\"] = new Template(\"Template.afInputTel_bootstrap3\", (function() {                       // 696\n  var view = this;                                                                                                     // 697\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 698\n    type: \"tel\",                                                                                                       // 699\n    value: function() {                                                                                                // 700\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 701\n    }                                                                                                                  // 702\n  }, function() {                                                                                                      // 703\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 704\n  }));                                                                                                                 // 705\n}));                                                                                                                   // 706\n                                                                                                                       // 707\nTemplate.__checkName(\"afInputColor_bootstrap3\");                                                                       // 708\nTemplate[\"afInputColor_bootstrap3\"] = new Template(\"Template.afInputColor_bootstrap3\", (function() {                   // 709\n  var view = this;                                                                                                     // 710\n  return HTML.INPUT(HTML.Attrs({                                                                                       // 711\n    type: \"color\",                                                                                                     // 712\n    value: function() {                                                                                                // 713\n      return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                             // 714\n    }                                                                                                                  // 715\n  }, function() {                                                                                                      // 716\n    return Spacebars.attrMustache(view.lookup(\"atts\"));                                                                // 717\n  }));                                                                                                                 // 718\n}));                                                                                                                   // 719\n                                                                                                                       // 720\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3/bootstrap3.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*                                                                                                                     // 1\n * Template helpers for \"bootstrap3\" template                                                                          // 2\n */                                                                                                                    // 3\n                                                                                                                       // 4\nTemplate['quickForm_bootstrap3'].helpers({                                                                             // 5\n  submitButtonAtts: function bsQuickFormSubmitButtonAtts() {                                                           // 6\n    var qfAtts = this.atts;                                                                                            // 7\n    var atts = {};                                                                                                     // 8\n    if (typeof qfAtts.buttonClasses === \"string\") {                                                                    // 9\n      atts['class'] = qfAtts.buttonClasses;                                                                            // 10\n    } else {                                                                                                           // 11\n      atts['class'] = 'btn btn-primary';                                                                               // 12\n    }                                                                                                                  // 13\n    return atts;                                                                                                       // 14\n  }                                                                                                                    // 15\n});                                                                                                                    // 16\n                                                                                                                       // 17\nTemplate['afFormGroup_bootstrap3'].helpers({                                                                           // 18\n  skipLabel: function bsFormGroupSkipLabel() {                                                                         // 19\n    var self = this;                                                                                                   // 20\n                                                                                                                       // 21\n    var type = AutoForm.getInputType(self.afFieldInputAtts);                                                           // 22\n    return (self.skipLabel || type === \"boolean-checkbox\");                                                            // 23\n  },                                                                                                                   // 24\n  bsFieldLabelAtts: function bsFieldLabelAtts() {                                                                      // 25\n    var atts = _.clone(this.afFieldLabelAtts);                                                                         // 26\n    // Add bootstrap class                                                                                             // 27\n    atts = AutoForm.Utility.addClass(atts, \"control-label\");                                                           // 28\n    return atts;                                                                                                       // 29\n  }                                                                                                                    // 30\n});                                                                                                                    // 31\n                                                                                                                       // 32\n_.each([                                                                                                               // 33\n    \"afSelect_bootstrap3\",                                                                                             // 34\n    \"afBooleanSelect_bootstrap3\",                                                                                      // 35\n    \"afSelectMultiple_bootstrap3\",                                                                                     // 36\n    \"afTextarea_bootstrap3\",                                                                                           // 37\n    \"afInputText_bootstrap3\",                                                                                          // 38\n    \"afInputPassword_bootstrap3\",                                                                                      // 39\n    \"afInputDateTime_bootstrap3\",                                                                                      // 40\n    \"afInputDateTimeLocal_bootstrap3\",                                                                                 // 41\n    \"afInputDate_bootstrap3\",                                                                                          // 42\n    \"afInputMonth_bootstrap3\",                                                                                         // 43\n    \"afInputTime_bootstrap3\",                                                                                          // 44\n    \"afInputWeek_bootstrap3\",                                                                                          // 45\n    \"afInputNumber_bootstrap3\",                                                                                        // 46\n    \"afInputEmail_bootstrap3\",                                                                                         // 47\n    \"afInputUrl_bootstrap3\",                                                                                           // 48\n    \"afInputSearch_bootstrap3\",                                                                                        // 49\n    \"afInputTel_bootstrap3\",                                                                                           // 50\n    \"afInputColor_bootstrap3\"                                                                                          // 51\n  ], function (tmplName) {                                                                                             // 52\n  Template[tmplName].helpers({                                                                                         // 53\n    atts: function addFormControlAtts() {                                                                              // 54\n      var atts = _.clone(this.atts);                                                                                   // 55\n      // Add bootstrap class                                                                                           // 56\n      atts = AutoForm.Utility.addClass(atts, \"form-control\");                                                          // 57\n      return atts;                                                                                                     // 58\n    }                                                                                                                  // 59\n  });                                                                                                                  // 60\n});                                                                                                                    // 61\n                                                                                                                       // 62\n_.each([                                                                                                               // 63\n    \"afInputButton_bootstrap3\",                                                                                        // 64\n    \"afInputSubmit_bootstrap3\",                                                                                        // 65\n    \"afInputReset_bootstrap3\",                                                                                         // 66\n  ], function (tmplName) {                                                                                             // 67\n  Template[tmplName].helpers({                                                                                         // 68\n    atts: function addFormControlAtts() {                                                                              // 69\n      var atts = _.clone(this.atts);                                                                                   // 70\n      // Add bootstrap class                                                                                           // 71\n      atts = AutoForm.Utility.addClass(atts, \"btn\");                                                                   // 72\n      return atts;                                                                                                     // 73\n    }                                                                                                                  // 74\n  });                                                                                                                  // 75\n});                                                                                                                    // 76\n                                                                                                                       // 77\nTemplate[\"afRadio_bootstrap3\"].helpers({                                                                               // 78\n  atts: function selectedAttsAdjust() {                                                                                // 79\n    var atts = _.clone(this.atts);                                                                                     // 80\n    if (this.selected) {                                                                                               // 81\n      atts.checked = \"\";                                                                                               // 82\n    }                                                                                                                  // 83\n    return atts;                                                                                                       // 84\n  }                                                                                                                    // 85\n});                                                                                                                    // 86\n                                                                                                                       // 87\n_.each([                                                                                                               // 88\n    \"afCheckboxGroup_bootstrap3\",                                                                                      // 89\n    \"afRadioGroup_bootstrap3\",                                                                                         // 90\n    \"afCheckboxGroupInline_bootstrap3\",                                                                                // 91\n    \"afRadioGroupInline_bootstrap3\"                                                                                    // 92\n  ], function (tmplName) {                                                                                             // 93\n  Template[tmplName].helpers({                                                                                         // 94\n    atts: function selectedAttsAdjust() {                                                                              // 95\n      var atts = _.clone(this.atts);                                                                                   // 96\n      if (this.selected) {                                                                                             // 97\n        atts.checked = \"\";                                                                                             // 98\n      }                                                                                                                // 99\n      // remove data-schema-key attribute because we put it                                                            // 100\n      // on the entire group                                                                                           // 101\n      delete atts[\"data-schema-key\"];                                                                                  // 102\n      return atts;                                                                                                     // 103\n    },                                                                                                                 // 104\n    dsk: function dsk() {                                                                                              // 105\n      return {                                                                                                         // 106\n        \"data-schema-key\": this.atts[\"data-schema-key\"]                                                                // 107\n      }                                                                                                                // 108\n    }                                                                                                                  // 109\n  });                                                                                                                  // 110\n});                                                                                                                    // 111\n                                                                                                                       // 112\nvar selectHelpers = {                                                                                                  // 113\n  optionAtts: function afSelectOptionAtts() {                                                                          // 114\n    var item = this;                                                                                                   // 115\n    var atts = {                                                                                                       // 116\n      value: item.value                                                                                                // 117\n    };                                                                                                                 // 118\n    if (item.selected) {                                                                                               // 119\n      atts.selected = \"\";                                                                                              // 120\n    }                                                                                                                  // 121\n    return atts;                                                                                                       // 122\n  }                                                                                                                    // 123\n};                                                                                                                     // 124\nTemplate[\"afSelect_bootstrap3\"].helpers(selectHelpers);                                                                // 125\nTemplate[\"afSelectMultiple_bootstrap3\"].helpers(selectHelpers);                                                        // 126\nTemplate[\"afBooleanSelect_bootstrap3\"].helpers(selectHelpers);                                                         // 127\n                                                                                                                       // 128\nTemplate[\"afBooleanRadioGroup_bootstrap3\"].helpers({                                                                   // 129\n  falseAtts: function falseAtts() {                                                                                    // 130\n    var atts = _.omit(this.atts, 'trueLabel', 'falseLabel', 'data-schema-key');                                        // 131\n    if (this.value === false) {                                                                                        // 132\n      atts.checked = \"\";                                                                                               // 133\n    }                                                                                                                  // 134\n    return atts;                                                                                                       // 135\n  },                                                                                                                   // 136\n  trueAtts: function trueAtts() {                                                                                      // 137\n    var atts = _.omit(this.atts, 'trueLabel', 'falseLabel', 'data-schema-key');                                        // 138\n    if (this.value === true) {                                                                                         // 139\n      atts.checked = \"\";                                                                                               // 140\n    }                                                                                                                  // 141\n    return atts;                                                                                                       // 142\n  },                                                                                                                   // 143\n  dsk: function () {                                                                                                   // 144\n    return {'data-schema-key': this.atts['data-schema-key']};                                                          // 145\n  }                                                                                                                    // 146\n});                                                                                                                    // 147\n                                                                                                                       // 148\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3-horizontal/template.bootstrap3-horizontal.js                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"quickForm_bootstrap3-horizontal\");                                                               // 2\nTemplate[\"quickForm_bootstrap3-horizontal\"] = new Template(\"Template.quickForm_bootstrap3-horizontal\", (function() {   // 3\n  var view = this;                                                                                                     // 4\n  return Blaze._TemplateWith(function() {                                                                              // 5\n    return Spacebars.call(view.lookup(\"qfAutoFormContext\"));                                                           // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.include(view.lookupTemplate(\"autoForm\"), function() {                                             // 8\n      return [ \"\\n    \", Blaze._TemplateWith(function() {                                                              // 9\n        return {                                                                                                       // 10\n          \"input-col-class\": Spacebars.call(view.lookup(\"inputClass\")),                                                // 11\n          \"label-class\": Spacebars.call(view.lookup(\"labelClass\"))                                                     // 12\n        };                                                                                                             // 13\n      }, function() {                                                                                                  // 14\n        return Spacebars.include(view.lookupTemplate(\"afQuickFields\"));                                                // 15\n      }), \"\\n    \", Blaze.If(function() {                                                                              // 16\n        return Spacebars.call(view.lookup(\"qfShouldRenderButton\"));                                                    // 17\n      }, function() {                                                                                                  // 18\n        return [ \"\\n    \", HTML.DIV({                                                                                  // 19\n          \"class\": \"form-group\"                                                                                        // 20\n        }, \"\\n      \", HTML.DIV({                                                                                      // 21\n          \"class\": function() {                                                                                        // 22\n            return Spacebars.mustache(view.lookup(\"labelClass\"));                                                      // 23\n          }                                                                                                            // 24\n        }), \"\\n      \", HTML.DIV({                                                                                     // 25\n          \"class\": function() {                                                                                        // 26\n            return Spacebars.mustache(view.lookup(\"inputClass\"));                                                      // 27\n          }                                                                                                            // 28\n        }, \"\\n        \", HTML.BUTTON(HTML.Attrs({                                                                      // 29\n          type: \"submit\"                                                                                               // 30\n        }, function() {                                                                                                // 31\n          return Spacebars.attrMustache(view.lookup(\"submitButtonAtts\"));                                              // 32\n        }), \"\\n        \", Spacebars.With(function() {                                                                  // 33\n          return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"atts\", \"buttonContent\"));                            // 34\n        }, function() {                                                                                                // 35\n          return [ \"\\n        \", Blaze.View(function() {                                                               // 36\n            return Spacebars.mustache(view.lookup(\".\"));                                                               // 37\n          }), \"\\n        \" ];                                                                                          // 38\n        }, function() {                                                                                                // 39\n          return \"\\n        Submit\\n        \";                                                                         // 40\n        }), \"\\n        \"), \"\\n      \"), \"\\n    \"), \"\\n    \" ];                                                         // 41\n      }), \"\\n  \" ];                                                                                                    // 42\n    });                                                                                                                // 43\n  });                                                                                                                  // 44\n}));                                                                                                                   // 45\n                                                                                                                       // 46\nTemplate.__checkName(\"afFormGroup_bootstrap3-horizontal\");                                                             // 47\nTemplate[\"afFormGroup_bootstrap3-horizontal\"] = new Template(\"Template.afFormGroup_bootstrap3-horizontal\", (function() {\n  var view = this;                                                                                                     // 49\n  return HTML.DIV({                                                                                                    // 50\n    \"class\": function() {                                                                                              // 51\n      return [ \"form-group \", Blaze.If(function() {                                                                    // 52\n        return Spacebars.dataMustache(view.lookup(\"afFieldIsInvalid\"), Spacebars.kw({                                  // 53\n          name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                        // 54\n        }));                                                                                                           // 55\n      }, function() {                                                                                                  // 56\n        return \"has-error\";                                                                                            // 57\n      }) ];                                                                                                            // 58\n    }                                                                                                                  // 59\n  }, \"\\n    \", Blaze.If(function() {                                                                                   // 60\n    return Spacebars.call(view.lookup(\"skipLabel\"));                                                                   // 61\n  }, function() {                                                                                                      // 62\n    return [ \"\\n    \\n    \", HTML.LABEL(HTML.Attrs(function() {                                                        // 63\n      return Spacebars.attrMustache(view.lookup(\"afFieldLabelAtts\"));                                                  // 64\n    })), \"\\n    \" ];                                                                                                   // 65\n  }, function() {                                                                                                      // 66\n    return [ \"\\n    \", HTML.LABEL(HTML.Attrs(function() {                                                              // 67\n      return Spacebars.attrMustache(view.lookup(\"afFieldLabelAtts\"));                                                  // 68\n    }), Blaze.If(function() {                                                                                          // 69\n      return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"labelText\"));                                             // 70\n    }, function() {                                                                                                    // 71\n      return Blaze.View(function() {                                                                                   // 72\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"labelText\"));                                       // 73\n      });                                                                                                              // 74\n    }, function() {                                                                                                    // 75\n      return Blaze.View(function() {                                                                                   // 76\n        return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                      // 77\n          name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                        // 78\n        }));                                                                                                           // 79\n      });                                                                                                              // 80\n    })), \"\\n    \" ];                                                                                                   // 81\n  }), \"\\n    \", HTML.DIV({                                                                                             // 82\n    \"class\": function() {                                                                                              // 83\n      return Spacebars.mustache(view.lookup(\"rightColumnClass\"));                                                      // 84\n    }                                                                                                                  // 85\n  }, \"\\n      \", Blaze._TemplateWith(function() {                                                                      // 86\n    return Spacebars.call(view.lookup(\"afFieldInputAtts\"));                                                            // 87\n  }, function() {                                                                                                      // 88\n    return Spacebars.include(view.lookupTemplate(\"afFieldInput\"));                                                     // 89\n  }), \"\\n      \", HTML.SPAN({                                                                                          // 90\n    \"class\": \"help-block\"                                                                                              // 91\n  }, Blaze.View(function() {                                                                                           // 92\n    return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"afFieldMessage\"), Spacebars.kw({                          // 93\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                            // 94\n    })));                                                                                                              // 95\n  })), \"\\n    \"), \"\\n  \");                                                                                             // 96\n}));                                                                                                                   // 97\n                                                                                                                       // 98\nTemplate.__checkName(\"afObjectField_bootstrap3-horizontal\");                                                           // 99\nTemplate[\"afObjectField_bootstrap3-horizontal\"] = new Template(\"Template.afObjectField_bootstrap3-horizontal\", (function() {\n  var view = this;                                                                                                     // 101\n  return HTML.DIV({                                                                                                    // 102\n    \"class\": function() {                                                                                              // 103\n      return [ \"form-group \", Blaze.If(function() {                                                                    // 104\n        return Spacebars.dataMustache(view.lookup(\"afFieldIsInvalid\"), Spacebars.kw({                                  // 105\n          name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                        // 106\n        }));                                                                                                           // 107\n      }, function() {                                                                                                  // 108\n        return \"has-error\";                                                                                            // 109\n      }) ];                                                                                                            // 110\n    }                                                                                                                  // 111\n  }, \"\\n    \", HTML.LABEL(HTML.Attrs(function() {                                                                      // 112\n    return Spacebars.attrMustache(view.lookup(\"afFieldLabelAtts\"));                                                    // 113\n  }), Blaze.View(function() {                                                                                          // 114\n    return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                          // 115\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                            // 116\n    }));                                                                                                               // 117\n  })), \"\\n    \", HTML.DIV({                                                                                            // 118\n    \"class\": function() {                                                                                              // 119\n      return Spacebars.mustache(view.lookup(\"rightColumnClass\"));                                                      // 120\n    }                                                                                                                  // 121\n  }, \"\\n      \", HTML.DIV({                                                                                            // 122\n    \"class\": \"panel panel-default autoform-padding-fix\"                                                                // 123\n  }, \"\\n        \", HTML.DIV({                                                                                          // 124\n    \"class\": \"panel-body\"                                                                                              // 125\n  }, \"\\n        \\n        \", Blaze._TemplateWith(function() {                                                          // 126\n    return {                                                                                                           // 127\n      name: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")),                                           // 128\n      template: Spacebars.call(\"bootstrap3\")                                                                           // 129\n    };                                                                                                                 // 130\n  }, function() {                                                                                                      // 131\n    return Spacebars.include(view.lookupTemplate(\"afQuickFields\"));                                                    // 132\n  }), \"\\n        \"), \"\\n      \"), \"\\n    \"), \"\\n  \");                                                                  // 133\n}));                                                                                                                   // 134\n                                                                                                                       // 135\nTemplate.__checkName(\"afArrayField_bootstrap3-horizontal\");                                                            // 136\nTemplate[\"afArrayField_bootstrap3-horizontal\"] = new Template(\"Template.afArrayField_bootstrap3-horizontal\", (function() {\n  var view = this;                                                                                                     // 138\n  return HTML.DIV({                                                                                                    // 139\n    \"class\": function() {                                                                                              // 140\n      return [ \"form-group \", Blaze.If(function() {                                                                    // 141\n        return Spacebars.dataMustache(view.lookup(\"afFieldIsInvalid\"), Spacebars.kw({                                  // 142\n          name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                        // 143\n        }));                                                                                                           // 144\n      }, function() {                                                                                                  // 145\n        return \"has-error\";                                                                                            // 146\n      }) ];                                                                                                            // 147\n    }                                                                                                                  // 148\n  }, \"\\n    \", HTML.LABEL(HTML.Attrs(function() {                                                                      // 149\n    return Spacebars.attrMustache(view.lookup(\"afFieldLabelAtts\"));                                                    // 150\n  }), Blaze.View(function() {                                                                                          // 151\n    return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                          // 152\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                            // 153\n    }));                                                                                                               // 154\n  })), \"\\n    \", HTML.DIV({                                                                                            // 155\n    \"class\": function() {                                                                                              // 156\n      return Spacebars.mustache(view.lookup(\"rightColumnClass\"));                                                      // 157\n    }                                                                                                                  // 158\n  }, \"\\n      \", HTML.DIV({                                                                                            // 159\n    \"class\": \"panel panel-default autoform-padding-fix\"                                                                // 160\n  }, \"\\n        \", Blaze.If(function() {                                                                               // 161\n    return Spacebars.dataMustache(view.lookup(\"afFieldIsInvalid\"), Spacebars.kw({                                      // 162\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                            // 163\n    }));                                                                                                               // 164\n  }, function() {                                                                                                      // 165\n    return [ \"\\n        \", HTML.DIV({                                                                                  // 166\n      \"class\": \"panel-body has-error\"                                                                                  // 167\n    }, \"\\n          \", HTML.SPAN({                                                                                     // 168\n      \"class\": \"help-block\"                                                                                            // 169\n    }, Blaze.View(function() {                                                                                         // 170\n      return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"afFieldMessage\"), Spacebars.kw({                        // 171\n        name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                          // 172\n      })));                                                                                                            // 173\n    })), \"\\n        \"), \"\\n        \" ];                                                                                // 174\n  }), \"\\n        \", HTML.UL({                                                                                          // 175\n    \"class\": \"list-group\"                                                                                              // 176\n  }, \"\\n          \", Blaze._TemplateWith(function() {                                                                  // 177\n    return {                                                                                                           // 178\n      name: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")),                                           // 179\n      minCount: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"minCount\")),                                   // 180\n      maxCount: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"maxCount\"))                                    // 181\n    };                                                                                                                 // 182\n  }, function() {                                                                                                      // 183\n    return Spacebars.include(view.lookupTemplate(\"afEachArrayItem\"), function() {                                      // 184\n      return [ \"\\n          \", HTML.LI({                                                                               // 185\n        \"class\": \"list-group-item autoform-array-item\"                                                                 // 186\n      }, \"\\n            \", HTML.DIV({                                                                                  // 187\n        \"class\": \"media\"                                                                                               // 188\n      }, \"\\n              \", Blaze.If(function() {                                                                     // 189\n        return Spacebars.dataMustache(view.lookup(\"afArrayFieldHasMoreThanMinimum\"), Spacebars.kw({                    // 190\n          name: Spacebars.dot(view.lookup(\"..\"), \"atts\", \"name\"),                                                      // 191\n          minCount: Spacebars.dot(view.lookup(\"..\"), \"atts\", \"minCount\"),                                              // 192\n          maxCount: Spacebars.dot(view.lookup(\"..\"), \"atts\", \"maxCount\")                                               // 193\n        }));                                                                                                           // 194\n      }, function() {                                                                                                  // 195\n        return [ \"\\n              \", HTML.BUTTON({                                                                     // 196\n          type: \"button\",                                                                                              // 197\n          \"class\": \"btn btn-primary autoform-remove-item pull-left\"                                                    // 198\n        }, HTML.SPAN({                                                                                                 // 199\n          \"class\": \"glyphicon glyphicon-minus\"                                                                         // 200\n        })), \"\\n              \" ];                                                                                     // 201\n      }), \"\\n              \", HTML.DIV({                                                                               // 202\n        \"class\": \"media-body\"                                                                                          // 203\n      }, \"\\n                \", Blaze._TemplateWith(function() {                                                        // 204\n        return {                                                                                                       // 205\n          name: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"name\")),                                               // 206\n          label: Spacebars.call(false)                                                                                 // 207\n        };                                                                                                             // 208\n      }, function() {                                                                                                  // 209\n        return Spacebars.include(view.lookupTemplate(\"afQuickField\"));                                                 // 210\n      }), \"\\n              \"), \"\\n            \"), \"\\n          \"), \"\\n          \" ];                                   // 211\n    });                                                                                                                // 212\n  }), \"\\n          \", Blaze.If(function() {                                                                            // 213\n    return Spacebars.dataMustache(view.lookup(\"afArrayFieldHasLessThanMaximum\"), Spacebars.kw({                        // 214\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\"),                                                           // 215\n      minCount: Spacebars.dot(view.lookup(\".\"), \"atts\", \"minCount\"),                                                   // 216\n      maxCount: Spacebars.dot(view.lookup(\".\"), \"atts\", \"maxCount\")                                                    // 217\n    }));                                                                                                               // 218\n  }, function() {                                                                                                      // 219\n    return [ \"\\n          \", HTML.LI({                                                                                 // 220\n      \"class\": \"list-group-item\"                                                                                       // 221\n    }, \"\\n            \", HTML.BUTTON({                                                                                 // 222\n      type: \"button\",                                                                                                  // 223\n      \"class\": \"btn btn-primary autoform-add-item\",                                                                    // 224\n      \"data-autoform-field\": function() {                                                                              // 225\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\"));                                    // 226\n      },                                                                                                               // 227\n      \"data-autoform-mincount\": function() {                                                                           // 228\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"atts\", \"minCount\"));                                // 229\n      },                                                                                                               // 230\n      \"data-autoform-maxcount\": function() {                                                                           // 231\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"atts\", \"maxCount\"));                                // 232\n      }                                                                                                                // 233\n    }, HTML.SPAN({                                                                                                     // 234\n      \"class\": \"glyphicon glyphicon-plus\"                                                                              // 235\n    })), \"\\n          \"), \"\\n          \" ];                                                                            // 236\n  }), \"\\n        \"), \"\\n      \"), \"\\n    \"), \"\\n  \");                                                                  // 237\n}));                                                                                                                   // 238\n                                                                                                                       // 239\nTemplate.__checkName(\"afCheckbox_bootstrap3-horizontal\");                                                              // 240\nTemplate[\"afCheckbox_bootstrap3-horizontal\"] = new Template(\"Template.afCheckbox_bootstrap3-horizontal\", (function() { // 241\n  var view = this;                                                                                                     // 242\n  return Blaze.If(function() {                                                                                         // 243\n    return Spacebars.call(view.lookup(\"useLeftLabel\"));                                                                // 244\n  }, function() {                                                                                                      // 245\n    return [ \"\\n  \\n  \", HTML.DIV({                                                                                    // 246\n      \"class\": \"checkbox\"                                                                                              // 247\n    }, \"\\n    \", HTML.INPUT(HTML.Attrs({                                                                               // 248\n      type: \"checkbox\",                                                                                                // 249\n      value: function() {                                                                                              // 250\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                           // 251\n      }                                                                                                                // 252\n    }, function() {                                                                                                    // 253\n      return Spacebars.attrMustache(view.lookup(\"attsPlusSpecialClass\"));                                              // 254\n    })), \"\\n  \"), \"\\n  \" ];                                                                                            // 255\n  }, function() {                                                                                                      // 256\n    return [ \"\\n  \", HTML.DIV({                                                                                        // 257\n      \"class\": \"checkbox\"                                                                                              // 258\n    }, \"\\n    \", HTML.LABEL(\"\\n      \", HTML.INPUT(HTML.Attrs({                                                        // 259\n      type: \"checkbox\",                                                                                                // 260\n      value: function() {                                                                                              // 261\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"value\"));                                           // 262\n      }                                                                                                                // 263\n    }, function() {                                                                                                    // 264\n      return Spacebars.attrMustache(view.lookup(\"atts\"));                                                              // 265\n    })), \"\\n      \", Blaze.View(function() {                                                                           // 266\n      return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                        // 267\n        name: Spacebars.dot(view.lookup(\".\"), \"name\")                                                                  // 268\n      }));                                                                                                             // 269\n    }), \"\\n    \"), \"\\n  \"), \"\\n  \" ];                                                                                  // 270\n  });                                                                                                                  // 271\n}));                                                                                                                   // 272\n                                                                                                                       // 273\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3-horizontal/bootstrap3-horizontal.js                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nfunction findAtts() {                                                                                                  // 1\n  var c, n = 0;                                                                                                        // 2\n  do {                                                                                                                 // 3\n    c = Template.parentData(n++);                                                                                      // 4\n  } while (c && !c.atts);                                                                                              // 5\n  return c && c.atts;                                                                                                  // 6\n}                                                                                                                      // 7\n                                                                                                                       // 8\nTemplate['quickForm_bootstrap3-horizontal'].helpers({                                                                  // 9\n  inputClass: function () {                                                                                            // 10\n    var atts = findAtts();                                                                                             // 11\n    if (atts) {                                                                                                        // 12\n      return atts[\"input-col-class\"];                                                                                  // 13\n    }                                                                                                                  // 14\n  },                                                                                                                   // 15\n  labelClass: function () {                                                                                            // 16\n    var atts = findAtts();                                                                                             // 17\n    if (atts) {                                                                                                        // 18\n      return atts[\"label-class\"];                                                                                      // 19\n    }                                                                                                                  // 20\n  },                                                                                                                   // 21\n  submitButtonAtts: function () {                                                                                      // 22\n    var qfAtts = this.atts;                                                                                            // 23\n    var atts = {};                                                                                                     // 24\n    if (typeof qfAtts.buttonClasses === \"string\") {                                                                    // 25\n      atts['class'] = qfAtts.buttonClasses;                                                                            // 26\n    } else {                                                                                                           // 27\n      atts['class'] = 'btn btn-primary';                                                                               // 28\n    }                                                                                                                  // 29\n    return atts;                                                                                                       // 30\n  },                                                                                                                   // 31\n  qfAutoFormContext: function () {                                                                                     // 32\n    var ctx = _.clone(this.qfAutoFormContext || {});                                                                   // 33\n    ctx = AutoForm.Utility.addClass(ctx, \"form-horizontal\");                                                           // 34\n    if (ctx[\"input-col-class\"])                                                                                        // 35\n      delete ctx[\"input-col-class\"];                                                                                   // 36\n    if (ctx[\"label-class\"])                                                                                            // 37\n      delete ctx[\"label-class\"];                                                                                       // 38\n    return ctx;                                                                                                        // 39\n  }                                                                                                                    // 40\n});                                                                                                                    // 41\n                                                                                                                       // 42\nTemplate[\"afFormGroup_bootstrap3-horizontal\"].helpers({                                                                // 43\n  afFieldInputAtts: function () {                                                                                      // 44\n    var atts = _.clone(this.afFieldInputAtts || {});                                                                   // 45\n    if ('input-col-class' in atts) {                                                                                   // 46\n      delete atts['input-col-class'];                                                                                  // 47\n    }                                                                                                                  // 48\n    // We have a special template for check boxes, but otherwise we                                                    // 49\n    // want to use the same as those defined for bootstrap3 template.                                                  // 50\n    if (AutoForm.getInputType(this.afFieldInputAtts) === \"boolean-checkbox\") {                                         // 51\n      atts.template = \"bootstrap3-horizontal\";                                                                         // 52\n    } else {                                                                                                           // 53\n      atts.template = \"bootstrap3\";                                                                                    // 54\n    }                                                                                                                  // 55\n    return atts;                                                                                                       // 56\n  },                                                                                                                   // 57\n  afFieldLabelAtts: function () {                                                                                      // 58\n    var atts = _.clone(this.afFieldLabelAtts || {});                                                                   // 59\n    // Add bootstrap class                                                                                             // 60\n    atts = AutoForm.Utility.addClass(atts, \"control-label\");                                                           // 61\n    return atts;                                                                                                       // 62\n  },                                                                                                                   // 63\n  rightColumnClass: function () {                                                                                      // 64\n    var atts = this.afFieldInputAtts || {};                                                                            // 65\n    return atts['input-col-class'] || \"\";                                                                              // 66\n  },                                                                                                                   // 67\n  skipLabel: function () {                                                                                             // 68\n    var self = this;                                                                                                   // 69\n                                                                                                                       // 70\n    var type = AutoForm.getInputType(self.afFieldInputAtts);                                                           // 71\n    return (self.skipLabel || (type === \"boolean-checkbox\" && !self.afFieldInputAtts.leftLabel));                      // 72\n  }                                                                                                                    // 73\n});                                                                                                                    // 74\n                                                                                                                       // 75\nTemplate[\"afObjectField_bootstrap3-horizontal\"].helpers({                                                              // 76\n  rightColumnClass: function () {                                                                                      // 77\n    var atts = this.atts || {};                                                                                        // 78\n    return atts['input-col-class'] || \"\";                                                                              // 79\n  },                                                                                                                   // 80\n  afFieldLabelAtts: function () {                                                                                      // 81\n    // Use only atts beginning with label-                                                                             // 82\n    var labelAtts = {};                                                                                                // 83\n    _.each(this.atts, function (val, key) {                                                                            // 84\n      if (key.indexOf(\"label-\") === 0) {                                                                               // 85\n        labelAtts[key.substring(6)] = val;                                                                             // 86\n      }                                                                                                                // 87\n    });                                                                                                                // 88\n    // Add bootstrap class                                                                                             // 89\n    labelAtts = AutoForm.Utility.addClass(labelAtts, \"control-label\");                                                 // 90\n    return labelAtts;                                                                                                  // 91\n  }                                                                                                                    // 92\n});                                                                                                                    // 93\n                                                                                                                       // 94\nTemplate[\"afArrayField_bootstrap3-horizontal\"].helpers({                                                               // 95\n  rightColumnClass: function () {                                                                                      // 96\n    var atts = this.atts || {};                                                                                        // 97\n    return atts['input-col-class'] || \"\";                                                                              // 98\n  },                                                                                                                   // 99\n  afFieldLabelAtts: function () {                                                                                      // 100\n    // Use only atts beginning with label-                                                                             // 101\n    var labelAtts = {};                                                                                                // 102\n    _.each(this.atts, function (val, key) {                                                                            // 103\n      if (key.indexOf(\"label-\") === 0) {                                                                               // 104\n        labelAtts[key.substring(6)] = val;                                                                             // 105\n      }                                                                                                                // 106\n    });                                                                                                                // 107\n    // Add bootstrap class                                                                                             // 108\n    labelAtts = AutoForm.Utility.addClass(labelAtts, \"control-label\");                                                 // 109\n    return labelAtts;                                                                                                  // 110\n  }                                                                                                                    // 111\n});                                                                                                                    // 112\n                                                                                                                       // 113\nTemplate[\"afCheckbox_bootstrap3-horizontal\"].helpers({                                                                 // 114\n  attsPlusSpecialClass: function () {                                                                                  // 115\n    var atts = _.clone(this.atts);                                                                                     // 116\n    atts = AutoForm.Utility.addClass(atts, \"autoform-checkbox-margin-fix\");                                            // 117\n    return atts;                                                                                                       // 118\n  },                                                                                                                   // 119\n  useLeftLabel: function () {                                                                                          // 120\n    return this.atts.leftLabel;                                                                                        // 121\n  }                                                                                                                    // 122\n});                                                                                                                    // 123\n                                                                                                                       // 124\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3-inline/template.bootstrap3-inline.js                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"quickForm_bootstrap3-inline\");                                                                   // 2\nTemplate[\"quickForm_bootstrap3-inline\"] = new Template(\"Template.quickForm_bootstrap3-inline\", (function() {           // 3\n  var view = this;                                                                                                     // 4\n  return Blaze._TemplateWith(function() {                                                                              // 5\n    return Spacebars.call(view.lookup(\"qfAutoFormContext\"));                                                           // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.include(view.lookupTemplate(\"autoForm\"), function() {                                             // 8\n      return [ \"\\n    \", Blaze._TemplateWith(function() {                                                              // 9\n        return {                                                                                                       // 10\n          \"label-class\": Spacebars.call(view.lookup(\"labelClass\"))                                                     // 11\n        };                                                                                                             // 12\n      }, function() {                                                                                                  // 13\n        return Spacebars.include(view.lookupTemplate(\"afQuickFields\"));                                                // 14\n      }), \"\\n    \", Blaze.If(function() {                                                                              // 15\n        return Spacebars.call(view.lookup(\"qfShouldRenderButton\"));                                                    // 16\n      }, function() {                                                                                                  // 17\n        return [ \"\\n    \", HTML.BUTTON(HTML.Attrs({                                                                    // 18\n          type: \"submit\"                                                                                               // 19\n        }, function() {                                                                                                // 20\n          return Spacebars.attrMustache(view.lookup(\"submitButtonAtts\"));                                              // 21\n        }), \"\\n    \", Spacebars.With(function() {                                                                      // 22\n          return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"atts\", \"buttonContent\"));                            // 23\n        }, function() {                                                                                                // 24\n          return [ \"\\n    \", Blaze.View(function() {                                                                   // 25\n            return Spacebars.mustache(view.lookup(\".\"));                                                               // 26\n          }), \"\\n    \" ];                                                                                              // 27\n        }, function() {                                                                                                // 28\n          return \"\\n    Submit\\n    \";                                                                                 // 29\n        }), \"\\n    \"), \"\\n    \" ];                                                                                     // 30\n      }), \"\\n  \" ];                                                                                                    // 31\n    });                                                                                                                // 32\n  });                                                                                                                  // 33\n}));                                                                                                                   // 34\n                                                                                                                       // 35\nTemplate.__checkName(\"afFormGroup_bootstrap3-inline\");                                                                 // 36\nTemplate[\"afFormGroup_bootstrap3-inline\"] = new Template(\"Template.afFormGroup_bootstrap3-inline\", (function() {       // 37\n  var view = this;                                                                                                     // 38\n  return HTML.DIV({                                                                                                    // 39\n    \"class\": function() {                                                                                              // 40\n      return [ \"form-group \", Blaze.If(function() {                                                                    // 41\n        return Spacebars.dataMustache(view.lookup(\"afFieldIsInvalid\"), Spacebars.kw({                                  // 42\n          name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                        // 43\n        }));                                                                                                           // 44\n      }, function() {                                                                                                  // 45\n        return \"has-error\";                                                                                            // 46\n      }) ];                                                                                                            // 47\n    }                                                                                                                  // 48\n  }, \"\\n    \", Blaze.Unless(function() {                                                                               // 49\n    return Spacebars.call(view.lookup(\"skipLabel\"));                                                                   // 50\n  }, function() {                                                                                                      // 51\n    return [ \"\\n    \", HTML.LABEL(HTML.Attrs(function() {                                                              // 52\n      return Spacebars.attrMustache(view.lookup(\"afFieldLabelAtts\"));                                                  // 53\n    }), Blaze.If(function() {                                                                                          // 54\n      return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"labelText\"));                                             // 55\n    }, function() {                                                                                                    // 56\n      return Blaze.View(function() {                                                                                   // 57\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"labelText\"));                                       // 58\n      });                                                                                                              // 59\n    }, function() {                                                                                                    // 60\n      return Blaze.View(function() {                                                                                   // 61\n        return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                      // 62\n          name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                        // 63\n        }));                                                                                                           // 64\n      });                                                                                                              // 65\n    })), \"\\n    \" ];                                                                                                   // 66\n  }), \"\\n    \", Blaze._TemplateWith(function() {                                                                       // 67\n    return Spacebars.call(view.lookup(\"afFieldInputAtts\"));                                                            // 68\n  }, function() {                                                                                                      // 69\n    return Spacebars.include(view.lookupTemplate(\"afFieldInput\"));                                                     // 70\n  }), \"\\n    \", HTML.SPAN({                                                                                            // 71\n    \"class\": \"help-block\"                                                                                              // 72\n  }, Blaze.View(function() {                                                                                           // 73\n    return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"afFieldMessage\"), Spacebars.kw({                          // 74\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                            // 75\n    })));                                                                                                              // 76\n  })), \"\\n  \");                                                                                                        // 77\n}));                                                                                                                   // 78\n                                                                                                                       // 79\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/bootstrap3-inline/bootstrap3-inline.js                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nfunction findAtts() {                                                                                                  // 1\n  var c, n = 0;                                                                                                        // 2\n  do {                                                                                                                 // 3\n    c = Template.parentData(n++);                                                                                      // 4\n  } while (c && !c.atts);                                                                                              // 5\n  return c && c.atts;                                                                                                  // 6\n}                                                                                                                      // 7\n                                                                                                                       // 8\nTemplate['quickForm_bootstrap3-inline'].helpers({                                                                      // 9\n  labelClass: function () {                                                                                            // 10\n    return this.atts[\"label-class\"];                                                                                   // 11\n  },                                                                                                                   // 12\n  submitButtonAtts: function () {                                                                                      // 13\n    var qfAtts = this.atts;                                                                                            // 14\n    var atts = {};                                                                                                     // 15\n    if (typeof qfAtts.buttonClasses === \"string\") {                                                                    // 16\n      atts['class'] = qfAtts.buttonClasses;                                                                            // 17\n    } else {                                                                                                           // 18\n      atts['class'] = 'btn btn-primary autoform-inline-align';                                                         // 19\n    }                                                                                                                  // 20\n    return atts;                                                                                                       // 21\n  },                                                                                                                   // 22\n  qfAutoFormContext: function () {                                                                                     // 23\n    var ctx = _.clone(this.qfAutoFormContext || {});                                                                   // 24\n    ctx = AutoForm.Utility.addClass(ctx, \"form-inline\");                                                               // 25\n    if (ctx[\"label-class\"])                                                                                            // 26\n      delete ctx[\"label-class\"];                                                                                       // 27\n    return ctx;                                                                                                        // 28\n  }                                                                                                                    // 29\n});                                                                                                                    // 30\n                                                                                                                       // 31\nTemplate[\"afFormGroup_bootstrap3-inline\"].helpers({                                                                    // 32\n  afFieldInputAtts: function () {                                                                                      // 33\n    var atts = _.clone(this.afFieldInputAtts || {});                                                                   // 34\n    // Use the same templates as those defined for bootstrap3 template.                                                // 35\n    atts.template = \"bootstrap3\";                                                                                      // 36\n    return atts;                                                                                                       // 37\n  }                                                                                                                    // 38\n});                                                                                                                    // 39\n                                                                                                                       // 40\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/plain/template.plain.js                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"quickForm_plain\");                                                                               // 2\nTemplate[\"quickForm_plain\"] = new Template(\"Template.quickForm_plain\", (function() {                                   // 3\n  var view = this;                                                                                                     // 4\n  return Blaze._TemplateWith(function() {                                                                              // 5\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"qfAutoFormContext\"));                                       // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.include(view.lookupTemplate(\"autoForm\"), function() {                                             // 8\n      return [ \"\\n    \", Spacebars.include(view.lookupTemplate(\"afQuickFields\")), \"\\n    \", Blaze.If(function() {      // 9\n        return Spacebars.call(view.lookup(\"qfShouldRenderButton\"));                                                    // 10\n      }, function() {                                                                                                  // 11\n        return [ \"\\n    \", HTML.DIV(\"\\n      \", HTML.BUTTON(HTML.Attrs({                                               // 12\n          type: \"submit\"                                                                                               // 13\n        }, function() {                                                                                                // 14\n          return Spacebars.attrMustache(view.lookup(\"submitButtonAtts\"));                                              // 15\n        }), \"\\n      \", Spacebars.With(function() {                                                                    // 16\n          return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"atts\", \"buttonContent\"));                            // 17\n        }, function() {                                                                                                // 18\n          return [ \"\\n      \", Blaze.View(function() {                                                                 // 19\n            return Spacebars.mustache(view.lookup(\".\"));                                                               // 20\n          }), \"\\n      \" ];                                                                                            // 21\n        }, function() {                                                                                                // 22\n          return \"\\n      Submit\\n      \";                                                                             // 23\n        }), \"\\n      \"), \"\\n    \"), \"\\n    \" ];                                                                        // 24\n      }), \"\\n  \" ];                                                                                                    // 25\n    });                                                                                                                // 26\n  });                                                                                                                  // 27\n}));                                                                                                                   // 28\n                                                                                                                       // 29\nTemplate.__checkName(\"afFormGroup_plain\");                                                                             // 30\nTemplate[\"afFormGroup_plain\"] = new Template(\"Template.afFormGroup_plain\", (function() {                               // 31\n  var view = this;                                                                                                     // 32\n  return HTML.DIV({                                                                                                    // 33\n    \"class\": function() {                                                                                              // 34\n      return Blaze.If(function() {                                                                                     // 35\n        return Spacebars.dataMustache(view.lookup(\"afFieldIsInvalid\"), Spacebars.kw({                                  // 36\n          name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                        // 37\n        }));                                                                                                           // 38\n      }, function() {                                                                                                  // 39\n        return \"has-error\";                                                                                            // 40\n      });                                                                                                              // 41\n    }                                                                                                                  // 42\n  }, \"\\n    \", Blaze.Unless(function() {                                                                               // 43\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"skipLabel\"));                                               // 44\n  }, function() {                                                                                                      // 45\n    return [ \"\\n    \", HTML.LABEL(HTML.Attrs(function() {                                                              // 46\n      return Spacebars.attrMustache(Spacebars.dot(view.lookup(\".\"), \"afFieldLabelAtts\"));                              // 47\n    }), Blaze.If(function() {                                                                                          // 48\n      return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"labelText\"));                                             // 49\n    }, function() {                                                                                                    // 50\n      return Blaze.View(function() {                                                                                   // 51\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"labelText\"));                                       // 52\n      });                                                                                                              // 53\n    }, function() {                                                                                                    // 54\n      return Blaze.View(function() {                                                                                   // 55\n        return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                      // 56\n          name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                        // 57\n        }));                                                                                                           // 58\n      });                                                                                                              // 59\n    })), \"\\n    \" ];                                                                                                   // 60\n  }), \"\\n    \", Blaze._TemplateWith(function() {                                                                       // 61\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"afFieldInputAtts\"));                                        // 62\n  }, function() {                                                                                                      // 63\n    return Spacebars.include(view.lookupTemplate(\"afFieldInput\"));                                                     // 64\n  }), \"\\n    \", HTML.SPAN(Blaze.View(function() {                                                                      // 65\n    return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"afFieldMessage\"), Spacebars.kw({                          // 66\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                            // 67\n    })));                                                                                                              // 68\n  })), \"\\n  \");                                                                                                        // 69\n}));                                                                                                                   // 70\n                                                                                                                       // 71\nTemplate.__checkName(\"afObjectField_plain\");                                                                           // 72\nTemplate[\"afObjectField_plain\"] = new Template(\"Template.afObjectField_plain\", (function() {                           // 73\n  var view = this;                                                                                                     // 74\n  return HTML.FIELDSET(\"\\n    \", Spacebars.With(function() {                                                           // 75\n    return Spacebars.dataMustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                      // 76\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                            // 77\n    }));                                                                                                               // 78\n  }, function() {                                                                                                      // 79\n    return [ \"\\n    \", HTML.LEGEND(Blaze.View(function() {                                                             // 80\n      return Spacebars.mustache(view.lookup(\".\"));                                                                     // 81\n    })), \"\\n    \" ];                                                                                                   // 82\n  }), \"\\n    \", Blaze._TemplateWith(function() {                                                                       // 83\n    return {                                                                                                           // 84\n      name: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\"))                                            // 85\n    };                                                                                                                 // 86\n  }, function() {                                                                                                      // 87\n    return Spacebars.include(view.lookupTemplate(\"afQuickFields\"));                                                    // 88\n  }), \"\\n  \");                                                                                                         // 89\n}));                                                                                                                   // 90\n                                                                                                                       // 91\nTemplate.__checkName(\"afArrayField_plain\");                                                                            // 92\nTemplate[\"afArrayField_plain\"] = new Template(\"Template.afArrayField_plain\", (function() {                             // 93\n  var view = this;                                                                                                     // 94\n  return HTML.FIELDSET(\"\\n    \", HTML.LEGEND(Blaze.View(function() {                                                   // 95\n    return Spacebars.mustache(view.lookup(\"afFieldLabelText\"), Spacebars.kw({                                          // 96\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                            // 97\n    }));                                                                                                               // 98\n  })), \"\\n    \", Blaze.If(function() {                                                                                 // 99\n    return Spacebars.dataMustache(view.lookup(\"afFieldIsInvalid\"), Spacebars.kw({                                      // 100\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                            // 101\n    }));                                                                                                               // 102\n  }, function() {                                                                                                      // 103\n    return [ \"\\n    \", HTML.DIV({                                                                                      // 104\n      \"class\": \"autoform-array-field-error\"                                                                            // 105\n    }, \"\\n      \", Blaze.View(function() {                                                                             // 106\n      return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"afFieldMessage\"), Spacebars.kw({                        // 107\n        name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")                                                          // 108\n      })));                                                                                                            // 109\n    }), \"\\n    \"), \"\\n    \" ];                                                                                         // 110\n  }), \"\\n    \", Blaze._TemplateWith(function() {                                                                       // 111\n    return {                                                                                                           // 112\n      name: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\")),                                           // 113\n      minCount: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"minCount\")),                                   // 114\n      maxCount: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"atts\", \"maxCount\"))                                    // 115\n    };                                                                                                                 // 116\n  }, function() {                                                                                                      // 117\n    return Spacebars.include(view.lookupTemplate(\"afEachArrayItem\"), function() {                                      // 118\n      return [ \"\\n    \", HTML.DIV({                                                                                    // 119\n        \"class\": \"autoform-array-item\"                                                                                 // 120\n      }, \"\\n      \", Blaze._TemplateWith(function() {                                                                  // 121\n        return {                                                                                                       // 122\n          name: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"name\")),                                               // 123\n          label: Spacebars.call(false)                                                                                 // 124\n        };                                                                                                             // 125\n      }, function() {                                                                                                  // 126\n        return Spacebars.include(view.lookupTemplate(\"afQuickField\"));                                                 // 127\n      }), \"\\n      \", Blaze.If(function() {                                                                            // 128\n        return Spacebars.dataMustache(view.lookup(\"afArrayFieldHasMoreThanMinimum\"), Spacebars.kw({                    // 129\n          name: Spacebars.dot(view.lookup(\"..\"), \"atts\", \"name\"),                                                      // 130\n          minCount: Spacebars.dot(view.lookup(\"..\"), \"atts\", \"minCount\"),                                              // 131\n          maxCount: Spacebars.dot(view.lookup(\"..\"), \"atts\", \"maxCount\")                                               // 132\n        }));                                                                                                           // 133\n      }, function() {                                                                                                  // 134\n        return [ \"\\n      \", HTML.BUTTON({                                                                             // 135\n          type: \"button\",                                                                                              // 136\n          \"class\": \"autoform-remove-item\"                                                                              // 137\n        }, \"Remove\"), \"\\n      \" ];                                                                                    // 138\n      }), \"\\n    \"), \"\\n    \" ];                                                                                       // 139\n    });                                                                                                                // 140\n  }), \"\\n    \", Blaze.If(function() {                                                                                  // 141\n    return Spacebars.dataMustache(view.lookup(\"afArrayFieldHasLessThanMaximum\"), Spacebars.kw({                        // 142\n      name: Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\"),                                                           // 143\n      minCount: Spacebars.dot(view.lookup(\".\"), \"atts\", \"minCount\"),                                                   // 144\n      maxCount: Spacebars.dot(view.lookup(\".\"), \"atts\", \"maxCount\")                                                    // 145\n    }));                                                                                                               // 146\n  }, function() {                                                                                                      // 147\n    return [ \"\\n    \", HTML.DIV({                                                                                      // 148\n      style: \"margin-top: 20px;\"                                                                                       // 149\n    }, \"\\n      \", HTML.BUTTON({                                                                                       // 150\n      type: \"button\",                                                                                                  // 151\n      \"class\": \"autoform-add-item\",                                                                                    // 152\n      \"data-autoform-field\": function() {                                                                              // 153\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"atts\", \"name\"));                                    // 154\n      },                                                                                                               // 155\n      \"data-autoform-mincount\": function() {                                                                           // 156\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"atts\", \"minCount\"));                                // 157\n      },                                                                                                               // 158\n      \"data-autoform-maxcount\": function() {                                                                           // 159\n        return Spacebars.mustache(Spacebars.dot(view.lookup(\".\"), \"atts\", \"maxCount\"));                                // 160\n      }                                                                                                                // 161\n    }, \"Add\"), \"\\n    \"), \"\\n    \" ];                                                                                  // 162\n  }), \"\\n  \");                                                                                                         // 163\n}));                                                                                                                   // 164\n                                                                                                                       // 165\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/plain/plain.js                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*                                                                                                                     // 1\n * Template helpers for \"plain\" template                                                                               // 2\n */                                                                                                                    // 3\n                                                                                                                       // 4\nTemplate['quickForm_plain'].helpers({                                                                                  // 5\n  submitButtonAtts: function plQuickFormSubmitButtonAtts() {                                                           // 6\n    var qfAtts = this.atts;                                                                                            // 7\n    var atts = {};                                                                                                     // 8\n    if (typeof qfAtts.buttonClasses === \"string\") {                                                                    // 9\n      atts['class'] = qfAtts.buttonClasses;                                                                            // 10\n    }                                                                                                                  // 11\n    return atts;                                                                                                       // 12\n  }                                                                                                                    // 13\n});                                                                                                                    // 14\n                                                                                                                       // 15\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/plain-fieldset/template.plain-fieldset.js                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"quickForm_plain-fieldset\");                                                                      // 2\nTemplate[\"quickForm_plain-fieldset\"] = new Template(\"Template.quickForm_plain-fieldset\", (function() {                 // 3\n  var view = this;                                                                                                     // 4\n  return Blaze._TemplateWith(function() {                                                                              // 5\n    return Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"qfAutoFormContext\"));                                       // 6\n  }, function() {                                                                                                      // 7\n    return Spacebars.include(view.lookupTemplate(\"autoForm\"), function() {                                             // 8\n      return [ \"\\n    \", HTML.FIELDSET(\"\\n      \", Spacebars.With(function() {                                         // 9\n        return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"atts\", \"legend\"));                                     // 10\n      }, function() {                                                                                                  // 11\n        return [ \"\\n      \", HTML.LEGEND(Blaze.View(function() {                                                       // 12\n          return Spacebars.mustache(view.lookup(\".\"));                                                                 // 13\n        })), \"\\n      \" ];                                                                                             // 14\n      }), \"\\n      \", Spacebars.include(view.lookupTemplate(\"afQuickFields\")), \"\\n    \"), \"\\n    \", Blaze.If(function() {\n        return Spacebars.call(view.lookup(\"qfShouldRenderButton\"));                                                    // 16\n      }, function() {                                                                                                  // 17\n        return [ \"\\n    \", HTML.DIV(\"\\n      \", HTML.BUTTON(HTML.Attrs({                                               // 18\n          type: \"submit\"                                                                                               // 19\n        }, function() {                                                                                                // 20\n          return Spacebars.attrMustache(view.lookup(\"submitButtonAtts\"));                                              // 21\n        }), \"\\n        \", Spacebars.With(function() {                                                                  // 22\n          return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"atts\", \"buttonContent\"));                            // 23\n        }, function() {                                                                                                // 24\n          return [ \"\\n        \", Blaze.View(function() {                                                               // 25\n            return Spacebars.mustache(view.lookup(\".\"));                                                               // 26\n          }), \"\\n        \" ];                                                                                          // 27\n        }, function() {                                                                                                // 28\n          return \"\\n        Submit\\n        \";                                                                         // 29\n        }), \"\\n      \"), \"\\n    \"), \"\\n    \" ];                                                                        // 30\n      }), \"\\n  \" ];                                                                                                    // 31\n    });                                                                                                                // 32\n  });                                                                                                                  // 33\n}));                                                                                                                   // 34\n                                                                                                                       // 35\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:autoform/templates/plain-fieldset/plain-fieldset.js                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate['quickForm_plain-fieldset'].helpers({                                                                         // 1\n  submitButtonAtts: function plfsQuickFormSubmitButtonAtts() {                                                         // 2\n    var qfAtts = this.atts;                                                                                            // 3\n    var atts = {};                                                                                                     // 4\n    if (typeof qfAtts.buttonClasses === \"string\") {                                                                    // 5\n      atts['class'] = qfAtts.buttonClasses;                                                                            // 6\n    }                                                                                                                  // 7\n    return atts;                                                                                                       // 8\n  }                                                                                                                    // 9\n});                                                                                                                    // 10\n                                                                                                                       // 11\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}}]