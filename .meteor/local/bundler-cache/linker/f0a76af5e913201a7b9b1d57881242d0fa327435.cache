[{"type":"js","data":"/* Imports for global scope */\n\nRouter = Package['iron:router'].Router;\nRouteController = Package['iron:router'].RouteController;\nFake = Package['anti:fake'].Fake;\nCollectionHooks = Package['matb33:collection-hooks'].CollectionHooks;\nPlatform = Package['meteoric:ionic'].Platform;\nIonActionSheet = Package['meteoric:ionic'].IonActionSheet;\nIonBackdrop = Package['meteoric:ionic'].IonBackdrop;\nIonHeaderBar = Package['meteoric:ionic'].IonHeaderBar;\nIonKeyboard = Package['meteoric:ionic'].IonKeyboard;\nIonLoading = Package['meteoric:ionic'].IonLoading;\nIonModal = Package['meteoric:ionic'].IonModal;\nIonNavigation = Package['meteoric:ionic'].IonNavigation;\nIonPopover = Package['meteoric:ionic'].IonPopover;\nIonPopup = Package['meteoric:ionic'].IonPopup;\nIonSideMenu = Package['meteoric:ionic'].IonSideMenu;\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nLog = Package.logging.Log;\nRandom = Package.random.Random;\nEJSON = Package.ejson.EJSON;\nSpacebars = Package.spacebars.Spacebars;\ncheck = Package.check.check;\nMatch = Package.check.Match;\nmoment = Package['momentjs:moment'].moment;\nActiveRoute = Package['zimme:active-route'].ActiveRoute;\nAccounts = Package['accounts-base'].Accounts;\nAccountsServer = Package['accounts-base'].AccountsServer;\nIron = Package['iron:core'].Iron;\nSimpleSchema = Package['aldeed:simple-schema'].SimpleSchema;\nMongoObject = Package['aldeed:simple-schema'].MongoObject;\nAccountsTemplates = Package['useraccounts:core'].AccountsTemplates;\nMeteor = Package.meteor.Meteor;\nWebApp = Package.webapp.WebApp;\nmain = Package.webapp.main;\nWebAppInternals = Package.webapp.WebAppInternals;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nT9n = Package['softwarerero:accounts-t9n'].T9n;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"(function(){STATES = [\n    'AK', 'AL', 'AZ', 'AR', 'CA', 'CO', 'CT', 'DE', 'FL', 'GA', 'HI', 'ID', 'IL', 'IN', 'IA', 'KS', 'KY', 'LA', 'ME', 'MD', 'MA', 'MI', 'MN', 'MS', 'MO', 'MT', 'NE', 'NV', 'NH', 'NJ', 'NM', 'NY', 'NC', 'ND', 'OH', 'OK', 'OR', 'PA', 'RI', 'SC', 'SD', 'TN', 'TX', 'UT', 'VT', 'VA', 'WA', 'WV', 'WI', 'WY'\n];\n\nContacts = new Mongo.Collection('contacts');\n\nContacts.before.insert(function (userId, doc) {\n    var gender = Random.choice(['men', 'women']);\n    var num = _.random(0, 50);\n    doc.avatarUrl = 'https://randomuser.me/api/portraits/thumb/' + gender + '/' + num + '.jpg';\n});\n\nContacts.attachSchema(new SimpleSchema({\n    name: {\n        type: Object\n    },\n    'name.first': {\n        type: String,\n        label: 'First Name',\n        autoform: {\n            'label-type': 'floating',\n            placeholder: 'First Name'\n        },\n        max: 200\n    },\n    'name.last': {\n        type: String,\n        label: 'Last Name',\n        autoform: {\n            'label-type': 'floating',\n            placeholder: 'Last Name'\n        },\n        max: 200\n    },\n    contact: {\n        type: Object\n    },\n    'contact.email': {\n        type: String,\n        label: 'Email Address',\n        autoform: {\n            'label-type': 'placeholder',\n            placeholder: 'Email Address'\n        }\n    },\n    'contact.phonenumber': {\n        type: String,\n        label: 'Phone Number',\n        autoform: {\n            'label-type': 'placeholder',\n            placeholder: 'Phone Number'\n        }\n    },\n    gender: {\n        type: String,\n        autoform: {\n            options: [\n                {value: 'men', label: 'men'},\n                {value: 'women', label: 'women'},\n            ],\n            type: 'select-radio'\n        }\n    },\n    location: {\n        type: Object\n    },\n    'location.latitude': {\n        type: String,\n        autoform: {\n            'label-type': 'floating',\n            placeholder: 'Latitude'\n        },\n        max: 8\n    },\n    'location.longitude': {\n        type: String,\n        autoform: {\n            'label-type': 'floating',\n            placeholder: 'Longitude'\n        },\n        max: 8\n    },\n    avatarUrl: {\n        type: String,\n        optional: true\n    }\n}));\n\n\nContacts.allow({\n    insert: function (userId, contact) {\n        // can only create posts where you are the author\n        return true;\n    },\n    update: function (userId, post) {\n        // can only delete your own posts\n        return true;\n    }, remove: function (userId, post) {\n        // can only delete your own posts\n        return true;\n    }\n\n});\n\n}).call(this);\n","servePath":"/both/collections.js","sourceMap":{"version":3,"sources":["meteor://ðŸ’»app/both/collections.js"],"names":[],"mappings":"sfile":"/both/collections.js","sourcesContent":["STATES = [\n    'AK', 'AL', 'AZ', 'AR', 'CA', 'CO', 'CT', 'DE', 'FL', 'GA', 'HI', 'ID', 'IL', 'IN', 'IA', 'KS', 'KY', 'LA', 'ME', 'MD', 'MA', 'MI', 'MN', 'MS', 'MO', 'MT', 'NE', 'NV', 'NH', 'NJ', 'NM', 'NY', 'NC', 'ND', 'OH', 'OK', 'OR', 'PA', 'RI', 'SC', 'SD', 'TN', 'TX', 'UT', 'VT', 'VA', 'WA', 'WV', 'WI', 'WY'\n];\n\nContacts = new Mongo.Collection('contacts');\n\nContacts.before.insert(function (userId, doc) {\n    var gender = Random.choice(['men', 'women']);\n    var num = _.random(0, 50);\n    doc.avatarUrl = 'https://randomuser.me/api/portraits/thumb/' + gender + '/' + num + '.jpg';\n});\n\nContacts.attachSchema(new SimpleSchema({\n    name: {\n        type: Object\n    },\n    'name.first': {\n        type: String,\n        label: 'First Name',\n        autoform: {\n            'label-type': 'floating',\n            placeholder: 'First Name'\n        },\n        max: 200\n    },\n    'name.last': {\n        type: String,\n        label: 'Last Name',\n        autoform: {\n            'label-type': 'floating',\n            placeholder: 'Last Name'\n        },\n        max: 200\n    },\n    contact: {\n        type: Object\n    },\n    'contact.email': {\n        type: String,\n        label: 'Email Address',\n        autoform: {\n            'label-type': 'placeholder',\n            placeholder: 'Email Address'\n        }\n    },\n    'contact.phonenumber': {\n        type: String,\n        label: 'Phone Number',\n        autoform: {\n            'label-type': 'placeholder',\n            placeholder: 'Phone Number'\n        }\n    },\n    gender: {\n        type: String,\n        autoform: {\n            options: [\n                {value: 'men', label: 'men'},\n                {value: 'women', label: 'women'},\n            ],\n            type: 'select-radio'\n        }\n    },\n    location: {\n        type: Object\n    },\n    'location.latitude': {\n        type: String,\n        autoform: {\n            'label-type': 'floating',\n            placeholder: 'Latitude'\n        },\n        max: 8\n    },\n    'location.longitude': {\n        type: String,\n        autoform: {\n            'label-type': 'floating',\n            placeholder: 'Longitude'\n        },\n        max: 8\n    },\n    avatarUrl: {\n        type: String,\n        optional: true\n    }\n}));\n\n\nContacts.allow({\n    insert: function (userId, contact) {\n        // can only create posts where you are the author\n        return true;\n    },\n    update: function (userId, post) {\n        // can only delete your own posts\n        return true;\n    }, remove: function (userId, post) {\n        // can only delete your own posts\n        return true;\n    }\n\n});\n"]}},{"type":"js","data":"(function(){Router.configure({\n  layoutTemplate: 'layout'\n});\n\nRouter.map(function() {\n  this.route('contacts', {\n    path: '/'\n  });\n\n  this.route('contacts.show', {\n    path: '/contacts/:_id'\n  });\n});\n\n}).call(this);\n","servePath":"/both/router.js","sourceMap":{"version":3,"sources":["meteor://ðŸ’»app/both/router.js"],"names":[],"mappings":"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"/both/router.js","sourcesContent":["Router.configure({\n  layoutTemplate: 'layout'\n});\n\nRouter.map(function() {\n  this.route('contacts', {\n    path: '/'\n  });\n\n  this.route('contacts.show', {\n    path: '/contacts/:_id'\n  });\n});\n"]}},{"type":"js","data":"(function(){Meteor.publish('contacts', function() {\n  return Contacts.find();\n});\n\nMeteor.publish('contact', function(_id) {\n  return Contacts.find({_id: _id});\n});\n\n}).call(this);\n","servePath":"/server/publications.js","sourceMap":{"version":3,"sources":["meteor://ðŸ’»app/server/publications.js"],"names":[],"mappings":"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA","file":"/server/publications.js","sourcesContent":["Meteor.publish('contacts', function() {\n  return Contacts.find();\n});\n\nMeteor.publish('contact', function(_id) {\n  return Contacts.find({_id: _id});\n});\n"]}},{"type":"js","data":"(function(){Meteor.startup(function () {\n\n  if (Contacts.find({}).count() === 0) {\n    _(20).times(function(n) {\n      var user = Fake.user();\n\n      Contacts.insert({\n        name: {\n          first: user.name,\n          last: user.surname\n        },\n        emails: [{label: 'Work', address: user.email}],\n        priority: Fake.fromArray(['High', 'Medium', 'Low']),\n        location: {\n          city: Fake.word(),\n          state: Fake.fromArray(STATES)\n        },\n        details: {\n          notes: Fake.paragraph(),\n          active: Fake.fromArray([true, false])\n        }\n      });\n    });\n  }\n\n});\n\n}).call(this);\n","servePath":"/server/seeds.js","sourceMap":{"version":3,"sources":["meteor://ðŸ’»app/server/seeds.js"],"names":[],"mappings":"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"/server/seeds.js","sourcesContent":["Meteor.startup(function () {\n\n  if (Contacts.find({}).count() === 0) {\n    _(20).times(function(n) {\n      var user = Fake.user();\n\n      Contacts.insert({\n        name: {\n          first: user.name,\n          last: user.surname\n        },\n        emails: [{label: 'Work', address: user.email}],\n        priority: Fake.fromArray(['High', 'Medium', 'Low']),\n        location: {\n          city: Fake.word(),\n          state: Fake.fromArray(STATES)\n        },\n        details: {\n          notes: Fake.paragraph(),\n          active: Fake.fromArray([true, false])\n        }\n      });\n    });\n  }\n\n});\n"]}}]